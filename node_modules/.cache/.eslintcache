[{"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\index.js":"1","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\App.js":"2","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\context\\index.js":"3","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\routes.js":"4","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\index.js":"5","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\index.js":"6","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\index.js":"7","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\index.js":"8","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\index.js":"9","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\index.js":"10","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js":"11","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js":"12","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js":"13","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\index.js":"14","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\index.js":"15","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companysteps\\index.js":"16","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\index.js":"17","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companiesProfile\\index.js":"18","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groupview\\index.js":"19","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js":"20","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js":"21","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\free-days\\index.js":"22","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js":"23","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userHistory\\index.js":"24","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js":"25","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\index.js":"26","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js":"27","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js":"28","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\index.js":"29","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\addDetailsToTimeOffType\\index.js":"30","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\checklists\\index.js":"31","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js":"32","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\index.js":"33","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userProfile\\index.js":"34","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js":"35","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js":"36","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\index.js":"37","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\index.js":"38","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryTime\\index.js":"39","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js":"40","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js":"41","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\index.js":"42","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js":"43","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companyroles\\index.js":"44","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\index.js":"45","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\index.js":"46","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\viewUserProrate\\index.js":"47","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js":"48","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js":"49","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestJourney\\index.js":"50","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js":"51","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\disapprove\\index.js":"52","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js":"53","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js":"54","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js":"55","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js":"56","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\update-salary-advance\\index.js":"57","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companystatustype\\index.js":"58","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\forwardTimeOffRequests\\index.js":"59","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js":"60","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js":"61","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js":"62","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\companyRegistration\\index.js":"63","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js":"64","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js":"65","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js":"66","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\index.js":"67","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\update\\index.js":"68","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js":"69","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\viewAppraisal\\index.js":"70","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\index.js":"71","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\questions\\index.js":"72","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js":"73","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalResult\\index.js":"74","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js":"75","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\index.js":"76","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js":"77","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\update\\index.js":"78","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisers\\index.js":"79","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appaisalQandA\\index.js":"80","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\viewAppraisalQues\\index.js":"81","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\index.js":"82","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js":"83","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js":"84","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js":"85","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js":"86","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js":"87","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js":"88","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\postHeader.js":"89","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\getHeader.js":"90","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js":"91","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companystatustype\\data\\companystatustype.js":"92","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\index.js":"93","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js":"94","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js":"95","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js":"96","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js":"97","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js":"98","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\index.js":"99","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Footer\\index.js":"100","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\index.js":"101","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js":"102","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js":"103","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js":"104","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js":"105","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js":"106","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js":"107","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js":"108","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js":"109","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js":"110","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js":"111","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js":"112","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js":"113","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js":"114","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\index.js":"115","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js":"116","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\data\\AQuestionsTableData.js":"117","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js":"118","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js":"119","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\data\\appraisalGradingData.js":"120","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\countries-states-master\\countries.js":"121","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\data\\salaryProrateTable.js":"122","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js":"123","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js":"124","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryTime\\data\\salaryTimeTable.js":"125","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js":"126","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\data\\appraisalData.js":"127","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\imgHeader.js":"128","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js":"129","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestJourney\\table\\timeOffJourneyAdd.js":"130","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js":"131","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\nigeria.js":"132","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\data\\salaryAdvanceData.js":"133","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js":"134","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js":"135","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companyroles\\data\\companyRoles.js":"136","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestTable\\timeOffRequests.js":"137","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\addDetailsToTimeOffType\\adddetailstable.js":"138","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\data\\timeofftype.js":"139","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js":"140","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js":"141","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js":"142","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js":"143","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companysteps\\data\\companySteps.js":"144","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js":"145","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js":"146","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\link.js":"147","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js":"148","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js":"149","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js":"150","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\container.js":"151","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js":"152","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js":"153","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js":"154","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js":"155","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js":"156","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js":"157","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js":"158","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js":"159","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js":"160","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js":"161","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js":"162","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js":"163","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js":"164","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js":"165","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js":"166","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js":"167","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js":"168","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js":"169","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js":"170","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js":"171","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js":"172","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js":"173","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js":"174","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js":"175","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js":"176","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js":"177","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js":"178","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js":"179","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js":"180","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js":"181","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js":"182","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js":"183","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js":"184","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js":"185","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js":"186","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js":"187","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js":"188","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js":"189","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js":"190","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js":"191","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js":"192","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js":"193","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js":"194","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js":"195","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js":"196","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js":"197","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js":"198","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js":"199","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js":"200","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js":"201","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js":"202","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js":"203","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js":"204","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js":"205","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js":"206","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js":"207","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js":"208","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js":"209","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js":"210","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js":"211","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js":"212","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js":"213","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js":"214","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js":"215","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js":"216","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js":"217","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js":"218","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js":"219","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js":"220","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js":"221","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js":"222","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js":"223","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js":"224","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js":"225","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js":"226","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js":"227","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js":"228","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js":"229","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js":"230","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js":"231","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js":"232","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js":"233","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js":"234","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js":"235","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js":"236","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js":"237","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js":"238","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js":"239","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js":"240","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js":"241","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js":"242","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js":"243","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js":"244","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js":"245","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js":"246","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js":"247","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js":"248","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js":"249","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js":"250","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js":"251","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js":"252","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js":"253","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js":"254","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js":"255","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js":"256","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js":"257","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js":"258","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js":"259","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js":"260","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js":"261","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js":"262","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js":"263","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js":"264","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js":"265","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js":"266","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js":"267","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js":"268","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js":"269","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js":"270","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\index.js":"271"},{"size":951,"mtime":1656680997757,"results":"272","hashOfConfig":"273"},{"size":4652,"mtime":1656680997324,"results":"274","hashOfConfig":"273"},{"size":4432,"mtime":1656680997658,"results":"275","hashOfConfig":"273"},{"size":22583,"mtime":1656691973221,"results":"276","hashOfConfig":"273"},{"size":7079,"mtime":1656680997575,"results":"277","hashOfConfig":"273"},{"size":9581,"mtime":1656680997720,"results":"278","hashOfConfig":"273"},{"size":7199,"mtime":1656680997739,"results":"279","hashOfConfig":"273"},{"size":1747,"mtime":1656680997639,"results":"280","hashOfConfig":"273"},{"size":6774,"mtime":1656680997631,"results":"281","hashOfConfig":"273"},{"size":14811,"mtime":1656680997827,"results":"282","hashOfConfig":"273"},{"size":1256,"mtime":1656680997882,"results":"283","hashOfConfig":"273"},{"size":12195,"mtime":1656680997818,"results":"284","hashOfConfig":"273"},{"size":12082,"mtime":1656680997878,"results":"285","hashOfConfig":"273"},{"size":11345,"mtime":1656680997763,"results":"286","hashOfConfig":"273"},{"size":6840,"mtime":1656680997847,"results":"287","hashOfConfig":"273"},{"size":6784,"mtime":1656680997835,"results":"288","hashOfConfig":"273"},{"size":7884,"mtime":1656680997942,"results":"289","hashOfConfig":"273"},{"size":16389,"mtime":1656680997829,"results":"290","hashOfConfig":"273"},{"size":7982,"mtime":1656680997852,"results":"291","hashOfConfig":"273"},{"size":6739,"mtime":1656680997922,"results":"292","hashOfConfig":"273"},{"size":11556,"mtime":1656680997767,"results":"293","hashOfConfig":"273"},{"size":10559,"mtime":1656680997849,"results":"294","hashOfConfig":"273"},{"size":61933,"mtime":1656680997957,"results":"295","hashOfConfig":"273"},{"size":14377,"mtime":1656680997944,"results":"296","hashOfConfig":"273"},{"size":14508,"mtime":1656680997921,"results":"297","hashOfConfig":"273"},{"size":21508,"mtime":1656680997929,"results":"298","hashOfConfig":"273"},{"size":12990,"mtime":1656680997946,"results":"299","hashOfConfig":"273"},{"size":12008,"mtime":1656680997955,"results":"300","hashOfConfig":"273"},{"size":11865,"mtime":1656680997948,"results":"301","hashOfConfig":"273"},{"size":13724,"mtime":1656680997940,"results":"302","hashOfConfig":"273"},{"size":8449,"mtime":1656680997828,"results":"303","hashOfConfig":"273"},{"size":12627,"mtime":1656680997879,"results":"304","hashOfConfig":"273"},{"size":32854,"mtime":1656680997907,"results":"305","hashOfConfig":"273"},{"size":91452,"mtime":1656680997968,"results":"306","hashOfConfig":"273"},{"size":36697,"mtime":1656680997889,"results":"307","hashOfConfig":"273"},{"size":34350,"mtime":1656680997853,"results":"308","hashOfConfig":"273"},{"size":9007,"mtime":1656680997905,"results":"309","hashOfConfig":"273"},{"size":6091,"mtime":1656680997851,"results":"310","hashOfConfig":"273"},{"size":5669,"mtime":1656680997919,"results":"311","hashOfConfig":"273"},{"size":13145,"mtime":1656680997823,"results":"312","hashOfConfig":"273"},{"size":14130,"mtime":1656680997824,"results":"313","hashOfConfig":"273"},{"size":13781,"mtime":1656680997910,"results":"314","hashOfConfig":"273"},{"size":13173,"mtime":1656680997764,"results":"315","hashOfConfig":"273"},{"size":6705,"mtime":1656680997831,"results":"316","hashOfConfig":"273"},{"size":7074,"mtime":1656680997902,"results":"317","hashOfConfig":"273"},{"size":9198,"mtime":1656680997895,"results":"318","hashOfConfig":"273"},{"size":9167,"mtime":1656680997917,"results":"319","hashOfConfig":"273"},{"size":8097,"mtime":1656680997896,"results":"320","hashOfConfig":"273"},{"size":7741,"mtime":1656680997821,"results":"321","hashOfConfig":"273"},{"size":813,"mtime":1656680997931,"results":"322","hashOfConfig":"273"},{"size":7513,"mtime":1656680997952,"results":"323","hashOfConfig":"273"},{"size":8098,"mtime":1656680997925,"results":"324","hashOfConfig":"273"},{"size":8477,"mtime":1656680997899,"results":"325","hashOfConfig":"273"},{"size":9261,"mtime":1656680997891,"results":"326","hashOfConfig":"273"},{"size":8428,"mtime":1656680997877,"results":"327","hashOfConfig":"273"},{"size":5248,"mtime":1656680997898,"results":"328","hashOfConfig":"273"},{"size":11069,"mtime":1656680997906,"results":"329","hashOfConfig":"273"},{"size":7091,"mtime":1656680997834,"results":"330","hashOfConfig":"273"},{"size":13702,"mtime":1656680997926,"results":"331","hashOfConfig":"273"},{"size":8530,"mtime":1656680997801,"results":"332","hashOfConfig":"273"},{"size":9930,"mtime":1656680997787,"results":"333","hashOfConfig":"273"},{"size":3255,"mtime":1656680997638,"results":"334","hashOfConfig":"273"},{"size":19857,"mtime":1656680997789,"results":"335","hashOfConfig":"273"},{"size":443,"mtime":1656680997796,"results":"336","hashOfConfig":"273"},{"size":10209,"mtime":1656680997803,"results":"337","hashOfConfig":"273"},{"size":4240,"mtime":1656680997798,"results":"338","hashOfConfig":"273"},{"size":7307,"mtime":1656680997770,"results":"339","hashOfConfig":"273"},{"size":19997,"mtime":1656680997936,"results":"340","hashOfConfig":"273"},{"size":31686,"mtime":1656680997802,"results":"341","hashOfConfig":"273"},{"size":9375,"mtime":1656680997773,"results":"342","hashOfConfig":"273"},{"size":12303,"mtime":1656680997776,"results":"343","hashOfConfig":"273"},{"size":9668,"mtime":1656680997771,"results":"344","hashOfConfig":"273"},{"size":20547,"mtime":1656680997799,"results":"345","hashOfConfig":"273"},{"size":12221,"mtime":1656680997782,"results":"346","hashOfConfig":"273"},{"size":6571,"mtime":1656680997800,"results":"347","hashOfConfig":"273"},{"size":7848,"mtime":1656680997780,"results":"348","hashOfConfig":"273"},{"size":8907,"mtime":1656680997790,"results":"349","hashOfConfig":"273"},{"size":10382,"mtime":1656680997777,"results":"350","hashOfConfig":"273"},{"size":9594,"mtime":1656680997783,"results":"351","hashOfConfig":"273"},{"size":32036,"mtime":1656680997768,"results":"352","hashOfConfig":"273"},{"size":18077,"mtime":1656680997781,"results":"353","hashOfConfig":"273"},{"size":54352,"mtime":1656680997845,"results":"354","hashOfConfig":"273"},{"size":751,"mtime":1656680997512,"results":"355","hashOfConfig":"273"},{"size":982,"mtime":1656680997593,"results":"356","hashOfConfig":"273"},{"size":746,"mtime":1656680997592,"results":"357","hashOfConfig":"273"},{"size":909,"mtime":1656680997599,"results":"358","hashOfConfig":"273"},{"size":1255,"mtime":1656680997593,"results":"359","hashOfConfig":"273"},{"size":8472,"mtime":1656680997883,"results":"360","hashOfConfig":"273"},{"size":369,"mtime":1656680997970,"results":"361","hashOfConfig":"273"},{"size":387,"mtime":1656680997755,"results":"362","hashOfConfig":"273"},{"size":9749,"mtime":1656680997876,"results":"363","hashOfConfig":"273"},{"size":7944,"mtime":1656680997833,"results":"364","hashOfConfig":"273"},{"size":2084,"mtime":1656680997641,"results":"365","hashOfConfig":"273"},{"size":739,"mtime":1656680997573,"results":"366","hashOfConfig":"273"},{"size":1880,"mtime":1656680997726,"results":"367","hashOfConfig":"273"},{"size":7226,"mtime":1656680997730,"results":"368","hashOfConfig":"273"},{"size":739,"mtime":1656680997629,"results":"369","hashOfConfig":"273"},{"size":4326,"mtime":1656680997580,"results":"370","hashOfConfig":"273"},{"size":2450,"mtime":1656680997656,"results":"371","hashOfConfig":"273"},{"size":1877,"mtime":1656680997722,"results":"372","hashOfConfig":"273"},{"size":1243,"mtime":1656680997645,"results":"373","hashOfConfig":"273"},{"size":10706,"mtime":1656680997747,"results":"374","hashOfConfig":"273"},{"size":1408,"mtime":1656680997577,"results":"375","hashOfConfig":"273"},{"size":4767,"mtime":1656680997581,"results":"376","hashOfConfig":"273"},{"size":7989,"mtime":1656680997640,"results":"377","hashOfConfig":"273"},{"size":3611,"mtime":1656680997731,"results":"378","hashOfConfig":"273"},{"size":3403,"mtime":1656680997679,"results":"379","hashOfConfig":"273"},{"size":2736,"mtime":1656680997642,"results":"380","hashOfConfig":"273"},{"size":3065,"mtime":1656680997669,"results":"381","hashOfConfig":"273"},{"size":1723,"mtime":1656680997724,"results":"382","hashOfConfig":"273"},{"size":747,"mtime":1656680997724,"results":"383","hashOfConfig":"273"},{"size":1763,"mtime":1656680997744,"results":"384","hashOfConfig":"273"},{"size":3195,"mtime":1656680997744,"results":"385","hashOfConfig":"273"},{"size":2297,"mtime":1656680997655,"results":"386","hashOfConfig":"273"},{"size":2617,"mtime":1656680997646,"results":"387","hashOfConfig":"273"},{"size":1851,"mtime":1656680997645,"results":"388","hashOfConfig":"273"},{"size":5341,"mtime":1656680997779,"results":"389","hashOfConfig":"273"},{"size":2399,"mtime":1656680997793,"results":"390","hashOfConfig":"273"},{"size":2047,"mtime":1656680997792,"results":"391","hashOfConfig":"273"},{"size":11304,"mtime":1656680997776,"results":"392","hashOfConfig":"273"},{"size":502448,"mtime":1656680997664,"results":"393","hashOfConfig":"273"},{"size":6228,"mtime":1656680997910,"results":"394","hashOfConfig":"273"},{"size":4690,"mtime":1656680997954,"results":"395","hashOfConfig":"273"},{"size":9710,"mtime":1656680997948,"results":"396","hashOfConfig":"273"},{"size":9966,"mtime":1656680997919,"results":"397","hashOfConfig":"273"},{"size":9376,"mtime":1656680997848,"results":"398","hashOfConfig":"273"},{"size":11829,"mtime":1656680997769,"results":"399","hashOfConfig":"273"},{"size":369,"mtime":1656680997756,"results":"400","hashOfConfig":"273"},{"size":8631,"mtime":1656680997892,"results":"401","hashOfConfig":"273"},{"size":2537,"mtime":1656680997933,"results":"402","hashOfConfig":"273"},{"size":8250,"mtime":1656680997901,"results":"403","hashOfConfig":"273"},{"size":124,"mtime":1656680997969,"results":"404","hashOfConfig":"273"},{"size":16450,"mtime":1656680997904,"results":"405","hashOfConfig":"273"},{"size":8329,"mtime":1656680997850,"results":"406","hashOfConfig":"273"},{"size":5700,"mtime":1656680997822,"results":"407","hashOfConfig":"273"},{"size":7977,"mtime":1656680997831,"results":"408","hashOfConfig":"273"},{"size":18999,"mtime":1656680997934,"results":"409","hashOfConfig":"273"},{"size":8361,"mtime":1656680997939,"results":"410","hashOfConfig":"273"},{"size":10602,"mtime":1656680997941,"results":"411","hashOfConfig":"273"},{"size":8198,"mtime":1656680997921,"results":"412","hashOfConfig":"273"},{"size":8967,"mtime":1656680997766,"results":"413","hashOfConfig":"273"},{"size":5140,"mtime":1656680997760,"results":"414","hashOfConfig":"273"},{"size":7979,"mtime":1656680997847,"results":"415","hashOfConfig":"273"},{"size":7457,"mtime":1656680997835,"results":"416","hashOfConfig":"273"},{"size":11817,"mtime":1656680997826,"results":"417","hashOfConfig":"273"},{"size":1688,"mtime":1656680997727,"results":"418","hashOfConfig":"273"},{"size":632,"mtime":1656680997611,"results":"419","hashOfConfig":"273"},{"size":976,"mtime":1656680997621,"results":"420","hashOfConfig":"273"},{"size":1149,"mtime":1656680997615,"results":"421","hashOfConfig":"273"},{"size":1020,"mtime":1656680997609,"results":"422","hashOfConfig":"273"},{"size":1888,"mtime":1656680997591,"results":"423","hashOfConfig":"273"},{"size":2635,"mtime":1656680997602,"results":"424","hashOfConfig":"273"},{"size":758,"mtime":1656680997604,"results":"425","hashOfConfig":"273"},{"size":2672,"mtime":1656680997602,"results":"426","hashOfConfig":"273"},{"size":612,"mtime":1656680997588,"results":"427","hashOfConfig":"273"},{"size":2371,"mtime":1656680997607,"results":"428","hashOfConfig":"273"},{"size":1213,"mtime":1656680997607,"results":"429","hashOfConfig":"273"},{"size":1341,"mtime":1656680997603,"results":"430","hashOfConfig":"273"},{"size":1243,"mtime":1656680997619,"results":"431","hashOfConfig":"273"},{"size":1467,"mtime":1656680997621,"results":"432","hashOfConfig":"273"},{"size":1603,"mtime":1656680997619,"results":"433","hashOfConfig":"273"},{"size":949,"mtime":1656680997600,"results":"434","hashOfConfig":"273"},{"size":752,"mtime":1656680997618,"results":"435","hashOfConfig":"273"},{"size":1842,"mtime":1656680997625,"results":"436","hashOfConfig":"273"},{"size":688,"mtime":1656680997582,"results":"437","hashOfConfig":"273"},{"size":1546,"mtime":1656680997626,"results":"438","hashOfConfig":"273"},{"size":1875,"mtime":1656680997617,"results":"439","hashOfConfig":"273"},{"size":897,"mtime":1656680997583,"results":"440","hashOfConfig":"273"},{"size":918,"mtime":1656680997584,"results":"441","hashOfConfig":"273"},{"size":2001,"mtime":1656680997601,"results":"442","hashOfConfig":"273"},{"size":1399,"mtime":1656680997610,"results":"443","hashOfConfig":"273"},{"size":1386,"mtime":1656680997618,"results":"444","hashOfConfig":"273"},{"size":2380,"mtime":1656680997608,"results":"445","hashOfConfig":"273"},{"size":782,"mtime":1656680997609,"results":"446","hashOfConfig":"273"},{"size":1740,"mtime":1656680997606,"results":"447","hashOfConfig":"273"},{"size":1457,"mtime":1656680997615,"results":"448","hashOfConfig":"273"},{"size":1038,"mtime":1656680997622,"results":"449","hashOfConfig":"273"},{"size":1011,"mtime":1656680997623,"results":"450","hashOfConfig":"273"},{"size":999,"mtime":1656680997623,"results":"451","hashOfConfig":"273"},{"size":1244,"mtime":1656680997605,"results":"452","hashOfConfig":"273"},{"size":1487,"mtime":1656680997605,"results":"453","hashOfConfig":"273"},{"size":814,"mtime":1656680997610,"results":"454","hashOfConfig":"273"},{"size":825,"mtime":1656680997589,"results":"455","hashOfConfig":"273"},{"size":709,"mtime":1656680997613,"results":"456","hashOfConfig":"273"},{"size":1300,"mtime":1656680997616,"results":"457","hashOfConfig":"273"},{"size":653,"mtime":1656680997613,"results":"458","hashOfConfig":"273"},{"size":987,"mtime":1656680997590,"results":"459","hashOfConfig":"273"},{"size":867,"mtime":1656680997628,"results":"460","hashOfConfig":"273"},{"size":1079,"mtime":1656680997626,"results":"461","hashOfConfig":"273"},{"size":944,"mtime":1656680997630,"results":"462","hashOfConfig":"273"},{"size":801,"mtime":1656680997629,"results":"463","hashOfConfig":"273"},{"size":1687,"mtime":1656680997624,"results":"464","hashOfConfig":"273"},{"size":3315,"mtime":1656680997578,"results":"465","hashOfConfig":"273"},{"size":1433,"mtime":1656680997614,"results":"466","hashOfConfig":"273"},{"size":892,"mtime":1656680997579,"results":"467","hashOfConfig":"273"},{"size":1391,"mtime":1656680997591,"results":"468","hashOfConfig":"273"},{"size":658,"mtime":1656680997612,"results":"469","hashOfConfig":"273"},{"size":1617,"mtime":1656680997585,"results":"470","hashOfConfig":"273"},{"size":1164,"mtime":1656680997581,"results":"471","hashOfConfig":"273"},{"size":3000,"mtime":1656680997738,"results":"472","hashOfConfig":"273"},{"size":1798,"mtime":1656680997719,"results":"473","hashOfConfig":"273"},{"size":2828,"mtime":1656680997737,"results":"474","hashOfConfig":"273"},{"size":632,"mtime":1656680997552,"results":"475","hashOfConfig":"273"},{"size":919,"mtime":1656680997515,"results":"476","hashOfConfig":"273"},{"size":1364,"mtime":1656680997513,"results":"477","hashOfConfig":"273"},{"size":1001,"mtime":1656680997514,"results":"478","hashOfConfig":"273"},{"size":612,"mtime":1656680997506,"results":"479","hashOfConfig":"273"},{"size":688,"mtime":1656680997499,"results":"480","hashOfConfig":"273"},{"size":981,"mtime":1656680997564,"results":"481","hashOfConfig":"273"},{"size":1898,"mtime":1656680997511,"results":"482","hashOfConfig":"273"},{"size":1566,"mtime":1656680997568,"results":"483","hashOfConfig":"273"},{"size":1875,"mtime":1656680997558,"results":"484","hashOfConfig":"273"},{"size":1169,"mtime":1656680997557,"results":"485","hashOfConfig":"273"},{"size":2016,"mtime":1656680997516,"results":"486","hashOfConfig":"273"},{"size":1414,"mtime":1656680997551,"results":"487","hashOfConfig":"273"},{"size":1025,"mtime":1656680997549,"results":"488","hashOfConfig":"273"},{"size":819,"mtime":1656680997550,"results":"489","hashOfConfig":"273"},{"size":902,"mtime":1656680997500,"results":"490","hashOfConfig":"273"},{"size":928,"mtime":1656680997501,"results":"491","hashOfConfig":"273"},{"size":1253,"mtime":1656680997561,"results":"492","hashOfConfig":"273"},{"size":757,"mtime":1656680997560,"results":"493","hashOfConfig":"273"},{"size":2391,"mtime":1656680997527,"results":"494","hashOfConfig":"273"},{"size":2908,"mtime":1656680997520,"results":"495","hashOfConfig":"273"},{"size":1223,"mtime":1656680997527,"results":"496","hashOfConfig":"273"},{"size":1618,"mtime":1656680997562,"results":"497","hashOfConfig":"273"},{"size":2655,"mtime":1656680997521,"results":"498","hashOfConfig":"273"},{"size":2410,"mtime":1656680997528,"results":"499","hashOfConfig":"273"},{"size":763,"mtime":1656680997523,"results":"500","hashOfConfig":"273"},{"size":1544,"mtime":1656680997524,"results":"501","hashOfConfig":"273"},{"size":1497,"mtime":1656680997525,"results":"502","hashOfConfig":"273"},{"size":1924,"mtime":1656680997525,"results":"503","hashOfConfig":"273"},{"size":1487,"mtime":1656680997563,"results":"504","hashOfConfig":"273"},{"size":1359,"mtime":1656680997521,"results":"505","hashOfConfig":"273"},{"size":787,"mtime":1656680997528,"results":"506","hashOfConfig":"273"},{"size":1537,"mtime":1656680997556,"results":"507","hashOfConfig":"273"},{"size":1864,"mtime":1656680997567,"results":"508","hashOfConfig":"273"},{"size":1053,"mtime":1656680997564,"results":"509","hashOfConfig":"273"},{"size":1021,"mtime":1656680997566,"results":"510","hashOfConfig":"273"},{"size":1024,"mtime":1656680997565,"results":"511","hashOfConfig":"273"},{"size":830,"mtime":1656680997508,"results":"512","hashOfConfig":"273"},{"size":997,"mtime":1656680997508,"results":"513","hashOfConfig":"273"},{"size":709,"mtime":1656680997554,"results":"514","hashOfConfig":"273"},{"size":949,"mtime":1656680997573,"results":"515","hashOfConfig":"273"},{"size":1328,"mtime":1656680997557,"results":"516","hashOfConfig":"273"},{"size":653,"mtime":1656680997554,"results":"517","hashOfConfig":"273"},{"size":801,"mtime":1656680997572,"results":"518","hashOfConfig":"273"},{"size":867,"mtime":1656680997570,"results":"519","hashOfConfig":"273"},{"size":1089,"mtime":1656680997569,"results":"520","hashOfConfig":"273"},{"size":4780,"mtime":1656680997498,"results":"521","hashOfConfig":"273"},{"size":1485,"mtime":1656680997493,"results":"522","hashOfConfig":"273"},{"size":892,"mtime":1656680997495,"results":"523","hashOfConfig":"273"},{"size":1169,"mtime":1656680997497,"results":"524","hashOfConfig":"273"},{"size":3370,"mtime":1656680997494,"results":"525","hashOfConfig":"273"},{"size":4381,"mtime":1656680997495,"results":"526","hashOfConfig":"273"},{"size":1411,"mtime":1656680997560,"results":"527","hashOfConfig":"273"},{"size":959,"mtime":1656680997516,"results":"528","hashOfConfig":"273"},{"size":1688,"mtime":1656680997567,"results":"529","hashOfConfig":"273"},{"size":1453,"mtime":1656680997509,"results":"530","hashOfConfig":"273"},{"size":1468,"mtime":1656680997555,"results":"531","hashOfConfig":"273"},{"size":1637,"mtime":1656680997502,"results":"532","hashOfConfig":"273"},{"size":658,"mtime":1656680997553,"results":"533","hashOfConfig":"273"},{"size":2050,"mtime":1656680997586,"results":"534","hashOfConfig":"273"},{"size":2374,"mtime":1656680997587,"results":"535","hashOfConfig":"273"},{"size":2177,"mtime":1656680997584,"results":"536","hashOfConfig":"273"},{"size":1506,"mtime":1656680997586,"results":"537","hashOfConfig":"273"},{"size":4191,"mtime":1656680997741,"results":"538","hashOfConfig":"273"},{"size":2192,"mtime":1656680997502,"results":"539","hashOfConfig":"273"},{"size":2065,"mtime":1656680997503,"results":"540","hashOfConfig":"273"},{"size":2389,"mtime":1656680997505,"results":"541","hashOfConfig":"273"},{"size":1521,"mtime":1656680997504,"results":"542","hashOfConfig":"273"},{"size":19136,"mtime":1656692398062,"results":"543","hashOfConfig":"273"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},"oommc9",{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"546"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"546"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"546"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"546"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"546"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"546"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"546"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"546"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"546"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"546"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"546"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"546"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"546"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"546"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"546"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"546"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"546"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"546"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"546"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740","usedDeprecatedRules":"546"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"546"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"814","usedDeprecatedRules":"546"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"841","usedDeprecatedRules":"546"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"968","messages":"969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1032","messages":"1033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1038","messages":"1039","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1042","messages":"1043","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1048","messages":"1049","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1050","messages":"1051","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1074","messages":"1075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1080","messages":"1081","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\index.js",[],["1110","1111","1112","1113","1114"],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\App.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\context\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\routes.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companysteps\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companiesProfile\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groupview\\index.js",["1115","1116","1117","1118"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const [namex, setName] = useState(\"\");\r\n  const [groupmembers, setGroupMember] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [usermembers, setUserMember] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    e.preventDefault();\r\n    setOpened(true);\r\n\r\n    const checks = e.target.checked;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    if (checks) {\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        groupID: apix.groupID,\r\n        empID: apix.empID,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      // const headers = miHeaders;\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/addMember`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/groups/removeMember/${orgIDs}/${apix.groupID}/${apix.empID}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          setOpened(false);\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    const permissionsList = [];\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUsers(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/getByIds/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setName(resultrs[0].group.name);\r\n              setGroupMember(resultrs[0].groupMembers);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((emp) => {\r\n              let check = false;\r\n              if (resultrs[0].groupMembers != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs[0].groupMembers.map((member) => {\r\n                  if (member.empID === emp.personal.id) {\r\n                    // if (rolPermi.isCheck === 1) {\r\n                    check = true;\r\n                    // }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                groupID: id,\r\n                empID: emp.personal.id,\r\n                fname: emp.personal.fname,\r\n                lname: emp.personal.lname,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(users);\r\n            console.log(groupmembers);\r\n            setUserMember(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {namex}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {usermembers.map((api) => (\r\n              <div key={api.empID} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>\r\n                    {api.fname} {api.lname}\r\n                  </Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\free-days\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userHistory\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\index.js",["1119","1120","1121"],"import MDBox from \"components/MDBox\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n// import DateRangePicker from \"react-dates\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TimeOffRequestData from \"layouts/timeoffRequests/timeOffRequestTable/timeOffRequests\";\r\n\r\nfunction TimeOff() {\r\n  const [purposex, setPurpose] = useState(\"\");\r\n  const [adminIdx, setAdminIdx] = useState(\"\");\r\n  const [duty, setDutyRelieverx] = useState(\"\");\r\n  const [titlex, setTitilex] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [resumptionDate, setresumptionDate] = useState(\"\");\r\n  const [approvex, setApprover] = useState(\"\");\r\n\r\n  const [user, setUser] = useState([]);\r\n  const [empSetup, setEmpSetup] = useState([]);\r\n  const [empSetupIdx, setEmpSetupId] = useState(\"\");\r\n  const { columns: pColumns, rows: pRows } = TimeOffRequestData();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_NSUTANA_URL}/employeetimeoffsetup/getAll/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setEmpSetup(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleAddEvent = (e) => {\r\n    const startCDate = new Date(startDate).getTime();\r\n    const endCDate = new Date(endDate).getTime();\r\n    const resumptionCDate = new Date(resumptionDate).getTime();\r\n    const CurTime = new Date().getTime();\r\n\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(\r\n      `${process.env.REACT_APP_NSUTANA_URL}/freedays/getBetween/${orgIDs}/${startCDate}/${endCDate}`\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n\r\n        const numberOfFreedays = result.length;\r\n        const startDateandendDate = endCDate - startCDate;\r\n        const varx = 24 * 60 * 60 * 1000;\r\n        const numofdays = Math.ceil(startDateandendDate / varx) - numberOfFreedays;\r\n\r\n        // const orgIDs = data11.orgID;\r\n        const currentholderID = data11.personalID;\r\n        let eTOTId = {};\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          empID: personalIds,\r\n          empSetupID: empSetupIdx,\r\n          noOfDaysRequested: numofdays,\r\n          startDate: startCDate,\r\n          endDate: endCDate,\r\n          resumptionDate: resumptionCDate,\r\n          dutyRelieverID: duty,\r\n          purpose: purposex,\r\n          approverID: approvex,\r\n          adminID: adminIdx,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        let check = 0;\r\n        if (startCDate < CurTime) {\r\n          check = 1;\r\n          MySwal.fire({\r\n            title: \"Invalid Date\",\r\n            type: \"error\",\r\n            text: \"Please Enter A Date From The Future\",\r\n          });\r\n        }\r\n        if (check === 0 && endCDate < startCDate) {\r\n          check = 1;\r\n          MySwal.fire({\r\n            title: \"Invalid Ending Date\",\r\n            type: \"error\",\r\n            text: \"Please Enter A Date From The Future\",\r\n          });\r\n        }\r\n        if (check === 0 && resumptionCDate < endCDate) {\r\n          check = 1;\r\n          MySwal.fire({\r\n            title: \"Invalid Resuming Date\",\r\n            type: \"error\",\r\n            text: \"Please Enter A Date From The Future\",\r\n          });\r\n        }\r\n\r\n        if (check === 0) {\r\n          fetch(\r\n            `${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/add`,\r\n            requestOptions\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resultx) => {\r\n              eTOTId = resultx;\r\n\r\n              if (resultx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resultx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resultx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n              MySwal.fire({\r\n                title: resultx.status,\r\n                type: \"success\",\r\n                text: resultx.message,\r\n              })\r\n                .then(() => {\r\n                  // const ids = data11.id;\r\n                  const raw2 = JSON.stringify({\r\n                    orgID: orgIDs,\r\n                    employeeTimeOffTransactionID: eTOTId.data.id,\r\n                    currentHolderID: currentholderID,\r\n                  });\r\n                  const requestOptions2 = {\r\n                    method: \"POST\",\r\n                    headers: myHeaders,\r\n                    body: raw2,\r\n                    redirect: \"follow\",\r\n                  };\r\n                  fetch(`${process.env.REACT_APP_NSUTANA_URL}/timeoffjourney/add`, requestOptions2)\r\n                    .then(async (res) => {\r\n                      const aToken = res.headers.get(\"token-1\");\r\n                      localStorage.setItem(\"rexxdex\", aToken);\r\n                      return res.json();\r\n                    })\r\n                    .then((resulty) => {\r\n                      if (resulty.message === \"Expired Access\") {\r\n                        navigate(\"/authentication/sign-in\");\r\n                      }\r\n                      if (resulty.message === \"Token Does Not Exist\") {\r\n                        navigate(\"/authentication/sign-in\");\r\n                      }\r\n                      if (resulty.message === \"Unauthorized Access\") {\r\n                        navigate(\"/authentication/forbiddenPage\");\r\n                      }\r\n                      console.log(resulty);\r\n                    });\r\n                  window.location.reload();\r\n                })\r\n                .catch((error) => {\r\n                  console.log({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            })\r\n            .catch((error) => {\r\n              MySwal.fire({\r\n                title: error.status,\r\n                type: \"error\",\r\n                text: error.message,\r\n              });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log({ error });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={0}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Time Off Requests\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"requested\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"starting\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"ending\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"resuming\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"purpose\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"title\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDBox mt={2}>\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        value={titlex || \"\"}\r\n                        onChange={(e) => setTitilex(e.target.value)}\r\n                        label=\"Title\"\r\n                        variant=\"standard\"\r\n                        style={{ width: \"100%\" }}\r\n                      />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-5\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        Start Date\r\n                      </MDTypography>\r\n                      <DatePicker\r\n                        placeholderText=\"Start Date\"\r\n                        style={{ marginRight: \"10px\" }}\r\n                        selected={startDate}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(start) => setStartDate(start)}\r\n                      />\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-2\" />\r\n                  <div className=\"col-sm-5\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        End Date\r\n                      </MDTypography>\r\n                      <DatePicker\r\n                        placeholderText=\"End Date\"\r\n                        selected={endDate}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(end) => setEndDate(end)}\r\n                      />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-5\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        Resumption Date\r\n                      </MDTypography>\r\n                      <DatePicker\r\n                        placeholderText=\"Resumption Date\"\r\n                        style={{ marginRight: \"10px\" }}\r\n                        selected={resumptionDate}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(resumptiondate) => setresumptionDate(resumptiondate)}\r\n                      />{\" \"}\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-2\" />\r\n                  <div className=\"col-sm-5\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        Time Off Category\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        onChange={(e) => setEmpSetupId(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Timeoff Category</option>\r\n                        {empSetup.map((api) => (\r\n                          <option key={api.setup.id} value={api.setup.id}>\r\n                            {api.timeOffTypeCondition.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        Duty Reliever\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        value={duty}\r\n                        onChange={(e) => setDutyRelieverx(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Duty Reliever</option>\r\n                        {user.map((api) => (\r\n                          <option key={api.personal.id} value={api.personal.id}>\r\n                            {api.personal.fname} {api.personal.lname}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"left\"\r\n                        color=\"text\"\r\n                      >\r\n                        Select Admin\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        value={adminIdx || \"\"}\r\n                        onChange={(e) => setAdminIdx(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Admin</option>\r\n                        {user.map((api) => (\r\n                          <option key={api.personal.id} value={api.personal.id}>\r\n                            {api.personal.fname} {api.personal.lname}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"col-sm-6\">\r\n                  <MDBox mt={2}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Select Approver\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      value={approvex || \"\"}\r\n                      onChange={(e) => setApprover(e.target.value)}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option value=\"\">Select Approver</option>\r\n                      {user.map((api) => (\r\n                        <option key={api.personal.id} value={api.personal.id}>\r\n                          {api.personal.fname} {api.personal.lname}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                    <br />\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDBox mt={2}>\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        value={purposex || \"\"}\r\n                        onChange={(e) => setPurpose(e.target.value)}\r\n                        label=\"Purpose\"\r\n                        variant=\"standard\"\r\n                        style={{ width: \"100%\" }}\r\n                      />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={2} mb={2}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleAddEvent}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Add Event\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: pRows }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default TimeOff;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\addDetailsToTimeOffType\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\checklists\\index.js",["1122","1123","1124"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [rolName, setRolName] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [vPermissions, setVPermissions] = useState([]);\r\n  const [roleStep, setRoleStep] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n  const orgIDs = data11.orgID;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    let isChecked = 0;\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      isChecked = 1;\r\n    }\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      roleID: id,\r\n      stepID: apix.id,\r\n      isCheck: isChecked,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    // const headers = miHeaders;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/save`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/role/get/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultg) => {\r\n        // setOpened(false);\r\n        if (resultg.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setRolName(resultg[0].name);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const permissionsList = [];\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/step/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setPermissions(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n        fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/getsRoleSteps/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setRoleStep(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((permission) => {\r\n              let check = false;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((rolPermi) => {\r\n                  if (rolPermi.stepID === permission.id) {\r\n                    if (rolPermi.isCheck === 1) {\r\n                      check = true;\r\n                    }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: permission.id,\r\n                name: permission.name,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(permissions);\r\n            console.log(roleStep);\r\n            console.log(permissionsList);\r\n            setVPermissions(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {rolName}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDTypography\r\n          variant=\"h4\"\r\n          textAlign=\"left\"\r\n          fontWeight=\"medium\"\r\n          color=\"secondary\"\r\n          mx={4}\r\n          mt={2}\r\n        >\r\n          Steps\r\n        </MDTypography>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {vPermissions.map((api) => (\r\n              <div key={api.id} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>{api.name}</Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\index.js",["1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\n\r\nfunction SalaryPayment() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const animatedComponents = makeAnimated();\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [sUser, setSUser] = useState([]);\r\n  const [aUser, setAUser] = useState([]);\r\n\r\n  const [allUserID, setAllUserID] = useState([]);\r\n  const [usersID, setUsersID] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const userMap = [];\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            const fdy = {\r\n              value: item.personal.id,\r\n              label: `${item.personal.fname} ${item.personal.lname}`,\r\n            };\r\n            console.log(fdy);\r\n            userMap.push(fdy);\r\n          });\r\n          setAUser(userMap);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const userMap = [];\r\n  //   setOpened(true);\r\n  //   const headers = miHeaders;\r\n  //   const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n  //   const orgIDs = data11.orgID;\r\n\r\n  //   let isMounted = true;\r\n  //   fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/gets/${orgIDs}`, { headers })\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((result) => {\r\n  //       setOpened(false);\r\n  //       if (result.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (isMounted) {\r\n  //         console.log(result);\r\n  //         // eslint-disable-next-line array-callback-return\r\n  //         result.map((item) => {\r\n  //           const fdy = {\r\n  //             value: item.remuneration.id,\r\n  //             label: item.empName,\r\n  //           };\r\n  //           console.log(fdy);\r\n  //           userMap.push(fdy);\r\n  //         });\r\n  //         setSUser(userMap);\r\n  //       }\r\n  //     });\r\n  //   return () => {\r\n  //     isMounted = false;\r\n  //   };\r\n  // }, []);\r\n\r\n  // Method to fetch all departments\r\n  // env.environments\r\n  const handleGets = () => {\r\n    setOpened(true);\r\n    const userMap = [];\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        console.log(result);\r\n        setOpened(false);\r\n        setItems(result);\r\n        // eslint-disable-next-line array-callback-return\r\n        result.map((item) => {\r\n          const fdy = {\r\n            value: item.remuneration.id,\r\n            label: item.empName,\r\n          };\r\n          console.log(fdy);\r\n          userMap.push(fdy);\r\n        });\r\n        setSUser(userMap);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const personalIDs = data11.personalID;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      ids: allUserID,\r\n      generatedBy: personalIDs,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/create`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n        // fetches the table data\r\n        handleGets();\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAllCal = (e) => {\r\n    e.preventDefault();\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const personalIDs = data11.personalID;\r\n\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultS) => {\r\n        if (resultS.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultS.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultS.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        const userIDsMap = [];\r\n        // eslint-disable-next-line array-callback-return\r\n        resultS.map((item) => {\r\n          const fdy = item.remuneration.id;\r\n          console.log(fdy);\r\n          userIDsMap.push(fdy);\r\n        });\r\n        console.log(userIDsMap);\r\n\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          ids: userIDsMap,\r\n          generatedBy: personalIDs,\r\n        });\r\n        console.log(raw);\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/create`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((result) => {\r\n            console.log(result);\r\n            setOpened(false);\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n              window.location.reload();\r\n            }\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            });\r\n            // fetches the table data\r\n            handleGets();\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      });\r\n  };\r\n\r\n  // Method to handle diable\r\n  const handleTerminate = (value) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const personalIDs = data11.personalID;\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        const requestOptions = {\r\n          method: \"DELETE\",\r\n          headers: miHeaders,\r\n        };\r\n\r\n        fetch(\r\n          `${process.env.REACT_APP_TANTA_URL}/payroll/terminate/${personalIDs}/${value}`,\r\n          requestOptions\r\n        )\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resx) => {\r\n            if (resx.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            MySwal.fire({\r\n              title: resx.status,\r\n              type: \"success\",\r\n              text: resx.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Method to change type\r\n  const changeType = (status) => {\r\n    if (status === 1) {\r\n      return \"Initiated\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (status === 2) {\r\n      return \"Paid\";\r\n    } else if (status === 3) {\r\n      return \"Payment Error\";\r\n    } else {\r\n      return \"Created\";\r\n    }\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDateandTime = (timestamp) => {\r\n    if (timestamp === 0) {\r\n      return \"No Date\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else {\r\n      const date = new Date(timestamp);\r\n      const retDate = date.toDateString();\r\n      let hour = \"0\";\r\n      let minutes = \"0\";\r\n      let seconds = \"0\";\r\n\r\n      if (date.getHours() < 10) {\r\n        hour += date.getHours();\r\n      } else {\r\n        hour = date.getHours();\r\n      }\r\n\r\n      if (date.getMinutes() < 10) {\r\n        minutes += date.getMinutes();\r\n      } else {\r\n        minutes = date.getMinutes();\r\n      }\r\n\r\n      if (date.getSeconds() < 10) {\r\n        seconds += date.getSeconds();\r\n      } else {\r\n        seconds = date.getSeconds();\r\n      }\r\n      return `${retDate} ${hour}:${minutes}:${seconds}`;\r\n    }\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Employee's Name\", accessor: \"empName\", align: \"left\" },\r\n    { Header: \"Amount (NGN)\", accessor: \"remuneration.amount\", align: \"left\" },\r\n    { Header: \"Updated Amount (NGN)\", accessor: \"payroll.amount\", align: \"left\" },\r\n    { Header: \"Generated By\", accessor: \"payroll.generatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Payment Status\",\r\n      accessor: \"payroll.paymentStatus\",\r\n      Cell: ({ cell: { value } }) => changeType(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Last Retried By\", accessor: \"payroll.lastRetryByName\", align: \"left\" },\r\n    { Header: \"Retried Times\", accessor: \"payroll.retryTimes\", align: \"left\" },\r\n    {\r\n      Header: \"Last Retried Time\",\r\n      accessor: \"payroll.lastRetryTime\",\r\n      Cell: ({ cell: { value } }) => changeDateandTime(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Terminated By\", accessor: \"payroll.terminatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Terminated Time\",\r\n      accessor: \"payroll.terminatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDateandTime(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"payroll.id\",\r\n      // eslint-disable-next-line react/prop-types\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleTerminate(value)}>Terminate</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"left\",\r\n    },\r\n  ];\r\n\r\n  const handleOnSelect = (select) => {\r\n    const userIDs = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    select.map((item) => {\r\n      const fdy = item.value;\r\n      console.log(fdy);\r\n      userIDs.push(fdy);\r\n    });\r\n    setAllUserID(userIDs);\r\n    console.log(select);\r\n    console.log(userIDs);\r\n  };\r\n\r\n  const handleAllSelect = (select) => {\r\n    const userIDs = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    select.map((item) => {\r\n      const fdy = item.value;\r\n      console.log(fdy);\r\n      userIDs.push(fdy);\r\n    });\r\n    setUsersID(userIDs);\r\n    console.log(select);\r\n    console.log(userIDs);\r\n  };\r\n\r\n  const handleInitiatePay = (e) => {\r\n    if (namex === \"\") {\r\n      MySwal.fire({\r\n        title: \"EMPTY_TITLE\",\r\n        type: \"error\",\r\n        text: \"Please input a title\",\r\n      });\r\n    } else {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n      const orgIDs = data11.orgID;\r\n      const personalIDs = data11.personalID;\r\n\r\n      const userMap = [];\r\n      // eslint-disable-next-line array-callback-return\r\n      items.map((item) => {\r\n        if (item.payroll !== null) {\r\n          if (item.bankAccount !== null) {\r\n            const fdy = {\r\n              payrollID: item.payroll.id,\r\n              destinationBankCode: item.bankAccount.bankCode,\r\n              destinationAccountNumber: item.bankAccount.acctNo,\r\n            };\r\n            console.log(fdy);\r\n            userMap.push(fdy);\r\n          }\r\n        }\r\n      });\r\n      console.log(userMap);\r\n\r\n      const raw = JSON.stringify({\r\n        paymentList: userMap,\r\n        orgID: orgIDs,\r\n        title: namex,\r\n        narration: descripx,\r\n        by: personalIDs,\r\n      });\r\n      console.log(raw);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      fetch(\r\n        `${process.env.REACT_APP_TANTA_URL}/payroll/initiateSalaryPayment/${personalIDs}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            window.location.reload();\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleRetryPayment = (e) => {\r\n    if (namex === \"\") {\r\n      MySwal.fire({\r\n        title: \"EMPTY_TITLE\",\r\n        type: \"error\",\r\n        text: \"Please input a title\",\r\n      });\r\n    } else {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n      const orgIDs = data11.orgID;\r\n      const personalIDs = data11.personalID;\r\n\r\n      const userMap = [];\r\n      // eslint-disable-next-line array-callback-return\r\n      items.map((item) => {\r\n        // eslint-disable-next-line array-callback-return\r\n        usersID.map((ids) => {\r\n          if (item.payroll !== null) {\r\n            if (item.bankAccount !== null) {\r\n              if (ids === item.payroll.empID) {\r\n                const fdy = {\r\n                  payrollID: item.payroll.id,\r\n                  destinationBankCode: item.bankAccount.bankCode,\r\n                  destinationAccountNumber: item.bankAccount.acctNo,\r\n                };\r\n                console.log(fdy);\r\n                userMap.push(fdy);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n      console.log(userMap);\r\n\r\n      const raw = JSON.stringify({\r\n        paymentList: userMap,\r\n        orgID: orgIDs,\r\n        title: namex,\r\n        narration: descripx,\r\n        by: personalIDs,\r\n      });\r\n      console.log(raw);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/retrySalaryPayment`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            window.location.reload();\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Container>\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Calculate Bonus and Deduction\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Select User\r\n                          </MDTypography>\r\n                          <Select\r\n                            closeMenuOnSelect\r\n                            components={animatedComponents}\r\n                            onChange={handleOnSelect}\r\n                            isMulti\r\n                            options={sUser}\r\n                          />\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox\r\n                      variant=\"gradient\"\r\n                      bgColor=\"white\"\r\n                      borderRadius=\"lg\"\r\n                      coloredShadow=\"info\"\r\n                      mx={-20}\r\n                      mt={3}\r\n                      p={2}\r\n                      mb={1}\r\n                      textAlign=\"center\"\r\n                    >\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleClick}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          ml={10}\r\n                        >\r\n                          Calculate Selected Users\r\n                        </MDButton>\r\n                        <MDButton variant=\"text\" size=\"small\" color=\"info\" width=\"50%\">\r\n                          OR\r\n                        </MDButton>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleAllCal}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                        >\r\n                          calculate All Users\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Initiate Payment\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <MDInput\r\n                  type=\"text\"\r\n                  label=\"Title *\"\r\n                  value={namex || \"\"}\r\n                  className=\"form-control\"\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  variant=\"standard\"\r\n                  fullWidth\r\n                />\r\n              </MDBox>\r\n              <MDBox mb={2}>\r\n                <MDInput\r\n                  type=\"text\"\r\n                  value={descripx || \"\"}\r\n                  onChange={(e) => setDescrip(e.target.value)}\r\n                  label=\"Narration\"\r\n                  variant=\"standard\"\r\n                  fullWidth\r\n                />\r\n              </MDBox>\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleInitiatePay}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                      >\r\n                        Initiate\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Retry Payment\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <MDBox mb={0}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Title *\"\r\n                          value={namex || \"\"}\r\n                          className=\"form-control\"\r\n                          onChange={(e) => setName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          value={descripx || \"\"}\r\n                          onChange={(e) => setDescrip(e.target.value)}\r\n                          label=\"Narration\"\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Select User\r\n                          </MDTypography>\r\n                          <Select\r\n                            closeMenuOnSelect\r\n                            components={animatedComponents}\r\n                            onChange={handleAllSelect}\r\n                            isMulti\r\n                            options={aUser}\r\n                          />\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox mb={2}>\r\n                      <Container>\r\n                        <div align=\"center\">\r\n                          <MDBox mt={4} mb={1}>\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              onClick={handleRetryPayment}\r\n                              color=\"info\"\r\n                              width=\"50%\"\r\n                            >\r\n                              <span className=\"material-icons\">refresh</span> &nbsp; Retry\r\n                            </MDButton>\r\n                          </MDBox>\r\n                        </div>\r\n                      </Container>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      </Container>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default SalaryPayment;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userProfile\\index.js",["1146","1147","1148","1149","1150"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form, Dropdown } from \"react-bootstrap\";\r\n// import Icon from \"@mui/material/Icon\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport NCountry from \"nigeria\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nfunction UserProfile() {\r\n  const { nCountries: WCountries } = NCountry();\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [showProf, setShowProf] = useState(false);\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [allBanks, setAllBanks] = useState([]);\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [deleteFlagx, setDeleteFlag] = useState(\"\");\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const [nkIDx, setNkID] = useState(\"\");\r\n  const [nkFnamex, setNkFname] = useState(\"\");\r\n  const [nkLnamex, setNkLname] = useState(\"\");\r\n  const [nkOnamex, setNkOname] = useState(\"\");\r\n  const [nkEmailx, setNKEmail] = useState(\"\");\r\n  const [nkPhonex, setNkPhone] = useState(\"\");\r\n  const [nkTitlex, setNkTitle] = useState(\"\");\r\n  const [nkResidentialStreetx, setNkResidentialStreet] = useState(\"\");\r\n  const [nkResidentialCityx, setNkResidentialCity] = useState(\"\");\r\n  const [nkResidentialStatex, setNkResidentialState] = useState(\"\");\r\n  const [nkResidentialCountryx, setNkResidentialCountry] = useState(\"\");\r\n  const [nkOccupationx, setNkOccupation] = useState(\"\");\r\n  const [nkDeleteFlagx, setNkDeleteFlag] = useState(\"\");\r\n  const [nkCreatedTimex, setNkCreatedTime] = useState(\"\");\r\n\r\n  const [baIDx, setBaID] = useState(\"\");\r\n  const [baBankx, setBaBank] = useState(\"\");\r\n  const [baCountryx, setBaCountry] = useState(\"\");\r\n  const [baAcctNox, setBaAcctNo] = useState(\"\");\r\n  const [baAcctNamex, setBaAcctName] = useState(\"\");\r\n  const [baBankCodex, setBaBankCode] = useState(\"\");\r\n  const [baDeleteFlagx, setBaDeleteFlag] = useState(\"\");\r\n  const [baCreatedTimex, setBaCreatedTime] = useState(\"\");\r\n\r\n  const [maIDx, setMaID] = useState(\"\");\r\n  const [maNoOfSpousesx, setMaNoOfSpouses] = useState(\"\");\r\n  const [maNoOfChildrenx, setMaNoOfChildren] = useState(\"\");\r\n  const [maDeleteFlagx, setMaDeleteFlag] = useState(\"\");\r\n  const [maCreatedTimex, setMaCreatedTime] = useState(\"\");\r\n\r\n  const [meIDx, setMeID] = useState(\"\");\r\n  const [meBloodGroupx, setMeBloodGroup] = useState(\"\");\r\n  const [meGenotypex, setMeGenotype] = useState(\"\");\r\n  const [meDeleteFlagx, setMeDeleteFlag] = useState(\"\");\r\n  const [meCreatedTimex, setMeCreatedTime] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultp) => {\r\n        setOpened(false);\r\n        if (resultp.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setFname(resultp[0].fname);\r\n          setLname(resultp[0].lname);\r\n          setOname(resultp[0].oname);\r\n          setEmail(resultp[0].email);\r\n          setPhone(resultp[0].pno);\r\n          //   setDayOfBirth(resultp[0].dayOfBirth);\r\n          //   setMonthOfBirth(resultp[0].monthOfBirth);\r\n          //   setYearOfBirth(resultp[0].yearOfBirth);\r\n          const filteredItems = AlCountry.filter(\r\n            (item) => item.name === resultp[0].residentialCountry\r\n          );\r\n          setAllStates(filteredItems[0].states);\r\n          setNationality(resultp[0].nationality);\r\n          setResidentialStreet(resultp[0].residentialStreet);\r\n          setResidentialCity(resultp[0].residentialCity);\r\n          setResidentialState(resultp[0].residentialState);\r\n          setResidentialCountry(resultp[0].residentialCountry);\r\n          setMaritalStatus(resultp[0].maritalStatus);\r\n          setDeleteFlag(resultp[0].deleteFlag);\r\n          setSysStatus(resultp[0].sysStatus);\r\n          setCreatedTime(resultp[0].createdTime);\r\n\r\n          setStartDate(\r\n            new Date(\r\n              `${resultp[0].monthOfBirth}/${resultp[0].dayOfBirth}/${resultp[0].yearOfBirth}`\r\n            )\r\n          );\r\n          setShowProf(true);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultnk) => {\r\n        setOpened(false);\r\n        if (resultnk.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultnk.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultnk.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultnk.length != 0) {\r\n            setNkID(resultnk[0].id);\r\n            setNkFname(resultnk[0].fname);\r\n            setNkLname(resultnk[0].lname);\r\n            setNkOname(resultnk[0].oname);\r\n            setNKEmail(resultnk[0].email);\r\n            setNkPhone(resultnk[0].pno);\r\n            setNkTitle(resultnk[0].title);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === resultnk[0].residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setNkResidentialStreet(resultnk[0].residentialStreet);\r\n            setNkResidentialCity(resultnk[0].residentialCity);\r\n            setNkResidentialState(resultnk[0].residentialState);\r\n            setNkResidentialCountry(resultnk[0].residentialCountry);\r\n            setNkOccupation(resultnk[0].occupation);\r\n            setNkDeleteFlag(resultnk[0].deleteFlag);\r\n            setNkCreatedTime(resultnk[0].createdTime);\r\n          } else {\r\n            setNkID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/getForEmployee/${personalIds}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultba) => {\r\n        setOpened(false);\r\n        if (resultba.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultba.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultba.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultba.length != 0) {\r\n            setBaID(resultba[0].id);\r\n            setBaBank(resultba[0].bank);\r\n            setBaCountry(resultba[0].country);\r\n            setBaAcctNo(resultba[0].acctNo);\r\n            setBaAcctName(resultba[0].acctName);\r\n            setBaBankCode(resultba[0].bankCode);\r\n            setBaDeleteFlag(resultba[0].deleteFlag);\r\n            setBaCreatedTime(resultba[0].createdTime);\r\n          } else {\r\n            setBaID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultma) => {\r\n        setOpened(false);\r\n        if (resultma.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultma.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultma.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultma.length != 0) {\r\n            setMaID(resultma[0].id);\r\n            setMaNoOfSpouses(resultma[0].noOfSpouses);\r\n            setMaNoOfChildren(resultma[0].noOfChildren);\r\n            setMaDeleteFlag(resultma[0].deleteFlag);\r\n            setMaCreatedTime(resultma[0].createdTime);\r\n          } else {\r\n            setMaID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultme) => {\r\n        setOpened(false);\r\n        if (resultme.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultme.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultme.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultme.length != 0) {\r\n            setMeID(resultme[0].id);\r\n            setMeBloodGroup(resultme[0].bloodGroup);\r\n            setMeGenotype(resultme[0].genotype);\r\n            setMeDeleteFlag(resultme[0].deleteFlag);\r\n            setMeCreatedTime(resultme[0].createdTime);\r\n          } else {\r\n            setMeID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/getBanks`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setAllBanks(result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIDs = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_TANTA_URL}/payroll/getEmpPayrollHistory/${orgIDs}/${personalIDs}`,\r\n      {\r\n        headers,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setItems(result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleGenReceipt = (value) => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/generatePaySlip/${paymentHisValue}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    if (timestamp === 0) {\r\n      return \"No Date\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else {\r\n      const date = new Date(timestamp);\r\n      const retDate = date.toDateString();\r\n      return retDate;\r\n    }\r\n  };\r\n\r\n  // Method to change type\r\n  const changeType = (status) => {\r\n    if (status === 1) {\r\n      return \"Initiated\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (status === 2) {\r\n      return \"Paid\";\r\n    } else if (status === 3) {\r\n      return \"Payment Error\";\r\n    } else {\r\n      return \"Created\";\r\n    }\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Employee's Name\", accessor: \"empName\", align: \"left\" },\r\n    { Header: \"Amount (NGN)\", accessor: \"remuneration.amount\", align: \"left\" },\r\n    { Header: \"Updated Amount (NGN)\", accessor: \"payroll.amount\", align: \"left\" },\r\n    { Header: \"Generated By\", accessor: \"payroll.generatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Payment Status\",\r\n      accessor: \"payroll.paymentStatus\",\r\n      Cell: ({ cell: { value } }) => changeType(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Last Retried By\", accessor: \"payroll.lastRetryByName\", align: \"left\" },\r\n    { Header: \"Retried Times\", accessor: \"payroll.retryTimes\", align: \"left\" },\r\n    {\r\n      Header: \"Last Retried Time\",\r\n      accessor: \"payroll.lastRetryTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Terminated By\", accessor: \"payroll.terminatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Terminated Time\",\r\n      accessor: \"payroll.terminatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"payroll.id\",\r\n      // eslint-disable-next-line react/prop-types\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate != null) {\r\n      dayx = startDate.getDate();\r\n      monthx = startDate.getMonth() + 1;\r\n      yearx = startDate.getFullYear();\r\n    }\r\n\r\n    const raw = JSON.stringify({\r\n      id: personalIds,\r\n      fname: fnamex,\r\n      lname: lnamex,\r\n      oname: onamex,\r\n      email: emailx,\r\n      pno: phonex,\r\n      nationality: nationalityx,\r\n      residentialStreet: residentialStreetx,\r\n      residentialCity: residentialCityx,\r\n      residentialState: residentialStatex,\r\n      residentialCountry: residentialCountryx,\r\n      dayOfBirth: dayx,\r\n      monthOfBirth: monthx,\r\n      yearOfBirth: yearx,\r\n      maritalStatus: maritalStatusx,\r\n      sysStatus: sysStatusx,\r\n      deleteFlag: deleteFlagx,\r\n      createdTime: createdTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddNOK = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      fname: nkFnamex,\r\n      lname: nkLnamex,\r\n      oname: nkOnamex,\r\n      email: nkEmailx,\r\n      pno: nkPhonex,\r\n      title: nkTitlex,\r\n      residentialStreet: nkResidentialStreetx,\r\n      residentialCity: nkResidentialCityx,\r\n      residentialState: nkResidentialStatex,\r\n      residentialCountry: nkResidentialCountryx,\r\n      occupation: nkOccupationx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddBA = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bank: baBankx,\r\n      country: baCountryx,\r\n      acctNo: baAcctNox,\r\n      acctName: baAcctNamex,\r\n      bankCode: baBankCodex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddMA = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      noOfSpouses: maNoOfSpousesx,\r\n      noOfChildren: maNoOfChildrenx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddME = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bloodGroup: meBloodGroupx,\r\n      genotype: meGenotypex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleNKUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: nkIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      fname: nkFnamex,\r\n      lname: nkLnamex,\r\n      oname: nkOnamex,\r\n      email: nkEmailx,\r\n      pno: nkPhonex,\r\n      title: nkTitlex,\r\n      residentialStreet: nkResidentialStreetx,\r\n      residentialCity: nkResidentialCityx,\r\n      residentialState: nkResidentialStatex,\r\n      residentialCountry: nkResidentialCountryx,\r\n      occupation: nkOccupationx,\r\n      deleteFlag: nkDeleteFlagx,\r\n      createdTime: nkCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n  const handleBAUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: baIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bank: baBankx,\r\n      country: baCountryx,\r\n      acctNo: baAcctNox,\r\n      acctName: baAcctNamex,\r\n      bankCode: baBankCodex,\r\n      deleteFlag: baDeleteFlagx,\r\n      createdTime: baCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    console.log(raw);\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleMAUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: maIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      noOfSpouses: maNoOfSpousesx,\r\n      noOfChildren: maNoOfChildrenx,\r\n      deleteFlag: maDeleteFlagx,\r\n      createdTime: maCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleMEUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: meIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bloodGroup: meBloodGroupx,\r\n      genotype: meGenotypex,\r\n      deleteFlag: meDeleteFlagx,\r\n      createdTime: meCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleNKAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (nkIDx == null) {\r\n      handleAddNOK(e);\r\n    } else {\r\n      handleNKUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleBAAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (baIDx == null) {\r\n      handleAddBA(e);\r\n    } else {\r\n      handleBAUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleMAAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (maIDx == null) {\r\n      handleAddMA(e);\r\n    } else {\r\n      handleMAUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleMEAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (meIDx == null) {\r\n      handleAddME(e);\r\n    } else {\r\n      handleMEUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleOnChangeBank = (e) => {\r\n    const filteredItems = allBanks.filter((item) => item.name === e.target.value);\r\n    if (e.target.value === \"1\") {\r\n      setBaBank(\"\");\r\n      setBaBankCode(\"\");\r\n    } else {\r\n      setBaBank(e.target.value);\r\n      setBaBankCode(filteredItems[0].code);\r\n    }\r\n  };\r\n\r\n  const handleOnChangeBaCountry = (e) => {\r\n    setBaCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNKCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setNkResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNKState = (e) => {\r\n    setNkResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 .,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - . , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkFnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkFnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML = \"\";\r\n    }\r\n    if (nkFnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkLnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkLnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML = \"\";\r\n    }\r\n    if (nkLnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkOnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkOnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML = \"\";\r\n    }\r\n    if (nkOnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!nkEmailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (nkEmailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"\";\r\n    }\r\n    if (nkEmailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"Email is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 .,-]+$/;\r\n    if (!nkResidentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"Street - use only [ - . , ] as symbols<br>\";\r\n    }\r\n    if (nkResidentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"\";\r\n    }\r\n    if (nkResidentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkResidentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML =\r\n        \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (nkResidentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML = \"\";\r\n    }\r\n    if (nkResidentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKOccupationKeys = () => {\r\n    const vOccupation = /^[a-zA-Z ]+$/;\r\n    if (!nkOccupationx.match(vOccupation)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML =\r\n        \"Occupation - input only capital and small letters\";\r\n    }\r\n    if (nkOccupationx.match(vOccupation)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML = \"\";\r\n    }\r\n    if (nkOccupationx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML = \"Occupation is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnBAAccNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!baAcctNamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML =\r\n        \"Account Name - input only capital and small letters<br>\";\r\n    }\r\n    if (baAcctNamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML = \"\";\r\n    }\r\n    if (baAcctNamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML = \"Account Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnBAAccNoKeys = () => {\r\n    const numbers = /^[0-9A-Z]{8,}/;\r\n    if (!baAcctNox.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML =\r\n        \"Account Number - input a valid account number<br>\";\r\n    }\r\n    if (baAcctNox.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML = \"\";\r\n    }\r\n    if (baAcctNox.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML = \"Account Number is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnMASpouseKeys = () => {\r\n    const numbers = /^[0-9]+$/;\r\n    if (!maNoOfSpousesx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"Spouses - input only numbers<br>\";\r\n    }\r\n    if (maNoOfSpousesx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"\";\r\n    }\r\n    if (maNoOfSpousesx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"Spouses - This is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnMAChildrenKeys = () => {\r\n    const numbers = /^[0-9]+$/;\r\n    if (!maNoOfChildrenx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"Children - input only numbers<br>\";\r\n    }\r\n    if (maNoOfChildrenx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"\";\r\n    }\r\n    if (maNoOfChildrenx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"Children - This is required<br>\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-1\" />\r\n        <div className=\"col-sm-4\">\r\n          {showProf ? (\r\n            <Card>\r\n              <div align=\"center\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"sm\"\r\n                  coloredShadow=\"info\"\r\n                  mt={2}\r\n                  mx={0}\r\n                  p={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    fontFamily=\"Helvetica\"\r\n                    fontSize=\"120%\"\r\n                    color=\"white\"\r\n                  >\r\n                    {fnamex} {onamex} {lnamex}\r\n                  </MDTypography>\r\n                </MDBox>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h7\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Century Gothic\"\r\n                  fontSize=\"70%\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {emailx}\r\n                </MDTypography>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h5\"\r\n                  fontWeight=\"light\"\r\n                  fontSize=\"70%\"\r\n                  fontFamily=\"Helvetica\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {phonex}\r\n                </MDTypography>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Helvetica\"\r\n                  fontSize=\"80%\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {residentialStreetx}&#44; {residentialCityx}&#44; {residentialStatex}\r\n                </MDTypography>\r\n\r\n                <MDTypography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Helvetica\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                  mb={5}\r\n                >\r\n                  {residentialCountryx}\r\n                </MDTypography>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <MDBox />\r\n          )}\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Next Of Kin\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkfirst\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nklast\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkother\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkemail\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkphone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkstreet\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkcity\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkoccupation\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"First Name\"\r\n                          onKeyUp={handleOnNKFirstKeys}\r\n                          value={nkFnamex || \"\"}\r\n                          onChange={(e) => setNkFname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Last Name\"\r\n                          value={nkLnamex || \"\"}\r\n                          onKeyUp={handleOnNKLastKeys}\r\n                          onChange={(e) => setNkLname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Other Name\"\r\n                          value={nkOnamex || \"\"}\r\n                          onKeyUp={handleOnNKOtherKeys}\r\n                          onChange={(e) => setNkOname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Email\"\r\n                          value={nkEmailx || \"\"}\r\n                          onKeyUp={handleOnNKEmailKeys}\r\n                          onChange={(e) => setNKEmail(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Phone Number\r\n                        </MDTypography>\r\n                        <PhoneInput\r\n                          value={nkPhonex}\r\n                          inputStyle={{ width: \"170%\" }}\r\n                          buttonStyle={{}}\r\n                          onChange={setNkPhone}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mb={2}>\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Title\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          onChange={(e) => setNkTitle(e.target.value)}\r\n                          value={nkTitlex || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Select Title---</option>\r\n                          <option value=\"Mr\">Mr</option>\r\n                          <option value=\"Mrs\">Mrs</option>\r\n                          <option value=\"Miss\">Miss</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Street\"\r\n                          value={nkResidentialStreetx || \"\"}\r\n                          onKeyUp={handleOnNKStreetKeys}\r\n                          onChange={(e) => setNkResidentialStreet(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          value={nkResidentialCityx || \"\"}\r\n                          onKeyUp={handleOnNKCityKeys}\r\n                          onChange={(e) => setNkResidentialCity(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nkResidentialCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNKCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          State\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nkResidentialStatex}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNKState}\r\n                          >\r\n                            <option>--Select State--</option>\r\n                            {allStates.map((apis) => (\r\n                              <option key={apis.code} value={apis.name}>\r\n                                {apis.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDBox mb={2}>\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Occupation\"\r\n                          value={nkOccupationx || \"\"}\r\n                          onKeyUp={handleOnNKOccupationKeys}\r\n                          onChange={(e) => setNkOccupation(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleNKAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Marital\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"maspouse\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"machildren\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-10\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Number Of Spouses\"\r\n                          value={maNoOfSpousesx || \"\"}\r\n                          onKeyUp={handleOnMASpouseKeys}\r\n                          onChange={(e) => setMaNoOfSpouses(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-10\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Number Of Children\"\r\n                          value={maNoOfChildrenx || \"\"}\r\n                          onKeyUp={handleOnMAChildrenKeys}\r\n                          onChange={(e) => setMaNoOfChildren(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleMAAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n        &nbsp;\r\n        <div className=\"col-sm-6\">\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    BASIC INFO\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"First Name\"\r\n                          value={fnamex || \"\"}\r\n                          onKeyUp={handleOnFirstKeys}\r\n                          onChange={(e) => setFname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Last Name\"\r\n                          value={lnamex || \"\"}\r\n                          onKeyUp={handleOnLastKeys}\r\n                          onChange={(e) => setLname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Other Name\"\r\n                          value={onamex || \"\"}\r\n                          onKeyUp={handleOnOtherKeys}\r\n                          onChange={(e) => setOname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Personal Email\"\r\n                          disabled\r\n                          value={emailx || \"\"}\r\n                          onKeyUp={handleOnPEmailKeys}\r\n                          onChange={(e) => setEmail(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Phone Number\r\n                        </MDTypography>\r\n                        <PhoneInput\r\n                          value={phonex}\r\n                          inputStyle={{ width: \"100%\" }}\r\n                          buttonStyle={{}}\r\n                          onChange={setPhone}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Marital Status\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMaritalStatus(e.target.value)}\r\n                          value={maritalStatusx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Marital Status---</option>\r\n                          <option value=\"Single\">Single</option>\r\n                          <option value=\"Married\">Married</option>\r\n                          <option value=\"Divorced\">Divorced</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mb={0} mt={0} textAlign=\"left\">\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          color=\"text\"\r\n                          mt={1}\r\n                          textAlign=\"left\"\r\n                        >\r\n                          Date Of Birth\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <MDBox mb={4} mt={0} textAlign=\"left\">\r\n                        <div>\r\n                          <style>\r\n                            {`.date-picker input {\r\n                      width: 50%\r\n                      align: left\r\n                 }`}\r\n                          </style>\r\n                          <DatePicker\r\n                            date={startDate}\r\n                            wrapperClassName=\"date-picker\"\r\n                            placeholder=\"Select Birth Date\"\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            confirmBtnText=\"Confirm\"\r\n                            showCancelButton=\"true\"\r\n                            customStyles={{\r\n                              placeholderText: {\r\n                                fontSize: 5,\r\n                              },\r\n                              dateIcon: {\r\n                                height: 0,\r\n                                width: 0,\r\n                              },\r\n                              dateText: {\r\n                                color: \"#b3b4b5\",\r\n                                fontSize: 16,\r\n                              },\r\n                              dateInput: {\r\n                                borderWidth: 0,\r\n                              },\r\n                            }}\r\n                            selected={startDate}\r\n                            onChange={(date) => setStartDate(date)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Nationality\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nationalityx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNationality}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Street\"\r\n                          value={residentialStreetx || \"\"}\r\n                          onKeyUp={handleOnStreetKeys}\r\n                          onChange={(e) => setResidentialStreet(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          value={residentialCityx || \"\"}\r\n                          onKeyUp={handleOnCityKeys}\r\n                          onChange={(e) => setResidentialCity(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          State\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialStatex || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCState}\r\n                          >\r\n                            <option>--Select State--</option>\r\n                            {allStates.map((apis) => (\r\n                              <option key={apis.code} value={apis.name}>\r\n                                {apis.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton variant=\"gradient\" onClick={handleUpdate} color=\"info\" width=\"50%\">\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Bank Account\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"baAccName\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"baAccNo\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Bank\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={baBankx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeBank}\r\n                          >\r\n                            <option value=\"1\">--Select Bank--</option>\r\n                            {allBanks.map((api) => (\r\n                              <option key={api.code} value={api.name}>\r\n                                {api.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                          Bank Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={baCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeBaCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {WCountries.map((apic) => (\r\n                              <option key={apic.code} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Account Number\"\r\n                          value={baAcctNox || \"\"}\r\n                          onKeyUp={handleOnBAAccNoKeys}\r\n                          onChange={(e) => setBaAcctNo(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Account Name\"\r\n                          value={baAcctNamex || \"\"}\r\n                          onKeyUp={handleOnBAAccNameKeys}\r\n                          onChange={(e) => setBaAcctName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleBAAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Medical\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                />\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Blood Group\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMeBloodGroup(e.target.value)}\r\n                          value={meBloodGroupx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Blood Group---</option>\r\n                          <option value=\"A+\">A+</option>\r\n                          <option value=\"A-\">A-</option>\r\n                          <option value=\"B+\">B+</option>\r\n                          <option value=\"B-\">B-</option>\r\n                          <option value=\"AB+\">AB+</option>\r\n                          <option value=\"AB-\">AB-</option>\r\n                          <option value=\"O+\">O+</option>\r\n                          <option value=\"O-\">O-</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Genotype\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMeGenotype(e.target.value)}\r\n                          value={meGenotypex || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Genotype---</option>\r\n                          <option value=\"AA\">AA</option>\r\n                          <option value=\"AS\">AS</option>\r\n                          <option value=\"AC\">AC</option>\r\n                          <option value=\"SS\">SS</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleMEAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      &nbsp;\r\n      <MDBox>\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: items }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js",["1151","1152","1153","1154"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { MonnifyConsumer } from \"react-monnify\";\r\n\r\nfunction PaymentHis() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [descripx, setDescripx] = useState(\"\");\r\n  const [currencyx, setCurrency] = useState(\"NGN\");\r\n  const [amountx, setAmountx] = useState(0);\r\n  const [pnox, setPno] = useState(\"\");\r\n  const [bonusCheck, setBonusCheck] = useState([]);\r\n  const [referenceSKey, setReferenceSKey] = useState();\r\n  const [bonusSetID, setBonusSetID] = useState([]);\r\n\r\n  const [checkedEmail, setCheckedEmail] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n  const [checkedCity, setCheckedCity] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [auditSDate, setAuditSDate] = useState(\"\");\r\n  const [auditEDate, setAuditEDate] = useState(\"\");\r\n  const [concaBalance, setConcaBalance] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n  const bonusStatus = \"1\";\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/gets/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(resultapi);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getBalance/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          let comBalance = 0;\r\n          if (resultapi.length === 0) {\r\n            comBalance = 0;\r\n          } else {\r\n            comBalance = resultapi.balance;\r\n          }\r\n\r\n          let parts = 0;\r\n          if (comBalance > 0) {\r\n            parts = comBalance.toString().split(\".\");\r\n          }\r\n          const numberPart = parts[0];\r\n          const decimalPart = parts[1];\r\n          const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n          let value = 0;\r\n          if (comBalance > 0) {\r\n            value = numberPart.replace(thousands, \",\") + (decimalPart ? `.${decimalPart}` : \"\");\r\n          }\r\n          setConcaBalance(`NGN ${value}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/bonusSetting/getByStatus/${bonusStatus}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          if (resultapi.message === \"Your Organization Has Not Made Any Payment\") {\r\n            setBonusCheck([]);\r\n          } else {\r\n            setBonusCheck(resultapi);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  //   const honComplete = (response) => {\r\n  //     setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n  //     console.log(response); // card charged successfully, get reference here\r\n  //     if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n  //       setOpened(true);\r\n  //       const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n  //       //   bonusAmount: 10\r\n  //       //   createdTime: 1649875827073\r\n  //       //   deleteFlag: 0\r\n  //       //   endTime: 1651104000000\r\n  //       //   id: \"62571b73813e040d304c13fd\"\r\n  //       //   maxTrigger: 6000\r\n  //       //   minTrigger: 2000\r\n  //       //   name: \"Test Freebie\"\r\n  //       //   startTime: 1649894400000\r\n  //       //   status: 0\r\n  //       let allPayandBonus = 0;\r\n  //       let mBonusAmount = 0;\r\n  //       // eslint-disable-next-line radix\r\n  //       const amountCOn = parseInt(amountx);\r\n  //       // eslint-disable-next-line array-callback-return\r\n  //       bonusCheck.map((checkBonus) => {\r\n  //         if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else {\r\n  //           mBonusAmount = 0;\r\n  //           allPayandBonus = amountCOn;\r\n  //         }\r\n  //         // check = false;\r\n  //       });\r\n  //       const orgIDs = data11.orgID;\r\n  //       const raw = JSON.stringify({\r\n  //         orgID: orgIDs,\r\n  //         paidAmount: amountCOn,\r\n  //         bonusAmount: mBonusAmount,\r\n  //         totalAmount: allPayandBonus,\r\n  //       });\r\n  //       const requestOptions = {\r\n  //         method: \"POST\",\r\n  //         headers: myHeaders,\r\n  //         body: raw,\r\n  //         redirect: \"follow\",\r\n  //       };\r\n  //       console.log(raw);\r\n  //       fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n  //         .then(async (res) => {\r\n  //           const aToken = res.headers.get(\"token-1\");\r\n  //           localStorage.setItem(\"rexxdex\", aToken);\r\n  //           return res.json();\r\n  //         })\r\n  //         .then((result) => {\r\n  //           if (result.message === \"Expired Access\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Token Does Not Exist\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Unauthorized Access\") {\r\n  //             navigate(\"/authentication/forbiddenPage\");\r\n  //           }\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: result.status,\r\n  //             type: \"success\",\r\n  //             text: result.message,\r\n  //           }).then(() => {\r\n  //             window.location.reload();\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: error.status,\r\n  //             type: \"error\",\r\n  //             text: error.message,\r\n  //           });\r\n  //         });\r\n  //     }\r\n  //   };\r\n\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[-+]?[0-9]+.[0-9]+$/;\r\n    if (!amountx.match(letters)) {\r\n      setCheckedCity(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount - input a valid Amount<br>\";\r\n    }\r\n    if (amountx.match(letters)) {\r\n      setCheckedCity(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (amountx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const honClose = (response) => {\r\n    handleOnNameKeys();\r\n    handleOnEmailKeys();\r\n    handleOnCityKeys();\r\n    if (enabled) {\r\n      setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n      if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n        setOpened(true);\r\n\r\n        let allPayandBonus = 0;\r\n        let mBonusAmount = 0;\r\n        // eslint-disable-next-line radix\r\n        const amountCOn = parseInt(amountx);\r\n        if (bonusCheck.length === 0) {\r\n          mBonusAmount = 0;\r\n          allPayandBonus = amountCOn;\r\n        } else {\r\n          // eslint-disable-next-line array-callback-return\r\n          bonusCheck.map((checkBonus) => {\r\n            if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else {\r\n              mBonusAmount = 0;\r\n              allPayandBonus = amountCOn;\r\n            }\r\n            // check = false;\r\n          });\r\n        }\r\n\r\n        const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n        const orgIDs = data11.orgID;\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          paidAmount: amountCOn,\r\n          bonusAmount: mBonusAmount,\r\n          totalAmount: allPayandBonus,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((result) => {\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            setOpened(false);\r\n\r\n            const raw1 = JSON.stringify({\r\n              orgID: orgIDs,\r\n              bonusSettingID: bonusSetID,\r\n            });\r\n            const requestOptions1 = {\r\n              method: \"POST\",\r\n              headers: myHeaders,\r\n              body: raw1,\r\n              redirect: \"follow\",\r\n            };\r\n            if (mBonusAmount !== 0) {\r\n              fetch(\r\n                `${process.env.REACT_APP_EKOATLANTIC_URL}/bonusHistory/add`,\r\n                requestOptions1\r\n              ).then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              });\r\n            }\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const personalApiKey = \"MK_TEST_JB2L9T7HMG\";\r\n  const personalConCode = \"6428086775\";\r\n\r\n  const monNey = {\r\n    onClose: honClose,\r\n    amount: amountx,\r\n    currency: currencyx,\r\n    reference: referenceSKey,\r\n    customerFullName: namex,\r\n    customerEmail: emailx,\r\n    customerMobileNumber: pnox,\r\n    apiKey: personalApiKey,\r\n    contractCode: personalConCode,\r\n    paymentDescription: descripx,\r\n    isTestMode: true,\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const auditConSDate = new Date(auditSDate).getTime();\r\n    const auditConEDate = new Date(auditEDate).getTime();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      startDate: auditConSDate,\r\n      endDate: auditConEDate,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getFilter`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setItems(result);\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleGenReceipt = (filteredData, value) => {\r\n    const headers = miHeaders;\r\n    let receiptNumber = \"\";\r\n    // Avoid filter for empty string\r\n    if (!value) {\r\n      receiptNumber = \"\";\r\n    } else {\r\n      const filteredItems = filteredData.filter((item) => item.id === value);\r\n\r\n      receiptNumber = filteredItems[0].receiptNo;\r\n    }\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      receiptNo: receiptNumber,\r\n      paymentHistoryID: paymentHisValue,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentReceipt/generate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Organization\", accessor: \"orgName\", align: \"left\" },\r\n    { Header: \"Paid Amount\", accessor: \"paidAmount\", align: \"left\" },\r\n    { Header: \"Bonus Amount\", accessor: \"bonusAmount\", align: \"left\" },\r\n    { Header: \"Total Amount\", accessor: \"totalAmount\", align: \"left\" },\r\n    { Header: \"Balance\", accessor: \"balance\", align: \"left\" },\r\n    {\r\n      Header: \"Last Updated\",\r\n      accessor: \"lastUpdatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"Date Created\",\r\n      accessor: \"createdTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"id\",\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(items, value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Container>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5\">\r\n            <Card>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mt={2}\r\n                mx={0}\r\n                p={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Balance\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"white\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={2}\r\n                p={6}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography variant=\"h1\" fontWeight=\"medium\" color=\"info\" textAlign=\"center\">\r\n                  {concaBalance}\r\n                </MDTypography>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-7\">\r\n            <Card>\r\n              <MDBox pt={4} pb={3} px={3}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={-3}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Make Payment\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox component=\"form\" role=\"form\">\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Name(name on receipt) *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={emailx || \"\"}\r\n                            onKeyUp={handleOnEmailKeys}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            label=\"Email *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={currencyx || \"\"}\r\n                            onChange={(e) => setCurrency(e.target.value)}\r\n                            label=\"Currency *\"\r\n                            disabled\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-9\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={amountx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setAmountx(e.target.value)}\r\n                            label=\"Amount *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={descripx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setDescripx(e.target.value)}\r\n                            label=\"Description *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                            Phone Number *\r\n                          </MDTypography>\r\n                          <PhoneInput\r\n                            value={pnox}\r\n                            inputStyle={{ width: \"100%\" }}\r\n                            buttonStyle={{}}\r\n                            onChange={setPno}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <div>\r\n                      <MonnifyConsumer {...monNey} className=\"btn\">\r\n                        {({ initializePayment }) => (\r\n                          // eslint-disable-next-line react/button-has-type\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={() => initializePayment()}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Pay\r\n                          </MDButton>\r\n                        )}\r\n                      </MonnifyConsumer>\r\n                    </div>\r\n                  </MDBox>\r\n                </MDBox>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Payment History\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Start Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditSDate}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                            onChange={(time) => setAuditSDate(time)}\r\n                          />{\" \"}\r\n                        </MDBox>{\" \"}\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            End Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditEDate}\r\n                            onChange={(time) => setAuditEDate(time)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />{\" \"}\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleClick}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                        align=\"center\"\r\n                      >\r\n                        Add Filters\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      </Container>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PaymentHis;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js",["1155","1156","1157","1158","1159","1160","1161","1162","1163"],"// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction InviteUser() {\r\n  const [phonex, setPhone] = useState(\"\");\r\n  // const [startDate, setStartDate] = useState(new Date());\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [idx, setId] = useState(0);\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [roleIDx, setRoleID] = useState(0);\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [emaily, setOemail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [deleteFlagx, setDeleteFlag] = useState(0);\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n  const [passEnabled, setPassEnabled] = useState(true);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  useEffect(() => {\r\n    /* if (idx === 0) {\r\n      setPassEnabled(true);\r\n    } */\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const fnameu = urlParams.get(\"fname\");\r\n    const lnameu = urlParams.get(\"lname\");\r\n    const emailu = urlParams.get(\"email\");\r\n    const orgIDu = urlParams.get(\"orgID\");\r\n    const roleIDu = urlParams.get(\"role\");\r\n    console.log(fnameu);\r\n    console.log(lnameu);\r\n    console.log(emailu);\r\n    console.log(orgIDu);\r\n    console.log(roleIDu);\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      setFname(fnameu);\r\n      setLname(lnameu);\r\n      setOemail(emailu);\r\n      setOrgID(orgIDu);\r\n      setRoleID(roleIDu);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/${emailpersonal}`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            setPassEnabled(false);\r\n            setOname(result.oname);\r\n            setId(result.id);\r\n            setPhone(result.pno);\r\n            setNationality(result.nationality);\r\n            setResidentialStreet(result.residentialStreet);\r\n            setResidentialCity(result.residentialCity);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === result.residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setResidentialState(result.residentialState);\r\n            setResidentialCountry(result.residentialCountry);\r\n            setMaritalStatus(result.maritalStatus);\r\n            setDeleteFlag(result.deleteFlag);\r\n            setSysStatus(result.sysStatus);\r\n            setCreatedTime(result.createdTime);\r\n\r\n            setStartDate(\r\n              new Date(`${result.monthOfBirth}/${result.dayOfBirth}/${result.yearOfBirth}`)\r\n            );\r\n          } else {\r\n            setId(0);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setId(0);\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      // const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        id: idx,\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n        deleteFlag: deleteFlagx,\r\n        sysStatus: sysStatusx,\r\n        createdTime: createdTimex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      localStorage.setItem(\"email1\", emailx);\r\n\r\n      let endpoint = \"add\";\r\n      if (idx !== 0) {\r\n        endpoint = \"update\";\r\n      }\r\n      if (endpoint === \"update\") {\r\n        setPassword(\"\");\r\n      }\r\n      const endpointPC = \"add\";\r\n      let endpointL = \"add\";\r\n      if (endpoint === \"update\") {\r\n        endpointL = `updateOrganization/${emailx}/${orgIDx}`;\r\n      }\r\n      let methodLUO = \"POST\";\r\n      if (endpointL !== \"add\") {\r\n        methodLUO = \"GET\";\r\n      }\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/${endpoint}`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          localStorage.setItem(\"personalInfo\", JSON.stringify(result.data));\r\n          const raw1 = JSON.stringify({\r\n            orgID: orgIDx,\r\n            personalID: result.data.id,\r\n            email: emaily,\r\n            roleID: roleIDx,\r\n          });\r\n          const requestOptions1 = {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: raw1,\r\n            redirect: \"follow\",\r\n          };\r\n\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/${endpointPC}`, requestOptions1)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resultx) => {\r\n              console.log(resultx);\r\n              localStorage.setItem(\"company\", JSON.stringify(resultx.data));\r\n              const raw2 = JSON.stringify({\r\n                orgID: orgIDx,\r\n                empID: result.data.id,\r\n                username: emailx,\r\n                password: passwordx,\r\n              });\r\n              const requestOptions2 = {\r\n                method: methodLUO,\r\n                headers: myHeaders,\r\n                body: raw2,\r\n                redirect: \"follow\",\r\n              };\r\n              fetch(`${process.env.REACT_APP_ZAVE_URL}/login/${endpointL}`, requestOptions2)\r\n                .then(async (res) => {\r\n                  const aToken = res.headers.get(\"token-1\");\r\n                  localStorage.setItem(\"rexxdex\", aToken);\r\n                  return res.json();\r\n                })\r\n                .then(() => {\r\n                  setOpened(false);\r\n                  MySwal.fire({\r\n                    title: result.status,\r\n                    type: \"success\",\r\n                    text: result.message,\r\n                  }).then(() => {\r\n                    navigate(\"/authentication/sign-in\", { replace: true });\r\n                  });\r\n                });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  /* return <Select options={options} value={value} onChange={changeHandler} />\r\n} */\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h2\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            PlutoSpace\r\n          </MDTypography>\r\n          <MDTypography display=\"block\" variant=\"button\" color=\"white\" my={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"text\"\r\n                label=\"Other Name\"\r\n                value={onamex || \"\"}\r\n                onKeyUp={handleOnOtherKeys}\r\n                onChange={(e) => setOname(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Personal Email\"\r\n                value={emailx || \"\"}\r\n                onKeyUp={handleOnPEmailKeys}\r\n                onChange={getPersonalInformation}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Official Email\"\r\n                value={emaily || \"\"}\r\n                disabled\r\n                onChange={(e) => setOemail(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <div className=\"col-sm-8\">\r\n                <Form.Select\r\n                  aria-label=\"Default select example\"\r\n                  width=\"50%\"\r\n                  mx={34}\r\n                  value={maritalStatusx || \"\"}\r\n                  onChange={(e) => setMaritalStatus(e.target.value)}\r\n                >\r\n                  <option>--Marital Status--</option>\r\n                  <option value=\"Married\">Married</option>\r\n                  <option value=\"Single\">Single</option>\r\n                  <option value=\"Divorced\">Divorced</option>\r\n                </Form.Select>\r\n              </div>\r\n            </MDBox>\r\n            <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n              Date Of Birth\r\n            </MDTypography>\r\n            <MDBox mb={4} mt={-1}>\r\n              <div>\r\n                <style>\r\n                  {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                </style>\r\n                <DatePicker\r\n                  date={startDate}\r\n                  wrapperClassName=\"date-picker\"\r\n                  placeholder=\"Select Birth Date\"\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  confirmBtnText=\"Confirm\"\r\n                  showCancelButton=\"true\"\r\n                  customStyles={{\r\n                    placeholderText: {\r\n                      fontSize: 5,\r\n                    },\r\n                    dateIcon: {\r\n                      height: 0,\r\n                      width: 0,\r\n                    },\r\n                    dateText: {\r\n                      color: \"#b3b4b5\",\r\n                      fontSize: 16,\r\n                    },\r\n                    dateInput: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  }}\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  peekNextMonth\r\n                  showMonthDropdown\r\n                  showYearDropdown\r\n                  dropdownMode=\"select\"\r\n                />\r\n              </div>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-10\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Country\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={residentialCountryx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeRCCountry}\r\n                        >\r\n                          <option>--Select Country--</option>\r\n                          {AlCountry.map((apic) => (\r\n                            <option key={apic.code3} value={apic.name}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default InviteUser;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryTime\\index.js",["1164"],"import React, { useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SalaryTimeData from \"./data/salaryTimeTable\";\r\n\r\nfunction SalaryTime() {\r\n  const MySwal = withReactContent(Swal);\r\n  const { columns: pColumns, rows: pRows } = SalaryTimeData();\r\n\r\n  const [timex, setTime] = useState(0);\r\n  console.log(new Date(timex).getTime());\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const conTimestamp = new Date(timex).getTime();\r\n    const raw = JSON.stringify({ orgID: orgIDs, payTime: conTimestamp });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/remunerationTime/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Salary Time Settings\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    {\" \"}\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Payment Time\r\n                    </MDTypography>\r\n                    <input\r\n                      type=\"datetime-local\"\r\n                      value={timex || \"\"}\r\n                      className=\"form-control\"\r\n                      onChange={(e) => setTime(e.target.value)}\r\n                      variant=\"standard\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleClick}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: pRows }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default SalaryTime;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\index.js",["1165","1166"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SalaryProrateData from \"./data/salaryProrateTable\";\r\n\r\nfunction SalaryProrate() {\r\n  const MySwal = withReactContent(Swal);\r\n  const { columns: pColumns, rows: pRows } = SalaryProrateData();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [noOfDaysx, setNoOfDays] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [totalNumberOfDaysx, setTotalNumberOfDays] = useState(\"\");\r\n\r\n  const [user, setUser] = useState([]);\r\n  const [userIDx, setUserIDx] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleCalDate = (start) => {\r\n    const chosenDay = new Date(start).getTime();\r\n    setStartDate(chosenDay);\r\n    const date = new Date();\r\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\r\n    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime();\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(\r\n      `${process.env.REACT_APP_NSUTANA_URL}/freedays/getBetween/${orgIDs}/${firstDay}/${lastDay}`\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        fetch(\r\n          `${process.env.REACT_APP_NSUTANA_URL}/freedays/getBetween/${orgIDs}/${chosenDay}/${lastDay}`\r\n        )\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultf) => {\r\n            if (resultf.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultf.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultf.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            const numberOfFreedays = result.length;\r\n            const numOfFreedaysW = resultf.length;\r\n            const startDateandendDate = lastDay - firstDay;\r\n            const varx = 24 * 60 * 60 * 1000;\r\n            const numOfDays = Math.ceil(startDateandendDate / varx) - numberOfFreedays + 1;\r\n\r\n            const chosenDate = new Date(start).getDate();\r\n            const lastDayofMonth = new Date(lastDay).getDate();\r\n            const prorateDays = lastDayofMonth - chosenDate - numOfFreedaysW + 1;\r\n            setTotalNumberOfDays(numOfDays);\r\n            setNoOfDays(prorateDays);\r\n          })\r\n          .catch((error) => {\r\n            console.log({ error });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log({ error });\r\n      });\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: userIDx,\r\n      noOfDays: noOfDaysx,\r\n      totalNumberOfDays: totalNumberOfDaysx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/prorateRemuneration/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleOnNODKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[0-9]+$/;\r\n    if (!noOfDaysx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Number Of Days - use only numbers<br>\";\r\n    }\r\n    if (noOfDaysx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (noOfDaysx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Number Of Days is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnTNDKeys = () => {\r\n    const letters = /^[0-9]+$/;\r\n    if (!totalNumberOfDaysx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML =\r\n        \"Total Number of Days - input only capital and small letters<br>\";\r\n    }\r\n    if (totalNumberOfDaysx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (totalNumberOfDaysx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Total Number of Days is required<br>\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Salary Prorate\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n              {\" \"}\r\n            </MDTypography>\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-5\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"Start Date\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={handleCalDate}\r\n                        />\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={noOfDaysx || \"\"}\r\n                      onKeyUp={handleOnNODKeys}\r\n                      onChange={(e) => setNoOfDays(e.target.value)}\r\n                      label=\"Prorate No Of Days\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={totalNumberOfDaysx || \"\"}\r\n                      onKeyUp={handleOnTNDKeys}\r\n                      onChange={(e) => setTotalNumberOfDays(e.target.value)}\r\n                      label=\"Employee Total Working Days\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={2}>\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                fontSize=\"80%\"\r\n                align=\"left\"\r\n                color=\"text\"\r\n              >\r\n                User\r\n              </MDTypography>\r\n              <Form.Select\r\n                value={userIDx}\r\n                onChange={(e) => setUserIDx(e.target.value)}\r\n                aria-label=\"Default select example\"\r\n              >\r\n                <option value=\"\">--Select User--</option>\r\n                {user.map((api) => (\r\n                  <option key={api.personal.id} value={api.personal.id}>\r\n                    {api.personal.fname} {api.personal.lname}\r\n                  </option>\r\n                ))}\r\n              </Form.Select>\r\n              <br />\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" width=\"50%\">\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: pRows }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default SalaryProrate;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js",["1167","1168"],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction UpdateAnnouncement() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [titlex, setTitle] = useState(\"\");\r\n  const [messagex, setMessage] = useState(\"\");\r\n  const [groupidx, setGroupIdx] = useState(\"\");\r\n  const [annoucementTypeIDx, setAnnoucementTypeID] = useState(\"\");\r\n  const [deletex, setDeletex] = useState(\"\");\r\n  const [createbyx, setCreatebyx] = useState(\"\");\r\n  const [createx, setCreatex] = useState(\"\");\r\n  const [idx, setIdx] = useState(\"\");\r\n\r\n  const [allAnnouncementType, setAllAnnouncementType] = useState([]);\r\n\r\n  const [user, setUser] = useState([]);\r\n\r\n  const [checkedTitle, setCheckedTitle] = useState(\"\");\r\n  const [, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Method to fetch all announcementtype\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcementtype/getAll/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setAllAnnouncementType(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // setItems(result);\r\n          setIdx(result[0].announcement.id);\r\n          setTitle(result[0].announcement.title);\r\n          setMessage(result[0].announcement.message);\r\n          setGroupIdx(result[0].announcement.groupID);\r\n          setCreatebyx(result[0].announcement.createdBy);\r\n          setDeletex(result[0].announcement.deleteFlag);\r\n          setCreatex(result[0].announcement.createdTime);\r\n          setAnnoucementTypeID(result[0].announcementType.id);\r\n        }\r\n        console.log(result);\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChangeAnnounceType = (e) => {\r\n    setAnnoucementTypeID(e.target.value);\r\n  };\r\n\r\n  const handleOnTitleKeys = () => {\r\n    const letters = /^[a-zA-Z ('\") ]+$/;\r\n    if (titlex.match(letters)) {\r\n      setCheckedTitle(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"\";\r\n    }\r\n    if (titlex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"Title is required<br>\";\r\n    }\r\n    setEnabled(checkedTitle === true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    // const ids = data11.id;\r\n    // const personalIds = data11.id;\r\n    const orgIDs = data11.orgID;\r\n\r\n    const raw = JSON.stringify({\r\n      id: idx,\r\n      title: titlex,\r\n      message: messagex,\r\n      orgID: orgIDs,\r\n      groupID: groupidx,\r\n      announcementTypeID: annoucementTypeIDx,\r\n      createdBy: createbyx,\r\n      createdTime: createx,\r\n      deleteFlag: deletex,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        // setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Update Announcement\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"title\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\" name=\"form1\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Title*\"\r\n                      value={titlex || \"\"}\r\n                      onKeyUp={handleOnTitleKeys}\r\n                      onChange={(e) => setTitle(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-6\">\r\n                    <Form.Group className=\"mb-1\" controlId=\"exampleForm.ControlTextArea\">\r\n                      <Form.Label style={{ fontSize: 14 }}>Message</Form.Label>\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        value={messagex || \"\"}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        label=\"Message\"\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  {/* <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"textarea\"\r\n                      value={messagex || \"\"}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      label=\"Message\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        color=\"text\"\r\n                      >\r\n                        Annoucement Type\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={annoucementTypeIDx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeAnnounceType}\r\n                        >\r\n                          <option>--Select Announcement Type--</option>\r\n                          {allAnnouncementType.map((apic) => (\r\n                            <option key={apic.id} value={apic.id}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"right\"\r\n                        color=\"text\"\r\n                      >\r\n                        Group\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        value={groupidx || \"\"}\r\n                        onChange={(e) => setGroupIdx(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Group</option>\r\n                        {user.map((api) => (\r\n                          <option key={api.group.id} value={api.group.id}>\r\n                            {api.group.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={(e) => handleUpdate(e)}\r\n                // disabled={!enabled}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n              >\r\n                Update\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UpdateAnnouncement;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companyroles\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\viewUserProrate\\index.js",["1169"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction VuUserProrate() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [idx, setId] = useState(\"\");\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [statusx, setStatus] = useState(\"\");\r\n  const [noOfDaysx, setNoOfDays] = useState(\"\");\r\n  const [totalNumOfDayx, setTotalNumOfDays] = useState(\"\");\r\n  const [createdDatex, setCreatedDate] = useState(\"\");\r\n  const [deletedflagx, setDeletedflag] = useState(\"\");\r\n\r\n  const [user, setUser] = useState([]);\r\n  const [userIDx, setUserIDx] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/prorateRemuneration/getByIds/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setId(result[0].id);\r\n          setOrgID(result[0].orgID);\r\n          setUserIDx(result[0].empID);\r\n          setStatus(result[0].status);\r\n          setNoOfDays(result[0].noOfDays);\r\n          setTotalNumOfDays(result[0].totalNumberOfDays);\r\n          setCreatedDate(result[0].createdTime);\r\n          setDeletedflag(result[0].deleteFlag);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: idx,\r\n      orgID: orgIDx,\r\n      empID: userIDx,\r\n      status: statusx,\r\n      noOfDays: noOfDaysx,\r\n      totalNumberOfDays: totalNumOfDayx,\r\n      createdTime: createdDatex,\r\n      deleteFlag: deletedflagx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/prorateRemuneration/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Salary Prorate\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={0}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={noOfDaysx || \"\"}\r\n                      onChange={(e) => setNoOfDays(e.target.value)}\r\n                      label=\"Number Of Days\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={totalNumOfDayx || \"\"}\r\n                      onChange={(e) => setTotalNumOfDays(e.target.value)}\r\n                      label=\"Total Number Of Days\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={2}>\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                fontSize=\"80%\"\r\n                align=\"left\"\r\n                color=\"text\"\r\n              >\r\n                User\r\n              </MDTypography>\r\n              <Form.Select\r\n                value={userIDx}\r\n                onChange={(e) => setUserIDx(e.target.value)}\r\n                aria-label=\"Default select example\"\r\n              >\r\n                <option value=\"\">--Select User--</option>\r\n                {user.map((api) => (\r\n                  <option key={api.personal.id} value={api.personal.id}>\r\n                    {api.personal.fname} {api.personal.lname}\r\n                  </option>\r\n                ))}\r\n              </Form.Select>\r\n              <br />\r\n            </MDBox>\r\n          </MDBox>\r\n          <MDBox mt={4} mb={1}>\r\n            <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" width=\"50%\">\r\n              Save\r\n            </MDButton>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default VuUserProrate;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestJourney\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\disapprove\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js",["1170"],"import { useNavigate } from \"react-router-dom\";\r\nimport GHeaders from \"getHeader\";\r\nimport PHeaders from \"postHeader\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nfunction EscalateMatter() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [userx, setUser] = useState([]);\r\n  const [escalatetox, setEscalateto] = useState();\r\n  const [reasonx, setReason] = useState(\"\");\r\n  //   const [reasonTitle, setReasonTitle] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n          // setEscalateto(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernids = urlParams.get(\"id\");\r\n\r\n    const raw = JSON.stringify({\r\n      concernID: concernids,\r\n      escalateTo: escalatetox,\r\n      reasonForEscalation: reasonx,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/escalate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  //   const handleOnEscalateKeys = () => {\r\n  //     const letters = /^[a-zA-Z ]+$/;\r\n  //     if (!reasonx.match(letters)) {\r\n  //       setReasonTitle(false);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML =\r\n  //         \"Reason - input only capital and small letters<br>\";\r\n  //     }\r\n  //     if (reasonx.match(letters)) {\r\n  //       setReasonTitle(true);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"\";\r\n  //     }\r\n  //     if (reasonx.length === 0) {\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"Reason is required<br>\";\r\n  //     }\r\n  //     setEnabled(reasonTitle === true);\r\n  //   };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-2\">&nbsp;</div>\r\n        <div className=\"col-sm-8\" align=\"center\">\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={25}\r\n                  mt={-6}\r\n                  p={3}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Escalation\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"reason\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                {/* <Form> */}\r\n                <Form.Group\r\n                  className=\"mb-3\"\r\n                  controlId=\"setPurposex\"\r\n                  placeholder=\"Description\"\r\n                  value={reasonx || \"\"}\r\n                  onChange={(e) => setReason(e.target.value)}\r\n                >\r\n                  <Form.Label>Reason For Escalation</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows={2} />\r\n                </Form.Group>\r\n                {/* </Form> */}\r\n                {/* <option align=\"center\">Escalate Matter To</option>\r\n                {userx.map((api) => (\r\n                  <div key={api.personal.id} className=\"mb-3\" align=\"left\">\r\n                    <Form.Check.Input\r\n                      type=\"radio\"\r\n                      defaultChecked={api.isCheck}\r\n                      onClick={(e) => handleClick(e, api)}\r\n                      // onChange={setEscalateto}\r\n                    />\r\n                    <Form.Check.Label>\r\n                      &nbsp; {api.personal.fname} {api.personal.lname}\r\n                    </Form.Check.Label>\r\n                  </div>\r\n                ))} */}\r\n                <MDBox mb={2}>\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                    Reason For Escalation\r\n                  </MDTypography>\r\n                  <Form.Select\r\n                    value={escalatetox}\r\n                    onChange={(e) => setEscalateto(e.target.value)}\r\n                    aria-label=\"Default select example\"\r\n                    // onClick={(e) => handleClick(e)}\r\n                  >\r\n                    <option value=\"\">Escalate Matter To</option>\r\n                    {userx.map((api) => (\r\n                      <option key={api.personal.id} value={api.personal.id}>\r\n                        {api.personal.fname} {api.personal.lname}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                  <br />\r\n                </MDBox>\r\n              </MDBox>\r\n              <MDBox mt={4} mb={1}>\r\n                <MDButton\r\n                  variant=\"gradient\"\r\n                  onClick={handleClick}\r\n                  // onKeyUp={handleOnEscalateKeys}\r\n                  // disabled={!enabled}\r\n                  color=\"info\"\r\n                  width=\"50%\"\r\n                  align=\"center\"\r\n                >\r\n                  Add\r\n                </MDButton>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default EscalateMatter;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js",["1171"],"import { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nfunction PollsView() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [questionx, setQuestion] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultx) => {\r\n        if (resultx.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (resultx[0].status === 0 || resultx[0].status === \"0\") {\r\n            MySwal.fire({\r\n              title: \"Poll Not Opened\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `Open Poll To Vote`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          } else if (resultx[0].status === 2 || resultx[0].status === \"2\") {\r\n            MySwal.fire({\r\n              title: \"Poll Closed\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `You can't vote on this poll`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          }\r\n          setQuestion(resultx[0].question);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const pColumns = [\r\n    { Header: \"Poll Options\", accessor: \"response\", align: \"left\" },\r\n    { Header: \"Number Of Votes\", accessor: \"number\", align: \"left\" },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox>\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={3}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={25}\r\n              mt={-6}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                {questionx}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp; &nbsp;\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: items }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      {/* <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop> */}\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PollsView;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\update-salary-advance\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companystatustype\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\forwardTimeOffRequests\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\companyRegistration\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\update\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\viewAppraisal\\index.js",["1172"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\n// import DataTable from \"examples/Tables/DataTable\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction ViewAppraisal() {\r\n  const MySwal = withReactContent(Swal);\r\n  const navigate = useNavigate();\r\n\r\n  const [appraiseeIDx, setAppraiseeIDx] = useState(\"\");\r\n  const [userx, setUser] = useState([]);\r\n  const [namex, setNamex] = useState(\"\");\r\n  const [items, setItems] = useState({});\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    console.log(setOpened);\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n      const orgIDs = data11.orgID;\r\n      const raw = JSON.stringify({\r\n        id: items.id,\r\n        deleteFlag: items.deleteFlag,\r\n        status: items.status,\r\n        createdTime: items.createdTime,\r\n        orgID: orgIDs,\r\n        appraiseeID: appraiseeIDx,\r\n        createdBy: items.createdBy,\r\n        name: namex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/update`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            // window.location.reload();\r\n            navigate(`/Appraisals`);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/getByIds/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result[0]);\r\n          setAppraiseeIDx(result[0].appraiseeID);\r\n          setNamex(result[0].name);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Update Appraisal\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={0}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Name\"\r\n                      value={namex || \"\"}\r\n                      placeholder=\"\"\r\n                      onKeyUp={handleOnNameKeys}\r\n                      onChange={(e) => setNamex(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <Form.Select\r\n                      value={appraiseeIDx}\r\n                      onChange={(e) => setAppraiseeIDx(e.target.value)}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option value=\"\">Select Appraisee</option>\r\n                      {userx.map((api) => (\r\n                        <option key={api.personal.id} value={api.personal.id}>\r\n                          {api.personal.fname} {api.personal.lname}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" width=\"50%\">\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default ViewAppraisal;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\questions\\index.js",["1173","1174","1175","1176","1177","1178"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\n\r\nimport MDTypography from \"components/MDTypography\";\r\n// import MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\n// import DataTable from \"examples/Tables/DataTable\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import Swal from \"sweetalert2\";\r\n// import withReactContent from \"sweetalert2-react-content\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction AppraisalQuestion() {\r\n  // const MySwal = withReactContent(Swal);\r\n  const navigate = useNavigate();\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [appraisalQuestions, setAppraisalQuestions] = useState([]);\r\n  const [aQuestions, setAQuestions] = useState([]);\r\n  const [appraisal, setAppraisal] = useState({});\r\n  const [opened, setOpened] = useState(false);\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      // const headers = miHeaders;\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        questionID: apix.questionID,\r\n        appraisalID: id,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/questions/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          console.log(result);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      // const headers = miHeaders;\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/appraisal/questions/remove/${apix.id}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/getByIds/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setAppraisal(result[0]);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const questionsList = [];\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setQuestions(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/questions/gets/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setAppraisalQuestions(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((question) => {\r\n              let check = false;\r\n              let myID = null;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((aQues) => {\r\n                  if (aQues.questionID === question.question.id) {\r\n                    // if (rolPermi.isCheck === 1) {\r\n                    myID = aQues.id;\r\n                    check = true;\r\n                    // }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: myID,\r\n                questionID: question.question.id,\r\n                question: question.question.question,\r\n                isCheck: check,\r\n              };\r\n\r\n              questionsList.push(pObj);\r\n            });\r\n            setAQuestions(questionsList);\r\n            console.log(questions);\r\n            console.log(appraisalQuestions);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              {appraisal.name}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox pt={0} px={4}>\r\n            &nbsp;\r\n            <Form>\r\n              {aQuestions.map((api) => (\r\n                <div key={api.questionID} className=\"mb-3\">\r\n                  <Form.Check type=\"checkbox\">\r\n                    <Form.Check.Input\r\n                      type=\"checkbox\"\r\n                      defaultChecked={api.isCheck}\r\n                      onClick={(e) => handleOnClick(e, api)}\r\n                    />\r\n                    <Form.Check.Label>{api.question}</Form.Check.Label>\r\n                  </Form.Check>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default AppraisalQuestion;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalResult\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\update\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisers\\index.js",["1179","1180","1181"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Appraisers() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const [users, setUsers] = useState([]);\r\n  const [appraisers, setAppraisers] = useState([]);\r\n  const [appraisersUser, setAppraisersUsers] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        appraisalID: id,\r\n        empID: apix.empID,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/appraisers/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/appraisal/appraisers/remove/${apix.id}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          setOpened(false);\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          MySwal.fire({\r\n            title: resx.status,\r\n            type: \"success\",\r\n            text: resx.message,\r\n          }).then(() => {\r\n            window.location.reload();\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setOpened(true);\r\n  //   const queryString = window.location.search;\r\n  //   const urlParams = new URLSearchParams(queryString);\r\n  //   const id = urlParams.get(\"id\");\r\n  //   const data11 = JSON.parse(localStorage.getItem(\"empID\"));\r\n  //   const orgIDs = data11.orgID;\r\n  //   const headers = miHeaders;\r\n  //   let isMounted = true;\r\n  //   fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/appraisers/get/${id}`, { headers })\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((resultg) => {\r\n  //       // setOpened(false);\r\n  //       if (resultg.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //       }\r\n  //       if (resultg.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //       }\r\n  //       if (resultg.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //       }\r\n  //       if (isMounted) {\r\n  //         setRolName(resultg[0].name);\r\n  //       }\r\n  //     });\r\n  //   return () => {\r\n  //     isMounted = false;\r\n  //   };\r\n  // });\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n    const usersList = [];\r\n    let isMounted = true;\r\n\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUsers(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/appraisers/gets/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setAppraisers(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((usr) => {\r\n              let check = false;\r\n              let idx = null;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((rolPermi) => {\r\n                  if (rolPermi.empID === usr.personal.id) {\r\n                    check = true;\r\n                    idx = rolPermi.id;\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: idx,\r\n                empID: usr.personal.id,\r\n                fname: usr.personal.fname,\r\n                lname: usr.personal.lname,\r\n                isCheck: check,\r\n              };\r\n\r\n              usersList.push(pObj);\r\n            });\r\n            console.log(users);\r\n            console.log(appraisers);\r\n            setAppraisersUsers(usersList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            Set Appraisers\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {appraisersUser.map((api) => (\r\n              <div key={api.empID} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>\r\n                    {api.fname} {api.lname}\r\n                  </Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Appraisers;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appaisalQandA\\index.js",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\n\r\nfunction AppraiseQandA() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const animatedComponents = makeAnimated();\r\n\r\n  const [questionIDx, setQuestionID] = useState(\"\");\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [questionx, setQuestion] = useState(\"\");\r\n  const [hintx, setHint] = useState(\"\");\r\n  const [answerx, setAnswer] = useState(\"\");\r\n\r\n  const [appraisalName, setAppraisalName] = useState(\"\");\r\n  const [appraiseeName, setAppraiseeName] = useState(\"\");\r\n\r\n  const [showF, setShowF] = useState(true);\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [showCom, setShowCom] = useState(true);\r\n\r\n  const [pageNo, setPageNo] = useState(1);\r\n  const [questNo, setQuestNo] = useState(1);\r\n  const [rLength, setRLength] = useState(0);\r\n\r\n  const [defaultSelVal, setDefaultSelVal] = useState([]);\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [itemss, setItemss] = useState([]);\r\n  const [allObj, setAllObj] = useState([]);\r\n\r\n  const [viewOption, setViewOption] = useState(false);\r\n  const [viewMultiple, setViewMultiple] = useState(false);\r\n  const [viewText, setViewText] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/appraisers/gets/${orgIDs}/${id}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          let checkUser = false;\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            if (item.empID === personalIds) {\r\n              checkUser = true;\r\n            }\r\n          });\r\n          if (checkUser === false) {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: \"UNAUTHORIZED_ACCESS\",\r\n              type: \"error\",\r\n              text: \"You were not set for this appraisal\",\r\n            }).then(() => {\r\n              navigate(\"/dashboard\", { replace: true });\r\n              window.location.reload();\r\n            });\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/getByIds/${id}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          localStorage.removeItem(\"selOpt\");\r\n          setAppraisalName(result[0].name);\r\n          setAppraiseeName(result[0].appraiseeName);\r\n          setShowAll(true);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    setOpened(true);\r\n    const orgIDs = data11.orgID;\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/questions/gets/${orgIDs}/${id}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length !== 0) {\r\n          const questID = result[pageNo - 1].questionID;\r\n          fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/getByIds/${questID}`, {\r\n            headers,\r\n          })\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resultq) => {\r\n              setOpened(false);\r\n              if (resultq.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n                window.location.reload();\r\n              }\r\n              if (resultq.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n                window.location.reload();\r\n              }\r\n              if (resultq.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n                window.location.reload();\r\n              }\r\n              if (isMounted) {\r\n                setRLength(result.length);\r\n                setItems(resultq);\r\n                setQuestionID(resultq[0].question.id);\r\n                setOrgID(resultq[0].question.orgID);\r\n                setQuestion(resultq[0].question.question);\r\n                setHint(resultq[0].question.hint);\r\n\r\n                if (resultq[0].question.inputType === \"Option\") {\r\n                  setItemss(resultq[0].options);\r\n                } else if (resultq[0].question.inputType === \"Multiple\") {\r\n                  const anwerMap = [];\r\n                  // eslint-disable-next-line array-callback-return\r\n                  resultq[0].options.map((item) => {\r\n                    const fdy = {\r\n                      value: item.optionValue,\r\n                      label: item.optionValue,\r\n                    };\r\n                    anwerMap.push(fdy);\r\n                  });\r\n                  setItems(anwerMap);\r\n                }\r\n\r\n                if (resultq[0].question.inputType === \"Option\") {\r\n                  setViewOption(true);\r\n                  setViewMultiple(false);\r\n                  setViewText(false);\r\n                } else if (resultq[0].question.inputType === \"Multiple\") {\r\n                  setViewMultiple(true);\r\n                  setViewOption(false);\r\n                  setViewText(false);\r\n                } else {\r\n                  setViewText(true);\r\n                  setViewMultiple(false);\r\n                  setViewOption(false);\r\n                }\r\n              }\r\n            });\r\n        } else {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: \"NO_QUESTIONS_SET\",\r\n            type: \"error\",\r\n            text: \"There are no questions set for this Appraisal\",\r\n          }).then(() => {\r\n            navigate(\"/dashboard\", { replace: true });\r\n            window.location.reload();\r\n          });\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleFetchQuest = (tNum) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisal/questions/gets/${orgIDs}/${id}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        console.log(result);\r\n        const questID = result[tNum - 1].questionID;\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/getByIds/${questID}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultq) => {\r\n            setOpened(false);\r\n            console.log(resultq);\r\n            if (resultq.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (resultq.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (resultq.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n              window.location.reload();\r\n            }\r\n            setQuestionID(resultq[0].question.id);\r\n            setOrgID(resultq[0].question.orgID);\r\n            setQuestion(resultq[0].question.question);\r\n            setHint(resultq[0].question.hint);\r\n\r\n            if (resultq[0].question.inputType === \"Option\") {\r\n              setItemss(resultq[0].options);\r\n            } else if (resultq[0].question.inputType === \"Multiple\") {\r\n              const anwerMap = [];\r\n              // eslint-disable-next-line array-callback-return\r\n              resultq[0].options.map((item) => {\r\n                const fdy = {\r\n                  value: item.optionValue,\r\n                  label: item.optionValue,\r\n                };\r\n                anwerMap.push(fdy);\r\n              });\r\n              setItems(anwerMap);\r\n              if (allObj.length >= tNum) {\r\n                const tDefAns = [];\r\n                const tAns = allObj[tNum - 1].answer;\r\n                const myArray = tAns.split(\",\");\r\n                // eslint-disable-next-line array-callback-return\r\n                myArray.map((objectx) => {\r\n                  const fdy = {\r\n                    value: objectx,\r\n                    label: objectx,\r\n                  };\r\n                  tDefAns.push(fdy);\r\n                  console.log(objectx);\r\n                });\r\n                console.log(tDefAns);\r\n                setDefaultSelVal(tDefAns);\r\n              }\r\n            }\r\n\r\n            if (resultq[0].question.inputType === \"Option\") {\r\n              setViewOption(true);\r\n              setViewMultiple(false);\r\n              setViewText(false);\r\n            } else if (resultq[0].question.inputType === \"Multiple\") {\r\n              setViewMultiple(true);\r\n              setViewOption(false);\r\n              setViewText(false);\r\n            } else {\r\n              setViewText(true);\r\n              setViewMultiple(false);\r\n              setViewOption(false);\r\n            }\r\n          });\r\n      });\r\n  };\r\n\r\n  const handleOnChangeOption = (e) => {\r\n    const opVal = e.target.value;\r\n    setAnswer(opVal);\r\n  };\r\n\r\n  const handleOnSelect = (select) => {\r\n    const ansA = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    select.map((item) => {\r\n      const fdy = item.value;\r\n      ansA.push(fdy);\r\n    });\r\n    setAnswer(ansA.toString());\r\n    console.log(ansA);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    localStorage.removeItem(\"selOpt\");\r\n    const numberYu = 1;\r\n    const tNum = pageNo + numberYu;\r\n    console.log(tNum);\r\n    console.log(pageNo);\r\n    if (pageNo <= rLength) {\r\n      if (tNum <= rLength) {\r\n        setQuestNo(tNum);\r\n        setPageNo(tNum);\r\n        handleFetchQuest(tNum);\r\n        console.log(\"jfjfjfnddj1\");\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n        const personalIds = data11.personalID;\r\n\r\n        const answery = answerx.toString();\r\n        let questIID = \"\";\r\n        if (allObj.length !== 0) {\r\n          // eslint-disable-next-line array-callback-return\r\n          allObj.map((objectx) => {\r\n            if (questionIDx === objectx.questionID) {\r\n              questIID = objectx.questionID;\r\n              console.log(objectx.questionID);\r\n              console.log(questionIDx);\r\n              setAnswer(\"\");\r\n              if (answerx !== objectx.answer) {\r\n                console.log(\"answerx\");\r\n                // eslint-disable-next-line no-param-reassign\r\n                objectx.answer = answerx;\r\n              }\r\n            }\r\n          });\r\n\r\n          console.log(questIID);\r\n          console.log(questionIDx);\r\n          if (questionIDx !== questIID) {\r\n            console.log(\"questID\");\r\n            const obj = {\r\n              orgID: orgIDx,\r\n              appraisalID: id,\r\n              questionID: questionIDx,\r\n              empID: personalIds,\r\n              answer: answery,\r\n            };\r\n            console.log(obj);\r\n            setAllObj((list) => [...list, obj]);\r\n            setAnswer(\"\");\r\n            console.log(allObj);\r\n          }\r\n        } else {\r\n          const obj = {\r\n            orgID: orgIDx,\r\n            appraisalID: id,\r\n            questionID: questionIDx,\r\n            empID: personalIds,\r\n            answer: answery,\r\n          };\r\n          console.log(obj);\r\n          setAllObj((list) => [...list, obj]);\r\n          setAnswer(\"\");\r\n          console.log(allObj);\r\n        }\r\n\r\n        //   if (answerx !== \"\") {\r\n        //     if (allObj.length !== 0) {\r\n        //       // eslint-disable-next-line array-callback-return\r\n        //       allObj.map((objectx) => {\r\n        //         console.log(objectx.questionID);\r\n        //         if (questionIDx !== objectx.questionID) {\r\n        //           setAllObj((list) => [...list, obj]);\r\n        //         }\r\n        //       });\r\n        //     } else {\r\n        //       setAllObj((list) => [...list, obj]);\r\n        //     }\r\n        //   }\r\n      }\r\n    }\r\n    const rNum = pageNo;\r\n    if (rNum === rLength) {\r\n      const queryString = window.location.search;\r\n      const urlParams = new URLSearchParams(queryString);\r\n      const id = urlParams.get(\"id\");\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      const answery = answerx.toString();\r\n      const personalIds = data11.personalID;\r\n      let questIID = \"\";\r\n      // eslint-disable-next-line array-callback-return\r\n      allObj.map((objectx) => {\r\n        if (questionIDx === objectx.questionID) {\r\n          questIID = objectx.questionID;\r\n          console.log(objectx.questionID);\r\n          console.log(questionIDx);\r\n          setAnswer(\"\");\r\n          if (answerx !== objectx.answer) {\r\n            console.log(\"answerx\");\r\n            // eslint-disable-next-line no-param-reassign\r\n            objectx.answer = answerx;\r\n          }\r\n        }\r\n      });\r\n\r\n      console.log(questIID);\r\n      console.log(questionIDx);\r\n      if (questionIDx !== questIID) {\r\n        console.log(\"questID\");\r\n        const obj = {\r\n          orgID: orgIDx,\r\n          appraisalID: id,\r\n          questionID: questionIDx,\r\n          empID: personalIds,\r\n          answer: answery,\r\n        };\r\n        console.log(obj);\r\n        setAllObj((list) => [...list, obj]);\r\n        console.log(allObj);\r\n      }\r\n\r\n      setShowCom(false);\r\n      setShowF(true);\r\n    }\r\n    console.log(allObj.length);\r\n    console.log(tNum);\r\n    const nextt = tNum;\r\n    if (allObj.length >= nextt) {\r\n      if (tNum > 1) {\r\n        console.log(allObj[tNum - 1]);\r\n        setAnswer(allObj[tNum - 1].answer);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if (allObj.length === rLength) {\r\n      setShowF(false);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    console.log(allObj);\r\n    const numberYu = 1;\r\n    const tNum = pageNo - numberYu;\r\n    if (pageNo > 1) {\r\n      setQuestNo(tNum);\r\n      setPageNo(tNum);\r\n      handleFetchQuest(tNum);\r\n      setAnswer(\"\");\r\n    }\r\n    console.log(tNum);\r\n    console.log(pageNo);\r\n    if (tNum >= 1) {\r\n      console.log(allObj[tNum - 1]);\r\n      setAnswer(allObj[tNum - 1].answer);\r\n    }\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    const raw = JSON.stringify(allObj);\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraiserAnswer/save`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          if (result.status === \"SUCCESS\") {\r\n            navigate(\"/dashboard\", { replace: true });\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleChangeToForm = () => {\r\n    setShowF(false);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      {/* { <DashboardNavbar />} */}\r\n      <Card>\r\n        {showAll ? (\r\n          <MDBox pt={4} pb={3} px={3}>\r\n            {showF ? (\r\n              <MDBox mb={2} mt={3}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={-3}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    {appraisalName}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"white\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={0}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"text\" mt={1}>\r\n                    Appraisal For {appraiseeName}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  {showCom ? (\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleChangeToForm}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                      >\r\n                        Start\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  ) : (\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton variant=\"gradient\" onClick={handleBack} color=\"info\" width=\"50%\">\r\n                          Go Back\r\n                        </MDButton>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleComplete}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                        >\r\n                          Complete\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  )}\r\n                </div>\r\n              </MDBox>\r\n            ) : (\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={0}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12\">\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-4\">\r\n                              <MDBox\r\n                                variant=\"gradient\"\r\n                                bgColor=\"info\"\r\n                                borderRadius=\"lg\"\r\n                                coloredShadow=\"info\"\r\n                                mx={2}\r\n                                mt={-3}\r\n                                p={2}\r\n                                mb={1}\r\n                                textAlign=\"left\"\r\n                              >\r\n                                <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                                  Question {questNo}\r\n                                </MDTypography>\r\n                              </MDBox>\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                        <MDBox\r\n                          variant=\"gradient\"\r\n                          bgColor=\"white\"\r\n                          borderRadius=\"lg\"\r\n                          coloredShadow=\"info\"\r\n                          mx={2}\r\n                          mt={0}\r\n                          p={2}\r\n                          mb={1}\r\n                          textAlign=\"center\"\r\n                        >\r\n                          <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"text\" mt={1}>\r\n                            {questionx}\r\n                          </MDTypography>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-1\" />\r\n                      <div className=\"col-sm-11\">\r\n                        <MDTypography variant=\"h4\" fontWeight=\"medium\" fontSize=\"55%\">\r\n                          Hint: {hintx}\r\n                        </MDTypography>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-4\">\r\n                        <MDBox\r\n                          variant=\"gradient\"\r\n                          bgColor=\"info\"\r\n                          borderRadius=\"lg\"\r\n                          coloredShadow=\"info\"\r\n                          mx={5}\r\n                          mt={2}\r\n                          p={2}\r\n                          mb={-1}\r\n                          textAlign=\"left\"\r\n                        >\r\n                          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                            Answer\r\n                          </MDTypography>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDBox textAlign=\"right\">\r\n                          {viewText ? (\r\n                            <MDBox mb={2} mt={3}>\r\n                              <Container>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-sm-12\">\r\n                                    <Form.Group\r\n                                      className=\"mb-1\"\r\n                                      controlId=\"exampleForm.ControlTextarea1\"\r\n                                    >\r\n                                      <Form.Control\r\n                                        as=\"textarea\"\r\n                                        value={answerx}\r\n                                        onChange={(e) => setAnswer(e.target.value)}\r\n                                        rows={2}\r\n                                      />\r\n                                    </Form.Group>\r\n                                  </div>\r\n                                </div>\r\n                              </Container>\r\n                            </MDBox>\r\n                          ) : (\r\n                            <MDBox mt={4} mb={1} />\r\n                          )}\r\n                          {viewOption ? (\r\n                            <MDBox mb={2}>\r\n                              <Container>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-sm-4\">\r\n                                    <FormControl>\r\n                                      <RadioGroup\r\n                                        aria-labelledby=\"demo-controlled-radio-buttons-group\"\r\n                                        name=\"controlled-radio-buttons-group\"\r\n                                        value={answerx}\r\n                                        onChange={handleOnChangeOption}\r\n                                      >\r\n                                        {itemss.map((apis) => (\r\n                                          <FormControlLabel\r\n                                            key={apis.id}\r\n                                            value={apis.optionValue}\r\n                                            control={<Radio />}\r\n                                            label={apis.optionValue}\r\n                                          />\r\n                                        ))}\r\n                                      </RadioGroup>\r\n                                    </FormControl>\r\n                                  </div>\r\n                                </div>\r\n                              </Container>\r\n                            </MDBox>\r\n                          ) : (\r\n                            <MDBox mt={4} mb={1} />\r\n                          )}\r\n                          {viewMultiple ? (\r\n                            <MDBox mb={2}>\r\n                              <Container>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-sm-6\">\r\n                                    <Select\r\n                                      closeMenuOnSelect\r\n                                      components={animatedComponents}\r\n                                      defaultValue={defaultSelVal}\r\n                                      onChange={handleOnSelect}\r\n                                      isMulti\r\n                                      options={items}\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </Container>\r\n                            </MDBox>\r\n                          ) : (\r\n                            <MDBox mt={4} mb={1} />\r\n                          )}\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-3\">\r\n                        <MDBox mt={4} mb={1}>\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={handlePrev}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Prev\r\n                          </MDButton>\r\n                        </MDBox>\r\n                      </div>\r\n                      <div className=\"col-sm-6\" />\r\n                      <div className=\"col-sm-3\">\r\n                        <MDBox mt={4} mb={1}>\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={handleNext}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Next\r\n                          </MDButton>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            )}\r\n          </MDBox>\r\n        ) : (\r\n          <MDBox mt={4} mb={1} />\r\n        )}\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default AppraiseQandA;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\viewAppraisalQues\\index.js",["1218"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction VuAppraisalQuestion() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [idx, setId] = useState(\"\");\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [questionx, setQuestion] = useState(\"\");\r\n  const [hintx, setHint] = useState(\"\");\r\n  const [inputTypex, setInputType] = useState(\"\");\r\n  const [createdDatex, setCreatedDate] = useState(\"\");\r\n  const [deletedflagx, setDeletedflag] = useState(\"\");\r\n\r\n  const [optionx, setOption] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [viewOption, setViewOption] = useState(false);\r\n  const [viewMultiple, setViewMultiple] = useState(false);\r\n  const [viewTable, setViewTable] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/getByIds/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setId(result[0].question.id);\r\n          setOrgID(result[0].question.orgID);\r\n          setQuestion(result[0].question.question);\r\n          setHint(result[0].question.hint);\r\n          setInputType(result[0].question.inputType);\r\n          setCreatedDate(result[0].question.createdTime);\r\n          setDeletedflag(result[0].question.deletedflag);\r\n\r\n          if (result[0].question.inputType === \"Option\") {\r\n            setViewOption(true);\r\n            setViewMultiple(false);\r\n            setViewTable(true);\r\n          } else if (result[0].question.inputType === \"Multiple\") {\r\n            setViewMultiple(true);\r\n            setViewOption(false);\r\n            setViewTable(true);\r\n          } else {\r\n            setViewTable(false);\r\n            setViewMultiple(false);\r\n            setViewOption(false);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: idx,\r\n      orgID: orgIDx,\r\n      question: questionx,\r\n      hint: hintx,\r\n      inputType: inputTypex,\r\n      createdTime: createdDatex,\r\n      deleteFlag: deletedflagx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddOption = (e) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      questionID: id,\r\n      optionValue: optionx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/addOption`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setOption(\"\");\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to handle diable\r\n  const handleDisable = (val) => {\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, remove it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        const requestOptions = {\r\n          method: \"DELETE\",\r\n          headers: miHeaders,\r\n        };\r\n\r\n        fetch(\r\n          `${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/removeOption/${val}`,\r\n          requestOptions\r\n        )\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resx) => {\r\n            if (resx.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            MySwal.fire({\r\n              title: resx.status,\r\n              type: \"success\",\r\n              text: resx.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalQuestion/getByIds/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result[0].options);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const pColumns = [\r\n    {\r\n      Header: \"Option\",\r\n      accessor: \"optionValue\",\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"id\",\r\n      // eslint-disable-next-line react/prop-types\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic-button\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleDisable(value)}>Remove</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Appraisal Question\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={0}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <Form.Group className=\"mb-1\" controlId=\"exampleForm.ControlTextarea1\">\r\n                      <Form.Label style={{ fontSize: 14 }}>Questions</Form.Label>\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        value={questionx || \"\"}\r\n                        onChange={(e) => setQuestion(e.target.value)}\r\n                        rows={2}\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={hintx || \"\"}\r\n                      onChange={(e) => setHint(e.target.value)}\r\n                      label=\"Hint\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                    <MDTypography variant=\"h4\" fontWeight=\"medium\" fontSize=\"55%\">\r\n                      (Hint is not Compulsory)\r\n                    </MDTypography>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      Question Type\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        onChange={(e) => setInputType(e.target.value)}\r\n                        value={inputTypex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option>---Question Type---</option>\r\n                        <option value=\"Text\">Text</option>\r\n                        <option value=\"Option\">Option</option>\r\n                        <option value=\"Multiple\">Multiple Select</option>\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n              <MDBox mt={4} mb={1}>\r\n                <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" width=\"50%\">\r\n                  Save\r\n                </MDButton>\r\n              </MDBox>\r\n            </MDBox>\r\n            {viewOption ? (\r\n              <MDBox mb={2}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={0}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Add Option\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        value={optionx || \"\"}\r\n                        onChange={(e) => setOption(e.target.value)}\r\n                        label=\"Option\"\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mt={4} mb={1}>\r\n                  <MDButton variant=\"gradient\" onClick={handleAddOption} color=\"info\" width=\"50%\">\r\n                    Add Option\r\n                  </MDButton>\r\n                </MDBox>\r\n              </MDBox>\r\n            ) : (\r\n              <MDBox mt={4} mb={1} />\r\n            )}\r\n            {viewMultiple ? (\r\n              <MDBox mb={2}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={0}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Add Option\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        value={optionx || \"\"}\r\n                        onChange={(e) => setOption(e.target.value)}\r\n                        label=\"Option\"\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mt={4} mb={1}>\r\n                  <MDButton variant=\"gradient\" onClick={handleAddOption} color=\"info\" width=\"50%\">\r\n                    Add Option\r\n                  </MDButton>\r\n                </MDBox>\r\n              </MDBox>\r\n            ) : (\r\n              <MDBox mt={4} mb={1} />\r\n            )}\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>{\" \"}\r\n      &nbsp;\r\n      {viewTable ? (\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      ) : (\r\n        <MDBox mt={4} mb={1} />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default VuAppraisalQuestion;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\index.js",["1219","1220","1221","1222","1223","1224","1225","1226"],"// @mui material components\r\nimport { useEffect, useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\n\r\n// Material Dashboard 2 React example components\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\n\r\n// import ReportsBarChart from \"examples/Charts/BarCharts/ReportsBarChart\";\r\nimport ComplexStatisticsCard from \"examples/Cards/StatisticsCards/ComplexStatisticsCard\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { Link } from 'react-router-dom';\r\nimport Icon from \"@mui/material/Icon\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport GHeaders from \"getHeader\";\r\n// import MDButton from \"components/MDButton\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction Dashboard() {\r\n  const MySwal = withReactContent(Swal);\r\n  const [card, setItems] = useState([]);\r\n  const [itemsx, setItemsx] = useState([]);\r\n\r\n  const [noOfUsers, setNoOfUsers] = useState(0);\r\n  const [remPayDay, setRemPayDay] = useState(0);\r\n  // const [groupGet, setGroupGet] = useState([]);\r\n  const [polls, setPolls] = useState([]);\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [empTOR, setEmpTOR] = useState([]);\r\n\r\n  const [showApp, setShowApp] = useState(false);\r\n  const [showBirth, setShowBirth] = useState(false);\r\n  const [showAnn, setShowAnn] = useState(false);\r\n  const [showTOR, setShowTOR] = useState(false);\r\n  const [showPolls, setShowPolls] = useState(false);\r\n\r\n  const [resulty, setResult] = useState([]);\r\n  // console.log(resulty);\r\n  const [userNamex, setUserNamex] = useState(\"\");\r\n  const [amountx, setAmount] = useState(\"\");\r\n  const [numOfWork, setNumOfWork] = useState(\"\");\r\n  const [grading, setGrading] = useState(\"\");\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const navigate = useNavigate();\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const scrollContainerStyle = { width: \"100%\", maxHeight: \"60%\" };\r\n  // const grader = { grading };\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.id;\r\n\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/result/getEmpAverageResult/${orgIDs}/${personalIds}`,\r\n      {\r\n        headers,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setGrading(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const birthStatus = JSON.parse(localStorage.getItem(\"BirthDayStatus\"));\r\n    // console.log(setNumOfWork);\r\n\r\n    const userOData = JSON.parse(localStorage.getItem(\"userOtherDets\"));\r\n\r\n    const userFullName = `${userOData.personal.fname} ${userOData.personal.lname}`;\r\n    // console.log(userFullName);\r\n\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      if (birthStatus === true) {\r\n        MySwal.fire({\r\n          title: \"Happy Birthday\",\r\n          icon: \"info\",\r\n          type: \"info\",\r\n          text: `Happy Birthday ${userFullName}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/getCurrent/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length > 0) {\r\n            setShowAnn(true);\r\n          }\r\n          setItems(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.personalID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/getForEmp/${orgIDs}/${personalIds}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length !== 0) {\r\n            let groupIDs = \"\";\r\n            // eslint-disable-next-line array-callback-return\r\n            result.map((grp) => {\r\n              const idcheck = `${grp.group.id},`;\r\n              groupIDs += idcheck;\r\n            });\r\n            fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getForDashboard/${groupIDs}`, {\r\n              headers,\r\n            })\r\n              .then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              })\r\n              .then((resultx) => {\r\n                if (resultx.message === \"Expired Access\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                  window.location.reload();\r\n                }\r\n                if (resultx.message === \"Token Does Not Exist\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                  window.location.reload();\r\n                }\r\n                if (resultx.message === \"Unauthorized Access\") {\r\n                  navigate(\"/authentication/forbiddenPage\");\r\n                  window.location.reload();\r\n                }\r\n                if (isMounted) {\r\n                  if (result.length > 0) {\r\n                    setShowPolls(true);\r\n                  }\r\n                  setPolls(resultx);\r\n                }\r\n              });\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.id;\r\n\r\n    const userOData = JSON.parse(localStorage.getItem(\"userOtherDets\"));\r\n    const userNamexx = `${userOData.personal.fname} ${userOData.personal.lname}`;\r\n    setUserNamex(userNamexx);\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_SHASHA_URL}/concern/getForEmpDashboard/${orgIDs}/${personalIds}`,\r\n      {\r\n        headers,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // if (result.length > 0) {\r\n          //   setShowApp(true);\r\n          // }\r\n          setResult(result);\r\n          // console.log(setResult);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.personalID;\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_SHASHA_URL}/appraisal/getForAppraiser/${orgIDs}/${personalIds}`,\r\n      {\r\n        headers,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length > 0) {\r\n            setShowApp(true);\r\n          }\r\n          setAllApp(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.personalID;\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/getForEmpDashboard/${orgIDs}/${personalIds}`,\r\n      { headers }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length > 0) {\r\n            setShowTOR(true);\r\n          }\r\n          setEmpTOR(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // function getFirstDayOfMonth(year, month) {\r\n    //   return new Date(year, month, 1);\r\n    // }\r\n\r\n    // 👇️ First day of CURRENT MONTH\r\n    const date = new Date();\r\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\r\n    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime();\r\n    // console.log(lastDay);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_NSUTANA_URL}/freedays/getBetween/${orgIDs}/${firstDay}/${lastDay}`,\r\n      { headers }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          const totalFreeDays = result.length;\r\n          const totalDays = (lastDay - firstDay) / 86400000;\r\n          const finalTotalDays = totalDays - totalFreeDays + 1;\r\n          // console.log(totalDays);\r\n          // console.log(totalFreeDays);\r\n\r\n          const clastDay = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\r\n\r\n          // console.log(lastDayx);\r\n          // console.log(firstDays);\r\n          // console.log(date.getFullYear());\r\n          // console.log(clastDay);\r\n\r\n          fetch(\r\n            `${process.env.REACT_APP_NSUTANA_URL}/freedays/getBetween/${orgIDs}/${firstDay}/${clastDay}`,\r\n            { headers }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((cresult) => {\r\n              if (cresult.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n                window.location.reload();\r\n              }\r\n              if (cresult.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n                window.location.reload();\r\n              }\r\n              if (cresult.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n                window.location.reload();\r\n              }\r\n              const ctotalFreeDays = cresult.length;\r\n              const ctotalDays = (clastDay - firstDay) / 86400000;\r\n              const cfinalTotalDays = ctotalDays - ctotalFreeDays + 1;\r\n              const now = `${cfinalTotalDays}/${finalTotalDays}`;\r\n              setNumOfWork(now);\r\n              // console.log(ctotalDays);\r\n              // console.log(ctotalFreeDays);\r\n\r\n              // console.log(firstDay);\r\n              // console.log(lastDay);\r\n              // console.log(clastDay);\r\n            });\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getNoOfUsers/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setNoOfUsers(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/remunerationTime/getNext/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length > 0) {\r\n            setShowAnn(true);\r\n          }\r\n          const curDate = new Date();\r\n          const payDate = new Date(result.payTime);\r\n\r\n          const curDay = curDate.getDate();\r\n          const payDay = payDate.getDate();\r\n          const remDays = payDay - curDay;\r\n          setRemPayDay(remDays);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // const CurTime = new Date().getTime();\r\n    const Month = new Date().getMonth() + 1;\r\n    const Dates = new Date().getDate();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getBirthdaysToday/${orgIDs}/${Dates}/${Month}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (result.length > 0) {\r\n            setShowBirth(true);\r\n          }\r\n          setItemsx(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    console.log(\"first day\");\r\n    // const headers = myHeaders;\r\n    // function getFirstDayOfMonth(year, month) {\r\n    //   return new Date(year, month, 1);\r\n    // }\r\n\r\n    // 👇️ First day of CURRENT MONTH\r\n    const date = new Date();\r\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\r\n    const curDay = new Date().getTime();\r\n    console.log(firstDay);\r\n    console.log(curDay);\r\n    // const curDate = new Date();\r\n\r\n    // const curDay = curDate.getDate();\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.personalID;\r\n\r\n    const raw = JSON.stringify({\r\n      userID: personalIds,\r\n      orgID: orgIDs,\r\n      startTime: 1655074800000,\r\n      endTime: 1655161200000,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    console.log(\"second day\");\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/audit/getFilter`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setOpened(false);\r\n          let priceByUser = 0;\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            if (item.price < 1) {\r\n              console.log(priceByUser);\r\n              priceByUser += item.price;\r\n            }\r\n          });\r\n          console.log(\"result\");\r\n          console.log(result);\r\n          console.log(priceByUser);\r\n          setAmount(priceByUser);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleAppraise = (value) => {\r\n    navigate(`/Appraisal-Question-and-Answers?id=${value}`);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox py={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <Link to=\"/user-Management\">\r\n                <ComplexStatisticsCard\r\n                  color=\"info\"\r\n                  icon=\"people\"\r\n                  title=\"No Of Users\"\r\n                  count={noOfUsers}\r\n                  percentage={{\r\n                    color: \"success\",\r\n                    amount: \"+55%\",\r\n                    label: \"than lask week\",\r\n                  }}\r\n                />\r\n              </Link>\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"dark\"\r\n                icon=\"payments\"\r\n                title=\"Amount Spent By The Users\"\r\n                count={amountx}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"success\"\r\n                icon=\"schedule\"\r\n                title=\"Daily Countdown To Pay Day\"\r\n                count={remPayDay}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"primary\"\r\n                icon=\"calendar_month\"\r\n                title=\"Number of Working Day(s)\"\r\n                count={numOfWork}\r\n                percentage={{\r\n                  color: \"success\",\r\n                  // amount: \"+1%\",\r\n                  // label: \"than yesterday\",\r\n                }}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n        </Grid>\r\n        <MDBox mt={4.5}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6} lg={6}>\r\n              <Card>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mt={2}\r\n                  mb={5}\r\n                  mx={0}\r\n                  p={1}\r\n                  textAlign=\"left\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Appraisal Score\r\n                  </MDTypography>\r\n                </MDBox>\r\n                &nbsp;\r\n                <MDBox mb={5}>\r\n                  <ProgressBar\r\n                    now={grading.score}\r\n                    variant={grading.colorCode}\r\n                    label={`${grading.score}%`}\r\n                  />\r\n                </MDBox>\r\n              </Card>\r\n              &nbsp;\r\n            </Grid>\r\n            <Grid item xs={6} md={3} lg={6}>\r\n              {showBirth ? (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"bold\"\r\n                    color=\"white\"\r\n                    textAlign=\"left\"\r\n                    mt={1}\r\n                  >\r\n                    &nbsp; Birthdays\r\n                  </MDTypography>\r\n                  &nbsp;\r\n                  <div\r\n                    className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                    style={scrollContainerStyle}\r\n                  >\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        {itemsx.map((item) => (\r\n                          <Grid item xs={12} md={12} lg={12} key={item.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                              <CardContent>\r\n                                <MDTypography\r\n                                  variant=\"h5\"\r\n                                  fontWeight=\"medium\"\r\n                                  fontSize=\"120%\"\r\n                                  color=\"info\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  {item.personal.fname} &nbsp; {item.personal.lname}\r\n                                </MDTypography>\r\n                                {/* <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  You have been selected for this Appraisal\r\n                                </MDTypography> */}\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  Phone Number - {item.personal.pno}\r\n                                </MDTypography>\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={0}\r\n                                >\r\n                                  Country - {item.personal.residentialCountry}\r\n                                </MDTypography>\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={0}\r\n                                >\r\n                                  Marital Status - {item.personal.maritalStatus}\r\n                                </MDTypography>\r\n                              </CardContent>\r\n                              {/* <CardActions>\r\n                                <div align=\"right\">\r\n                                  <MDButton\r\n                                    variant=\"gradient\"\r\n                                    color=\"info\"\r\n                                    onClick={() => handleAppraise(item.id)}\r\n                                    width=\"50%\"\r\n                                  >\r\n                                    Appraise\r\n                                  </MDButton>\r\n                                </div>\r\n                              </CardActions> */}\r\n                            </Card>\r\n                            &nbsp;\r\n                          </Grid>\r\n                        ))}\r\n                      </div>\r\n                    </Container>\r\n                  </div>\r\n                  &nbsp;\r\n                </Card>\r\n              ) : (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  {\" \"}\r\n                  <MDTypography\r\n                    variant=\"h3\"\r\n                    fontWeight=\"bold\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    No Birthdays Today\r\n                  </MDTypography>\r\n                  <Icon\r\n                    fontSize=\"medium\"\r\n                    sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                    color=\"disabled\"\r\n                  >\r\n                    sentiment_dissatisfied\r\n                  </Icon>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n        <MDBox>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6} lg={4}>\r\n              <MDBox>\r\n                {showAnn ? (\r\n                  <Grid container spacing={0}>\r\n                    <Card sx={{ maxHeight: 350 }}>\r\n                      <MDBox\r\n                        variant=\"gradient\"\r\n                        bgColor=\"info\"\r\n                        borderRadius=\"lg\"\r\n                        coloredShadow=\"success\"\r\n                        mt={2}\r\n                        mx={0}\r\n                        p={1}\r\n                        textAlign=\"left\"\r\n                      >\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          fontWeight=\"medium\"\r\n                          color=\"white\"\r\n                          textAlign=\"center\"\r\n                          mt={1}\r\n                        >\r\n                          Announcements\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <div\r\n                        className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                        style={scrollContainerStyle}\r\n                      >\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            {card.map((api) => (\r\n                              <Grid item xs={12} md={12} lg={12} key={api.announcement.id}>\r\n                                <div>\r\n                                  <Accordion\r\n                                    style={{ backgroundColor: api.announcementType.colorCode }}\r\n                                  >\r\n                                    <AccordionSummary\r\n                                      expandIcon={<ExpandMoreIcon />}\r\n                                      aria-controls=\"panel1a-content\"\r\n                                      id=\"panel1a-header\"\r\n                                    >\r\n                                      <img\r\n                                        src={api.announcementType.icon}\r\n                                        alt=\"Icon\"\r\n                                        width=\"62\"\r\n                                        height=\"62\"\r\n                                      />\r\n                                      &nbsp; &nbsp;\r\n                                      <MDTypography\r\n                                        variant=\"h4\"\r\n                                        fontWeight=\"medium\"\r\n                                        color=\"white\"\r\n                                        textAlign=\"left\"\r\n                                        mt={1}\r\n                                      >\r\n                                        {api.announcement.title}\r\n                                      </MDTypography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                      <div style={{ color: \"#f5f5f5\" }}>\r\n                                        {api.announcement.message}\r\n                                      </div>\r\n                                    </AccordionDetails>\r\n                                  </Accordion>\r\n                                  <br />\r\n                                </div>\r\n                              </Grid>\r\n                            ))}\r\n                          </div>\r\n                        </Container>\r\n                      </div>\r\n                    </Card>\r\n                  </Grid>\r\n                ) : (\r\n                  <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                    {\" \"}\r\n                    <MDTypography\r\n                      variant=\"h3\"\r\n                      fontWeight=\"bold\"\r\n                      color=\"white\"\r\n                      textAlign=\"center\"\r\n                      mt={1}\r\n                    >\r\n                      No Announcement At The Moment\r\n                    </MDTypography>\r\n                    <Icon\r\n                      fontSize=\"medium\"\r\n                      sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                      color=\"disabled\"\r\n                    >\r\n                      sentiment_dissatisfied\r\n                    </Icon>\r\n                  </Card>\r\n                )}\r\n              </MDBox>\r\n            </Grid>\r\n            <Grid item xs={6} md={3} lg={4}>\r\n              {showTOR ? (\r\n                <Card sx={{ maxHeight: 350 }}>\r\n                  <MDBox\r\n                    variant=\"gradient\"\r\n                    bgColor=\"info\"\r\n                    borderRadius=\"lg\"\r\n                    coloredShadow=\"success\"\r\n                    mt={2}\r\n                    mx={0}\r\n                    p={1}\r\n                    textAlign=\"left\"\r\n                  >\r\n                    <MDTypography\r\n                      variant=\"h4\"\r\n                      fontWeight=\"medium\"\r\n                      color=\"white\"\r\n                      textAlign=\"center\"\r\n                      mt={1}\r\n                    >\r\n                      Time-Off Request\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <div\r\n                    className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                    style={scrollContainerStyle}\r\n                  >\r\n                    <MDBox mb={1.5}>\r\n                      <Container>\r\n                        <div className=\"row\">\r\n                          {empTOR.map((item) => (\r\n                            <Grid container spacing={0} key={item.id}>\r\n                              <Grid item xs={12} md={12} lg={12}>\r\n                                {/* <Link to={`/polls/vote-Polls?id=${api.id}`}> */}\r\n                                <Card style={{ backgroundColor: \"#318CE7\" }}>\r\n                                  <CardContent>\r\n                                    <MDTypography\r\n                                      variant=\"h6\"\r\n                                      color=\"white\"\r\n                                      fontSize=\"75%\"\r\n                                      textAlign=\"left\"\r\n                                      mt={1}\r\n                                    >\r\n                                      Employee - {item.empName}\r\n                                    </MDTypography>\r\n                                    <MDTypography\r\n                                      variant=\"h6\"\r\n                                      color=\"white\"\r\n                                      fontSize=\"75%\"\r\n                                      textAlign=\"left\"\r\n                                      mt={0}\r\n                                    >\r\n                                      Date Requested - {item.noOfDaysRequested}\r\n                                    </MDTypography>\r\n                                    <MDTypography\r\n                                      variant=\"h6\"\r\n                                      color=\"white\"\r\n                                      fontSize=\"75%\"\r\n                                      textAlign=\"left\"\r\n                                      mt={0}\r\n                                    >\r\n                                      Reason - {item.purpose}\r\n                                    </MDTypography>\r\n                                  </CardContent>\r\n                                </Card>{\" \"}\r\n                                &nbsp; &nbsp;\r\n                                {/* </Link> */}\r\n                              </Grid>\r\n                            </Grid>\r\n                          ))}\r\n                        </div>\r\n                      </Container>\r\n                    </MDBox>\r\n                  </div>\r\n                </Card>\r\n              ) : (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  {\" \"}\r\n                  <MDTypography\r\n                    variant=\"h3\"\r\n                    fontWeight=\"bold\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    No Time-Off Requests At The Moment\r\n                  </MDTypography>\r\n                  <Icon\r\n                    fontSize=\"medium\"\r\n                    sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                    color=\"disabled\"\r\n                  >\r\n                    sentiment_dissatisfied\r\n                  </Icon>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6} md={3} lg={4}>\r\n              <Card sx={{ maxHeight: 350 }}>\r\n                <div\r\n                  className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                  style={scrollContainerStyle}\r\n                >\r\n                  <MDBox mb={1.5}>\r\n                    <MDBox\r\n                      variant=\"gradient\"\r\n                      bgColor=\"info\"\r\n                      borderRadius=\"lg\"\r\n                      coloredShadow=\"success\"\r\n                      mt={2}\r\n                      mx={0}\r\n                      p={1}\r\n                      mb={3}\r\n                      textAlign=\"left\"\r\n                    >\r\n                      <MDTypography\r\n                        variant=\"h4\"\r\n                        fontWeight=\"medium\"\r\n                        color=\"white\"\r\n                        textAlign=\"center\"\r\n                        mt={1}\r\n                      >\r\n                        Matters Arising\r\n                      </MDTypography>\r\n                    </MDBox>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        {resulty.map((api) => (\r\n                          <Grid container spacing={0} key={api.id}>\r\n                            <Grid item xs={12} md={12} lg={12}>\r\n                              <MDBox mb={2}>\r\n                                <Link to={`/view-Matter?username=${userNamex}&room=${api.id}`}>\r\n                                  <Card style={{ backgroundColor: \"#318CE7\" }}>\r\n                                    <CardContent>\r\n                                      <MDTypography\r\n                                        variant=\"h4\"\r\n                                        fontWeight=\"medium\"\r\n                                        color=\"white\"\r\n                                        textAlign=\"left\"\r\n                                        mt={1}\r\n                                      >\r\n                                        {api.title}\r\n                                      </MDTypography>\r\n                                      <div\r\n                                        style={{\r\n                                          overflow: \"hidden\",\r\n                                          textOverflow: \"ellipsis\",\r\n                                          width: \"10rem\",\r\n                                          color: \"#f5f5f5\",\r\n                                          whiteSpace: \"nowrap\",\r\n                                          fontSize: \"80%\",\r\n                                        }}\r\n                                      >\r\n                                        <p>{api.message}</p>\r\n                                      </div>\r\n                                    </CardContent>\r\n                                  </Card>{\" \"}\r\n                                </Link>\r\n                              </MDBox>\r\n                              {/* <Link to={`/polls/vote-Polls?id=${api.id}`}>\r\n                              <Card style={{ backgroundColor: \"#318CE7\" }}>\r\n                                <CardContent>\r\n                                  <MDTypography\r\n                                    variant=\"h4\"\r\n                                    fontWeight=\"medium\"\r\n                                    color=\"white\"\r\n                                    textAlign=\"left\"\r\n                                    mt={1}\r\n                                  >\r\n                                    Poll\r\n                                  </MDTypography>\r\n                                  <div style={{ color: \"#f5f5f5\" }}>{api.question}</div>\r\n                                </CardContent>\r\n                              </Card>{\" \"}\r\n                              &nbsp; &nbsp;\r\n                            </Link> */}\r\n                            </Grid>\r\n                          </Grid>\r\n                        ))}\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </MDBox>\r\n      &nbsp;\r\n      <Container>\r\n        <div className=\"row\">\r\n          {/* <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={(e) => handleUpdate(e)}\r\n                // disabled={!enabled}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"right\"\r\n              >\r\n                Vote Poll\r\n              </MDButton>\r\n            </MDBox> */}\r\n        </div>\r\n      </Container>\r\n      <MDBox py={3}>\r\n        {/* <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"dark\"\r\n                icon=\"weekend\"\r\n                title=\"Bookings\"\r\n                count={281}\r\n                percentage={{\r\n                  color: \"success\",\r\n                  amount: \"+55%\",\r\n                  label: \"than lask week\",\r\n                }}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                icon=\"leaderboard\"\r\n                title=\"Today's Users\"\r\n                count=\"2,300\"\r\n                percentage={{\r\n                  color: \"success\",\r\n                  amount: \"+3%\",\r\n                  label: \"than last month\",\r\n                }}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"success\"\r\n                icon=\"store\"\r\n                title=\"Revenue\"\r\n                count=\"34k\"\r\n                percentage={{\r\n                  color: \"success\",\r\n                  amount: \"+1%\",\r\n                  label: \"than yesterday\",\r\n                }}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} lg={3}>\r\n            <MDBox mb={1.5}>\r\n              <ComplexStatisticsCard\r\n                color=\"primary\"\r\n                icon=\"person_add\"\r\n                title=\"Followers\"\r\n                count=\"+91\"\r\n                percentage={{\r\n                  color: \"success\",\r\n                  amount: \"\",\r\n                  label: \"Just updated\",\r\n                }}\r\n              />\r\n            </MDBox>\r\n          </Grid>\r\n        </Grid> */}\r\n        {/* <MDBox mt={4.5}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6} lg={4}>\r\n              <MDBox mb={3}>\r\n                <ReportsBarChart\r\n                  color=\"info\"\r\n                  title=\"website views\"\r\n                  description=\"Last Campaign Performance\"\r\n                  date=\"campaign sent 2 days ago\"\r\n                  chart={reportsBarChartData}\r\n                />\r\n              </MDBox>\r\n            </Grid>\r\n            <Grid item xs={12} md={6} lg={4}>\r\n              <MDBox mb={3}>\r\n                <ReportsLineChart\r\n                  color=\"success\"\r\n                  title=\"daily sales\"\r\n                  description={\r\n                    <>\r\n                      (<strong>+15%</strong>) increase in today sales.\r\n                    </>\r\n                  }\r\n                  date=\"updated 4 min ago\"\r\n                  chart={sales}\r\n                />\r\n              </MDBox>\r\n            </Grid>\r\n            <Grid item xs={12} md={6} lg={4}>\r\n              <MDBox mb={3}>\r\n                <ReportsLineChart\r\n                  color=\"dark\"\r\n                  title=\"completed tasks\"\r\n                  description=\"Last Campaign Performance\"\r\n                  date=\"just updated\"\r\n                  chart={tasks}\r\n                />\r\n              </MDBox>\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox> */}\r\n        <MDBox>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6} md={6} lg={6}>\r\n              {showApp ? (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  <MDBox\r\n                    variant=\"gradient\"\r\n                    bgColor=\"white\"\r\n                    borderRadius=\"lg\"\r\n                    coloredShadow=\"success\"\r\n                    mt={2}\r\n                    mx={0}\r\n                    p={1}\r\n                    textAlign=\"left\"\r\n                  >\r\n                    <MDTypography\r\n                      variant=\"h4\"\r\n                      fontWeight=\"medium\"\r\n                      color=\"info\"\r\n                      textAlign=\"center\"\r\n                      mt={1}\r\n                    >\r\n                      Appraisals\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  &nbsp;\r\n                  <div\r\n                    className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                    style={scrollContainerStyle}\r\n                  >\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        {allApp.map((item) => (\r\n                          <Grid item xs={12} md={12} lg={12} key={item.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                              <CardContent>\r\n                                <MDTypography\r\n                                  variant=\"h5\"\r\n                                  fontWeight=\"medium\"\r\n                                  fontSize=\"120%\"\r\n                                  color=\"info\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  {item.name}\r\n                                </MDTypography>\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  You have been selected for this Appraisal\r\n                                </MDTypography>\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={1}\r\n                                >\r\n                                  Appraisee - {item.appraiseeName}\r\n                                </MDTypography>\r\n                                <MDTypography\r\n                                  variant=\"h6\"\r\n                                  color=\"text\"\r\n                                  fontSize=\"75%\"\r\n                                  textAlign=\"left\"\r\n                                  mt={0}\r\n                                >\r\n                                  Created By - {item.createdByName}\r\n                                </MDTypography>\r\n                              </CardContent>\r\n                              <CardActions>\r\n                                <div align=\"right\">\r\n                                  <MDButton\r\n                                    variant=\"gradient\"\r\n                                    color=\"info\"\r\n                                    onClick={() => handleAppraise(item.id)}\r\n                                    width=\"50%\"\r\n                                  >\r\n                                    Appraise\r\n                                  </MDButton>\r\n                                </div>\r\n                              </CardActions>\r\n                            </Card>\r\n                            &nbsp;\r\n                          </Grid>\r\n                        ))}\r\n                      </div>\r\n                    </Container>\r\n                  </div>\r\n                  &nbsp;\r\n                </Card>\r\n              ) : (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  {\" \"}\r\n                  <MDTypography\r\n                    variant=\"h3\"\r\n                    fontWeight=\"bold\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    No Appraisal At The Moment\r\n                  </MDTypography>\r\n                  <Icon\r\n                    fontSize=\"medium\"\r\n                    sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                    color=\"disabled\"\r\n                  >\r\n                    sentiment_dissatisfied\r\n                  </Icon>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6} md={6} lg={6}>\r\n              {showPolls ? (\r\n                <Card sx={{ maxHeight: 350 }}>\r\n                  <div\r\n                    className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                    style={scrollContainerStyle}\r\n                  >\r\n                    <MDBox mb={1.5}>\r\n                      <Container>\r\n                        <div className=\"row\">\r\n                          {polls.map((api) => (\r\n                            <Grid container spacing={0} key={api.id}>\r\n                              <Grid item xs={12} md={12} lg={12}>\r\n                                <Link to={`/polls/vote-Polls?id=${api.id}`}>\r\n                                  <Card style={{ backgroundColor: \"#318CE7\" }}>\r\n                                    <CardContent>\r\n                                      <MDTypography\r\n                                        variant=\"h4\"\r\n                                        fontWeight=\"medium\"\r\n                                        color=\"white\"\r\n                                        textAlign=\"left\"\r\n                                        mt={1}\r\n                                      >\r\n                                        Poll\r\n                                      </MDTypography>\r\n                                      <div style={{ color: \"#f5f5f5\" }}>{api.question}</div>\r\n                                    </CardContent>\r\n                                  </Card>{\" \"}\r\n                                  &nbsp; &nbsp;\r\n                                </Link>\r\n                              </Grid>\r\n                            </Grid>\r\n                          ))}\r\n                        </div>\r\n                      </Container>\r\n                    </MDBox>\r\n                  </div>\r\n                </Card>\r\n              ) : (\r\n                <Card style={{ backgroundColor: \"#318CE7\", maxHeight: 350 }}>\r\n                  {\" \"}\r\n                  <MDTypography\r\n                    variant=\"h3\"\r\n                    fontWeight=\"bold\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    No Poll At The Moment\r\n                  </MDTypography>\r\n                  <Icon\r\n                    fontSize=\"medium\"\r\n                    sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                    color=\"disabled\"\r\n                  >\r\n                    sentiment_dissatisfied\r\n                  </Icon>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </MDBox>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js",["1227"],"import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// import Footer from \"examples/Footer\";\r\n// import DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\n// import MDBox from \"components/MDBox\";\r\n// import Card from \"@mui/material/Card\";\r\n// import MDButton from \"components/MDButton\";\r\n\r\n// import { Container } from \"react-bootstrap\";\r\n// import Emojis from \"./emoji\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction Chat({ socket, username, room }) {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const { emoticons: allEmojis } = Emojis();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const [titlex, setTitlex] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const messageMap = [];\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernID = urlParams.get(\"room\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/getForConcern/${concernID}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            const fdy = {\r\n              id: item.id,\r\n              room: concernID,\r\n              author: item.senderName,\r\n              message: item.message,\r\n              time: `${new Date(item.createdTime).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n            };\r\n            messageMap.push(fdy);\r\n          });\r\n          setMessageList(messageMap);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        id: messageList.length + 1,\r\n        room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time: `${new Date(Date.now()).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n      };\r\n\r\n      // eslint-disable-next-line react/prop-types\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      const orgIDs = data11.orgID;\r\n      const personalIDs = data11.personalID;\r\n\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        concernID: room,\r\n        message: currentMessage,\r\n        senderID: personalIDs,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/save`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"room\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/getByIds/${ids}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setTitlex(result[0].title);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    // eslint-disable-next-line react/prop-types\r\n    socket.on(\"receive_message\", (data) => {\r\n      if (isMounted) {\r\n        setMessageList((list) => [...list, data]);\r\n        console.log(data);\r\n      }\r\n    });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-header\">\r\n          <div\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              width: \"30rem\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            <p>{titlex}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-body\">\r\n          <ScrollToBottom className=\"message-container\">\r\n            {messageList.map((messageContent) => (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"other\" : \"you\"}\r\n                key={messageContent.id}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ScrollToBottom>\r\n        </div>\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={currentMessage}\r\n            placeholder=\"Type Message...\"\r\n            onChange={(event) => {\r\n              setCurrentMessage(event.target.value);\r\n            }}\r\n            onKeyPress={(event) => {\r\n              // eslint-disable-next-line no-unused-expressions\r\n              event.key === \"Enter\" && sendMessage();\r\n            }}\r\n          />\r\n          <button type=\"button\" onClick={sendMessage}>\r\n            send\r\n          </button>\r\n        </div>\r\n        {/* <ScrollToBottom className=\"emoji-container\">\r\n          <Container>\r\n            <div className=\"row\">\r\n              {allEmojis.map((apis) => (\r\n                <div key={apis.emoji} value={apis.emoji} className=\"col-sm-1\">\r\n                  <button type=\"button\">{apis.emoji}</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Container>\r\n        </ScrollToBottom> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\postHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\getHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companystatustype\\data\\companystatustype.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Footer\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalQuestions\\data\\AQuestionsTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisalGrading\\data\\appraisalGradingData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\countries-states-master\\countries.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryProrate\\data\\salaryProrateTable.js",["1228"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function SalaryProrateData() {\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  // const axios = require(\"axios\");\r\n  const [items, setItems] = useState([]);\r\n  // const [id, setId] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  // Method to handle diable\r\n  const handleDisable = (val) => {\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        const requestOptions = {\r\n          method: \"DELETE\",\r\n          headers: miHeaders,\r\n        };\r\n\r\n        fetch(\r\n          `${process.env.REACT_APP_TANTA_URL}/prorateRemuneration/delete/${val}`,\r\n          requestOptions\r\n        )\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resx) => {\r\n            // if (resx.message === \"Expired Access\") {\r\n            //   navigate(\"/authentication/sign-in\");\r\n            // }\r\n            // if (resx.message === \"Token Does Not Exist\") {\r\n            //   navigate(\"/authentication/sign-in\");\r\n            // }\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n              window.location.reload();\r\n            }\r\n            MySwal.fire({\r\n              title: resx.status,\r\n              type: \"success\",\r\n              text: resx.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeBranchDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  // Method to change type\r\n  // eslint-disable-next-line consistent-return\r\n  const changeStat = (status) => {\r\n    if (status === 0) {\r\n      return \"Opened\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (status === 1) {\r\n      return \"Closed\";\r\n      // eslint-disable-next-line no-else-return\r\n    }\r\n  };\r\n\r\n  const handleView = (value) => {\r\n    navigate(`/view-Salary-Prorate?id=${value}`);\r\n  };\r\n\r\n  // Function to get cell value\r\n  // const getCellValue = (value) => {\r\n  //   setId(value);\r\n  // };\r\n  // Method to fetch all Branch\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/prorateRemuneration/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setItems(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"Employee's Name\", accessor: \"empName\", align: \"left\" },\r\n      { Header: \"Number Of Days\", accessor: \"noOfDays\", align: \"left\" },\r\n      { Header: \"Total Number Of Days\", accessor: \"totalNumberOfDays\", align: \"left\" },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"status\",\r\n        Cell: ({ cell: { value } }) => changeStat(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"createdTime\",\r\n        Cell: ({ cell: { value } }) => changeBranchDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"actions\",\r\n        accessor: \"id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#dadada\",\r\n              borderRadius: \"2px\",\r\n            }}\r\n          >\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => handleView(value)}>View/Update</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js",["1229","1230","1231"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nexport default function UserData() {\r\n  const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDisable = (pIDVal) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/getByPersonalID/${orgIDs}/${pIDVal}`)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultPC) => {\r\n        if (resultPC.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: \"Reason For Delete\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          html: `<div align=\"center\"><select id=\"reasonForDelete\" class=\"form-control\" aria-label=\"Default select example\" style=\"width:auto;\">\r\n          <option value=\"\">---Reason For Delete---</option>\r\n          <option value=\"Retired\">Retired</option>\r\n          <option value=\"Late\">Late</option>\r\n          <option value=\"Resigned\">Resigned</option>\r\n          <option value=\"Sacked\">Sacked</option>\r\n        </select></div>`,\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\",\r\n        }).then((resultD) => {\r\n          if (resultD.isConfirmed) {\r\n            const modalValue = document.getElementById(\"reasonForDelete\").value;\r\n            const requestOptions = {\r\n              method: \"DELETE\",\r\n              headers: miHeaders,\r\n            };\r\n            fetch(\r\n              `${process.env.REACT_APP_ZAVE_URL}/personalcompany/delete/${resultPC.id}/${modalValue}`,\r\n              requestOptions\r\n            )\r\n              .then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              })\r\n              .then((resx) => {\r\n                if (resx.message === \"Expired Access\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Token Does Not Exist\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Unauthorized Access\") {\r\n                  navigate(\"/authentication/forbiddenPage\");\r\n                }\r\n                MySwal.fire({\r\n                  title: resx.status,\r\n                  type: \"success\",\r\n                  text: resx.message,\r\n                }).then(() => {\r\n                  window.location.reload();\r\n                });\r\n              })\r\n              .catch((error) => {\r\n                MySwal.fire({\r\n                  title: error.status,\r\n                  type: \"error\",\r\n                  text: error.message,\r\n                });\r\n              });\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleView = (value) => {\r\n    navigate(`/user-Management/view-User?id=${value}`);\r\n  };\r\n  const handleAddTOT = (value) => {\r\n    navigate(`/user-Management/user-TimeOff-Type?id=${value}`);\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handlePasswordReset = (value) => {\r\n    const headers = miHeaders;\r\n    console.log(value);\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${value}`, { headers })\r\n      .then((res) => res.json())\r\n      .then((resultp) => {\r\n        const raw = JSON.stringify({\r\n          username: resultp[0].email,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        console.log(resultp);\r\n        if (resultp.length > 0) {\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/login/resetpassword/`, requestOptions)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resx) => {\r\n              if (resx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n              MySwal.fire({\r\n                title: resx.status,\r\n                type: \"success\",\r\n                text: resx.message,\r\n              }).then(() => {\r\n                window.location.reload();\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              MySwal.fire({\r\n                title: error.status,\r\n                type: \"error\",\r\n                text: error.message,\r\n              });\r\n            });\r\n        } else {\r\n          MySwal.fire({\r\n            title: \"NOT_FOUND\",\r\n            type: \"error\",\r\n            text: \"User Not Found\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n  // const handleAddsalary = (value) => {\r\n  //   navigate(`/user-Management/user-Salary`(value));\r\n  // };\r\n\r\n  const handleAddsalary = (value) => {\r\n    navigate(`/user-Management/user-Salary?id=${value}`);\r\n  };\r\n\r\n  const handleUpdateSystemRole = (value) => {\r\n    navigate(`/update-system-role?id=${value}`);\r\n  };\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"First Name\", accessor: \"personal.fname\", align: \"left\" },\r\n      { Header: \"Last Name\", accessor: \"personal.lname\", align: \"left\" },\r\n      { Header: \"Email\", accessor: \"personal.email\", align: \"left\" },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"personal.createdTime\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Actions\",\r\n        accessor: \"personal.id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#dadada\",\r\n                borderRadius: \"2px\",\r\n              }}\r\n            >\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                  <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => handleView(value)}>\r\n                    View/Add Office Details\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddTOT(value)}>\r\n                    Add Time-Off Type\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddsalary(value)}>User Salary</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleUpdateSystemRole(value)}>\r\n                    Change User&apos;s System Role\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handlePasswordReset(value)}>\r\n                    Reset Password\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salaryPayment\\salaryTime\\data\\salaryTimeTable.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\appraisal\\appraisal\\data\\appraisalData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\imgHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestJourney\\table\\timeOffJourneyAdd.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\nigeria.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\salary-advance\\data\\salaryAdvanceData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companyroles\\data\\companyRoles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeoffRequests\\timeOffRequestTable\\timeOffRequests.js",["1232"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function TimeOffRequestData() {\r\n  const MySwal = withReactContent(Swal);\r\n  const [items, setItems] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  // timeofftypedetails\r\n  // Method to handle diable\r\n  const handleUpdate = (\r\n    idx,\r\n    empSetupIdx,\r\n    daysx,\r\n    daysapprovex,\r\n    startx,\r\n    endx,\r\n    resumex,\r\n    dutyrelieverx,\r\n    createdx,\r\n    purposex,\r\n    deletex,\r\n    approvex,\r\n    adminx,\r\n    reasonx,\r\n    statusx,\r\n    empIDx\r\n  ) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIds = data11.personalID;\r\n\r\n    if (approvex !== personalIds) {\r\n      MySwal.fire({\r\n        title: \"PROCESS_DENIED\",\r\n        type: \"success\",\r\n        text: \"You Are Not Permitted To Approve This Request\",\r\n      }).then(() => {\r\n        window.location.reload();\r\n      });\r\n    } else if (reasonx !== null && reasonx !== \"\") {\r\n      MySwal.fire({\r\n        title: \"PROCESS_DENIED\",\r\n        type: \"success\",\r\n        text: \"Decision Already Made For This Request\",\r\n      }).then(() => {\r\n        window.location.reload();\r\n      });\r\n    } else {\r\n      const raw = JSON.stringify({\r\n        id: idx,\r\n        orgID: orgIDs,\r\n        empID: empIDx,\r\n        empSetupID: empSetupIdx,\r\n        noOfDaysRequested: daysx,\r\n        noOfDaysApproved: daysapprovex,\r\n        startDate: startx,\r\n        endDate: endx,\r\n        resumptionDate: resumex,\r\n        dutyRelieverID: dutyrelieverx,\r\n        createdDate: createdx,\r\n        purpose: purposex,\r\n        deleteFlag: deletex,\r\n        approverID: approvex,\r\n        adminID: adminx,\r\n        reasonForDisapproval: reasonx,\r\n        status: statusx,\r\n      });\r\n      console.log(raw);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/update`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            window.location.reload();\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  // const getCurrentDate = () => new Date().getTime();\r\n\r\n  // const changeUpdateDate = (timestamp) => {\r\n  //   const date = new Date(timestamp);\r\n  //   let month = \"0\";\r\n  //   if (date.getMonth() + 1 < 10) {\r\n  //     const mymonth = date.getMonth() + 1;\r\n  //     month += mymonth;\r\n  //   } else {\r\n  //     const mymonth = date.getMonth() + 1;\r\n  //     month = mymonth;\r\n  //   }\r\n  //   let day = \"0\";\r\n  //   if (date.getDate() < 10) {\r\n  //     day += date.getDate();\r\n  //   } else {\r\n  //     day = date.getDate();\r\n  //   }\r\n  //   const retDate = `${date.getFullYear()}-${month}-${day}`;\r\n  //   return retDate;\r\n  // };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    let empSetupIdx = \"\";\r\n    let empIDx = \"\";\r\n    let daysx = \"\";\r\n    let daysapprovex = \"\";\r\n    let startx = \"\";\r\n    let endx = \"\";\r\n    let resumex = \"\";\r\n    let dutyrelieverx = \"\";\r\n    let createdx = \"\";\r\n    let purposex = \"\";\r\n    let deletex = \"\";\r\n    let approvex = \"\";\r\n    let adminx = \"\";\r\n    let reasonx = \"\";\r\n    // Avoid filter for empty string\r\n    if (!value) {\r\n      empSetupIdx = \"\";\r\n      empIDx = \"\";\r\n      daysx = \"\";\r\n      daysapprovex = \"\";\r\n      startx = \"\";\r\n      endx = \"\";\r\n      resumex = \"\";\r\n      dutyrelieverx = \"\";\r\n      createdx = \"\";\r\n      purposex = \"\";\r\n      deletex = \"\";\r\n      approvex = \"\";\r\n      adminx = \"\";\r\n      reasonx = \"\";\r\n    } else {\r\n      const filteredItems = filteredData.filter((item) => item.id === value);\r\n      empSetupIdx = filteredItems[0].empSetupID;\r\n      empIDx = filteredItems[0].empID;\r\n      daysx = filteredItems[0].noOfDaysRequested;\r\n      daysapprovex = filteredItems[0].noOfDaysApproved;\r\n      startx = filteredItems[0].startDate;\r\n      endx = filteredItems[0].endDate;\r\n      resumex = filteredItems[0].resumptionDate;\r\n      dutyrelieverx = filteredItems[0].dutyRelieverID;\r\n      createdx = filteredItems[0].createdDate;\r\n      purposex = filteredItems[0].purpose;\r\n      deletex = filteredItems[0].deleteFlag;\r\n      approvex = filteredItems[0].approverID;\r\n      adminx = filteredItems[0].adminID;\r\n      reasonx = filteredItems[0].reasonForDisapproval;\r\n    }\r\n    // const sDate = new Date(startx);\r\n    // startx = sDate.getDate();\r\n    // const eDate = new Date(endx);\r\n    // endx = eDate.getDate();\r\n\r\n    // const changeTime = (timestamp) => {\r\n    //   const startDate = new Date(timestamp);\r\n    //   const retTime = startDate.toDateString();\r\n    //   return retTime;\r\n    // };\r\n\r\n    MySwal.fire({\r\n      title: \"Approve Time-Off Request\",\r\n      html: `<table><tr><td>\r\n      <tr><td><label for=\"days\">Days Requested</label></td>\r\n      <td><input type=\"text\" class=\"swal2-input\" id=\"days\" value=\"${daysx}\" placeholder=\"Days Requested\" disabled></td></tr><br>\r\n      <tr><td><br></td></tr>\r\n      <tr><td><label for=\"daysapproved\">Days Approved</label></td>\r\n      <td><input type=\"text\" class=\"swal2-input\" id=\"daysapproved\" value=\"${daysapprovex}\" placeholder=\"Purpose\"></td></tr></table>`,\r\n      confirmButtonText: \"Save\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      preConfirm: () => {\r\n        const daysRequested = Swal.getPopup().querySelector(\"#days\").value;\r\n        const daysapproved = Swal.getPopup().querySelector(\"#daysapproved\").value;\r\n        const id = value;\r\n        const numbers = /^[0-9]+$/;\r\n        if (daysapproved <= 0 && !daysapproved.match(numbers)) {\r\n          Swal.showValidationMessage(`Please enter a number`);\r\n        } else {\r\n          handleUpdate(\r\n            id,\r\n            empSetupIdx,\r\n            daysRequested,\r\n            daysapproved,\r\n            startx,\r\n            endx,\r\n            resumex,\r\n            dutyrelieverx,\r\n            createdx,\r\n            purposex,\r\n            deletex,\r\n            approvex,\r\n            adminx,\r\n            reasonx,\r\n            1,\r\n            empIDx\r\n          );\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  // Method to handle diable\r\n  const handleDisable = (id) => {\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        const requestOptions = {\r\n          method: \"DELETE\",\r\n          headers: miHeaders,\r\n        };\r\n\r\n        fetch(\r\n          `${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/delete/${id}`,\r\n          requestOptions\r\n        )\r\n          .then((res) => res.json())\r\n          .then((resx) => {\r\n            if (resx.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            MySwal.fire({\r\n              title: resx.status,\r\n              type: \"success\",\r\n              text: resx.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Method to change type\r\n  const changeType = (status) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const filteredItems = items.filter((item) => item.id === status);\r\n    if (filteredItems[0].status === \"2\") {\r\n      return \"Decision Made\";\r\n    }\r\n    if (filteredItems[0].status === \"2\") {\r\n      return MySwal.fire({\r\n        title: \"Timeoff Request\",\r\n        type: \"success\",\r\n        text: \"Time off Request Approved\",\r\n      });\r\n    }\r\n    if (filteredItems[0].status === \"1\") {\r\n      return \"Decision Made\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (filteredItems[0].status === \"0\" && filteredItems[0].empID === personalIds) {\r\n      return \"Created\";\r\n    } else {\r\n      return \"Requires Attention\";\r\n    }\r\n  };\r\n\r\n  const changeCol = (status) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const filteredItems = items.filter((item) => item.id === status);\r\n    if (filteredItems[0].status === \"2\") {\r\n      return \"#FAFA33\";\r\n    }\r\n    if (filteredItems[0].status === \"1\") {\r\n      return \"#FAFA33\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (filteredItems[0].status === \"0\" && filteredItems[0].empID === personalIds) {\r\n      return \"#0096FF\";\r\n    } else {\r\n      return \"#FF0000\";\r\n    }\r\n  };\r\n\r\n  // Method to fetch all timeofftype\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    if (\r\n      data11.roleID !== \"0\" &&\r\n      data11.roleID !== \"\" &&\r\n      data11.roleID !== \"null\" &&\r\n      data11.roleID !== null\r\n    ) {\r\n      fetch(\r\n        `${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/getAllForEmp/${orgIDs}/${personalIds}`,\r\n        { headers }\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          if (isMounted) {\r\n            setItems(result);\r\n          }\r\n        });\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/getAll/${orgIDs}`, {\r\n        headers,\r\n      })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resultx) => {\r\n          if (resultx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (resultx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (resultx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          if (isMounted) {\r\n            setItems(resultx);\r\n          }\r\n        });\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  // const handleApprove = () => {\r\n  //   const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n  //   // const ids = data11.id;\r\n  //   const personalIds = data11.id;\r\n  //   const orgIDs = data11.orgID;\r\n\r\n  //   const raw = JSON.stringify({\r\n  //     id: idx,\r\n  //     orgID: orgIDs,\r\n  //     empID: personalIds,\r\n  //     empSetupID: empSetupIdx,\r\n  //     noOfDaysRequested: daysx,\r\n  //     noOfDaysApproved: daysapprovex,\r\n  //     startDate: startx,\r\n  //     endDate: endx,\r\n  //     resumptionDate: resumex,\r\n  //     dutyRelieverID: dutyrelieverx,\r\n  //     createdDate: createdx,\r\n  //     purpose: purposex,\r\n  //     deleteFlag: deletex,\r\n  //     approverID: approvex,\r\n  //     adminID: adminx,\r\n  //     reasonForDisapproval: reasonx,\r\n  //   });\r\n  //   const requestOptions = {\r\n  //     method: \"POST\",\r\n  //     headers: myHeaders,\r\n  //     body: raw,\r\n  //     redirect: \"follow\",\r\n  //   };\r\n\r\n  //   fetch(`${process.env.REACT_APP_NSUTANA_URL}/employeetimeofftransaction/update`, requestOptions)\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((result) => {\r\n  //       // setOpened(false);\r\n  //       if (result.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       MySwal.fire({\r\n  //         title: result.status,\r\n  //         type: \"success\",\r\n  //         text: result.message,\r\n  //       }).then(() => {\r\n  //         window.location.reload();\r\n  //       });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       // setOpened(false);\r\n  //       MySwal.fire({\r\n  //         title: error.status,\r\n  //         type: \"error\",\r\n  //         text: error.message,\r\n  //       });\r\n  //     });\r\n  // };\r\n\r\n  // const eTOTId = {};\r\n  // const raw2 = JSON.stringify({\r\n  //   employeeTimeOffTransactionID: eTOTId.data.id,\r\n  // });\r\n  // console.log(raw2);\r\n  // const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n  // const => employeeTimeOffTransactionID;\r\n\r\n  // let eTOTId = employeeTimeOffTransactionID;\r\n\r\n  // const handleJourney = (eTOTId) => {\r\n  //   navigate(`/timeoffRequests/timeOffRequestJourney?id=${eTOTId}`);\r\n  // };\r\n\r\n  const handleDisapprove = (value) => {\r\n    navigate(`/timeoff-Requests/disapprove?id=${value}`);\r\n  };\r\n\r\n  // Return table\r\n  return {\r\n    columns: [\r\n      { Header: \"Employee's Name\", accessor: \"empName\", align: \"left\" },\r\n      { Header: \"Duty Reliever's Name\", accessor: \"dutyRelieverName\", align: \"left\" },\r\n      { Header: \"Approver's Name\", accessor: \"approverName\", align: \"left\" },\r\n      { Header: \"Days Requested\", accessor: \"noOfDaysRequested\", align: \"left\" },\r\n      { Header: \"Days Approved\", accessor: \"noOfDaysApproved\", align: \"left\" },\r\n      {\r\n        Header: \"Start Date\",\r\n        accessor: \"startDate\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"End Date\",\r\n        accessor: \"endDate\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      { Header: \"Purpose\", accessor: \"purpose\", align: \"left\" },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"empSetupID\",\r\n        Cell: ({ cell: { row } }) => (\r\n          <span\r\n            className=\"badge badge-pill\"\r\n            style={{ backgroundColor: changeCol(row.original.id) }}\r\n          >\r\n            {changeType(row.original.id)}\r\n          </span>\r\n        ),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"actions\",\r\n        accessor: \"id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#f5f5f5\",\r\n              borderRadius: \"2px\",\r\n            }}\r\n          >\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  onClick={() =>\r\n                    navigate(`/time-off-Requests/update-time-off-Requests?id=${value}`)\r\n                  }\r\n                >\r\n                  Update\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleShow(items, value)}>Approve</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleDisapprove(value)}>Disapprove</Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => navigate(`/timeoff-Requests/timeOff-Request-Journey?id=${value}`)}\r\n                >\r\n                  Time Off Request Journey\r\n                </Dropdown.Item>\r\n                {/* <Dropdown.Item onClick={() => navigate(`/timeoffRequests/view?id=${value}`)}>\r\n                  View\r\n                </Dropdown.Item> */}\r\n                <Dropdown.Item\r\n                  onClick={() => navigate(`/timeoff-Requests/forward-TimeOff-Requests?id=${value}`)}\r\n                >\r\n                  Forward Time Off Request\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n        ),\r\n        align: \"left\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\addDetailsToTimeOffType\\adddetailstable.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\timeofftype\\data\\timeofftype.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\companysteps\\data\\companySteps.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\link.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\container.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\index.js",["1233","1234","1235","1236","1237"],{"ruleId":"1238","replacedBy":"1239"},{"ruleId":"1240","replacedBy":"1241"},{"ruleId":"1242","replacedBy":"1243"},{"ruleId":"1244","replacedBy":"1245"},{"ruleId":"1246","replacedBy":"1247"},{"ruleId":"1248","severity":1,"message":"1249","line":73,"column":11,"nodeType":"1250","messageId":"1251","endLine":73,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":104,"column":11,"nodeType":"1250","messageId":"1251","endLine":104,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":190,"column":13,"nodeType":"1250","messageId":"1251","endLine":190,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":191,"column":13,"nodeType":"1250","messageId":"1251","endLine":191,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":257,"column":23,"nodeType":"1250","messageId":"1251","endLine":257,"endColumn":34},{"ruleId":"1248","severity":1,"message":"1249","line":262,"column":19,"nodeType":"1250","messageId":"1251","endLine":262,"endColumn":30},{"ruleId":"1248","severity":1,"message":"1249","line":279,"column":9,"nodeType":"1250","messageId":"1251","endLine":279,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":206,"column":13,"nodeType":"1250","messageId":"1251","endLine":206,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":207,"column":13,"nodeType":"1250","messageId":"1251","endLine":207,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":208,"column":13,"nodeType":"1250","messageId":"1251","endLine":208,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":78,"column":11,"nodeType":"1250","messageId":"1251","endLine":78,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":85,"column":13,"nodeType":"1250","messageId":"1251","endLine":85,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":171,"column":9,"nodeType":"1250","messageId":"1251","endLine":171,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":180,"column":11,"nodeType":"1250","messageId":"1251","endLine":180,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":211,"column":5,"nodeType":"1250","messageId":"1251","endLine":211,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":288,"column":11,"nodeType":"1250","messageId":"1251","endLine":288,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":291,"column":9,"nodeType":"1250","messageId":"1251","endLine":291,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":298,"column":9,"nodeType":"1250","messageId":"1251","endLine":298,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":312,"column":13,"nodeType":"1250","messageId":"1251","endLine":312,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":508,"column":7,"nodeType":"1250","messageId":"1251","endLine":508,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":512,"column":5,"nodeType":"1250","messageId":"1251","endLine":512,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":513,"column":5,"nodeType":"1250","messageId":"1251","endLine":513,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":521,"column":7,"nodeType":"1250","messageId":"1251","endLine":521,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":525,"column":5,"nodeType":"1250","messageId":"1251","endLine":525,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":526,"column":5,"nodeType":"1250","messageId":"1251","endLine":526,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":554,"column":13,"nodeType":"1250","messageId":"1251","endLine":554,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":559,"column":7,"nodeType":"1250","messageId":"1251","endLine":559,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":568,"column":7,"nodeType":"1250","messageId":"1251","endLine":568,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":645,"column":17,"nodeType":"1250","messageId":"1251","endLine":645,"endColumn":28},{"ruleId":"1248","severity":1,"message":"1249","line":652,"column":7,"nodeType":"1250","messageId":"1251","endLine":652,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":661,"column":7,"nodeType":"1250","messageId":"1251","endLine":661,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":414,"column":11,"nodeType":"1250","messageId":"1251","endLine":414,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":458,"column":11,"nodeType":"1250","messageId":"1251","endLine":458,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":484,"column":15,"nodeType":"1250","messageId":"1251","endLine":484,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":496,"column":19,"nodeType":"1250","messageId":"1251","endLine":496,"endColumn":30},{"ruleId":"1248","severity":1,"message":"1249","line":1011,"column":5,"nodeType":"1250","messageId":"1251","endLine":1011,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":98,"column":11,"nodeType":"1250","messageId":"1251","endLine":98,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":592,"column":11,"nodeType":"1250","messageId":"1251","endLine":592,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":618,"column":15,"nodeType":"1250","messageId":"1251","endLine":618,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":630,"column":19,"nodeType":"1250","messageId":"1251","endLine":630,"endColumn":30},{"ruleId":"1248","severity":1,"message":"1249","line":97,"column":5,"nodeType":"1250","messageId":"1251","endLine":97,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":98,"column":5,"nodeType":"1250","messageId":"1251","endLine":98,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":99,"column":5,"nodeType":"1250","messageId":"1251","endLine":99,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":100,"column":5,"nodeType":"1250","messageId":"1251","endLine":100,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":101,"column":5,"nodeType":"1250","messageId":"1251","endLine":101,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":130,"column":11,"nodeType":"1250","messageId":"1251","endLine":130,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":159,"column":11,"nodeType":"1250","messageId":"1251","endLine":159,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":423,"column":11,"nodeType":"1250","messageId":"1251","endLine":423,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":445,"column":15,"nodeType":"1250","messageId":"1251","endLine":445,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":26,"column":3,"nodeType":"1250","messageId":"1251","endLine":26,"endColumn":14},{"ruleId":"1248","severity":1,"message":"1249","line":138,"column":13,"nodeType":"1250","messageId":"1251","endLine":138,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":142,"column":9,"nodeType":"1250","messageId":"1251","endLine":142,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":149,"column":9,"nodeType":"1250","messageId":"1251","endLine":149,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":191,"column":5,"nodeType":"1250","messageId":"1251","endLine":191,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":70,"column":11,"nodeType":"1250","messageId":"1251","endLine":70,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":74,"column":5,"nodeType":"1250","messageId":"1251","endLine":74,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":58,"column":11,"nodeType":"1250","messageId":"1251","endLine":58,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":40,"column":5,"nodeType":"1250","messageId":"1251","endLine":40,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":77,"column":11,"nodeType":"1250","messageId":"1251","endLine":77,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":80,"column":11,"nodeType":"1250","messageId":"1251","endLine":80,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":108,"column":11,"nodeType":"1250","messageId":"1251","endLine":108,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":111,"column":11,"nodeType":"1250","messageId":"1251","endLine":111,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":235,"column":13,"nodeType":"1250","messageId":"1251","endLine":235,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":236,"column":13,"nodeType":"1250","messageId":"1251","endLine":236,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":75,"column":11,"nodeType":"1250","messageId":"1251","endLine":75,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":234,"column":13,"nodeType":"1250","messageId":"1251","endLine":234,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":235,"column":13,"nodeType":"1250","messageId":"1251","endLine":235,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":100,"column":11,"nodeType":"1250","messageId":"1251","endLine":100,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":185,"column":9,"nodeType":"1250","messageId":"1251","endLine":185,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":308,"column":9,"nodeType":"1250","messageId":"1251","endLine":308,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":320,"column":13,"nodeType":"1250","messageId":"1251","endLine":320,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":362,"column":19,"nodeType":"1250","messageId":"1251","endLine":362,"endColumn":30},{"ruleId":"1248","severity":1,"message":"1249","line":364,"column":17,"nodeType":"1250","messageId":"1251","endLine":364,"endColumn":28},{"ruleId":"1248","severity":1,"message":"1249","line":399,"column":5,"nodeType":"1250","messageId":"1251","endLine":399,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":406,"column":5,"nodeType":"1250","messageId":"1251","endLine":406,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":407,"column":5,"nodeType":"1250","messageId":"1251","endLine":407,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":413,"column":9,"nodeType":"1250","messageId":"1251","endLine":413,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":429,"column":15,"nodeType":"1250","messageId":"1251","endLine":429,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":430,"column":15,"nodeType":"1250","messageId":"1251","endLine":430,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":433,"column":17,"nodeType":"1250","messageId":"1251","endLine":433,"endColumn":28},{"ruleId":"1248","severity":1,"message":"1249","line":440,"column":11,"nodeType":"1250","messageId":"1251","endLine":440,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":441,"column":11,"nodeType":"1250","messageId":"1251","endLine":441,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":443,"column":13,"nodeType":"1250","messageId":"1251","endLine":443,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":451,"column":13,"nodeType":"1250","messageId":"1251","endLine":451,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":454,"column":13,"nodeType":"1250","messageId":"1251","endLine":454,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":464,"column":11,"nodeType":"1250","messageId":"1251","endLine":464,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":467,"column":11,"nodeType":"1250","messageId":"1251","endLine":467,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":499,"column":11,"nodeType":"1250","messageId":"1251","endLine":499,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":500,"column":11,"nodeType":"1250","messageId":"1251","endLine":500,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":503,"column":13,"nodeType":"1250","messageId":"1251","endLine":503,"endColumn":24},{"ruleId":"1248","severity":1,"message":"1249","line":510,"column":7,"nodeType":"1250","messageId":"1251","endLine":510,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":511,"column":7,"nodeType":"1250","messageId":"1251","endLine":511,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":513,"column":9,"nodeType":"1250","messageId":"1251","endLine":513,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":521,"column":9,"nodeType":"1250","messageId":"1251","endLine":521,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":523,"column":9,"nodeType":"1250","messageId":"1251","endLine":523,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":529,"column":5,"nodeType":"1250","messageId":"1251","endLine":529,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":530,"column":5,"nodeType":"1250","messageId":"1251","endLine":530,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":534,"column":9,"nodeType":"1250","messageId":"1251","endLine":534,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":547,"column":5,"nodeType":"1250","messageId":"1251","endLine":547,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":556,"column":5,"nodeType":"1250","messageId":"1251","endLine":556,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":557,"column":5,"nodeType":"1250","messageId":"1251","endLine":557,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":559,"column":7,"nodeType":"1250","messageId":"1251","endLine":559,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":566,"column":5,"nodeType":"1250","messageId":"1251","endLine":566,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":77,"column":11,"nodeType":"1250","messageId":"1251","endLine":77,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":590,"column":5,"nodeType":"1250","messageId":"1251","endLine":590,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":600,"column":5,"nodeType":"1250","messageId":"1251","endLine":600,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":601,"column":5,"nodeType":"1250","messageId":"1251","endLine":601,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":623,"column":5,"nodeType":"1250","messageId":"1251","endLine":623,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":650,"column":15,"nodeType":"1250","messageId":"1251","endLine":650,"endColumn":26},{"ruleId":"1248","severity":1,"message":"1249","line":654,"column":11,"nodeType":"1250","messageId":"1251","endLine":654,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":655,"column":11,"nodeType":"1250","messageId":"1251","endLine":655,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":656,"column":11,"nodeType":"1250","messageId":"1251","endLine":656,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":190,"column":9,"nodeType":"1250","messageId":"1251","endLine":190,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":143,"column":11,"nodeType":"1250","messageId":"1251","endLine":143,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":53,"column":11,"nodeType":"1250","messageId":"1251","endLine":53,"endColumn":22},{"ruleId":"1248","severity":1,"message":"1249","line":159,"column":5,"nodeType":"1250","messageId":"1251","endLine":159,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":172,"column":9,"nodeType":"1250","messageId":"1251","endLine":172,"endColumn":20},{"ruleId":"1248","severity":1,"message":"1249","line":85,"column":7,"nodeType":"1250","messageId":"1251","endLine":85,"endColumn":18},{"ruleId":"1248","severity":1,"message":"1249","line":58,"column":5,"nodeType":"1250","messageId":"1251","endLine":58,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":64,"column":5,"nodeType":"1250","messageId":"1251","endLine":64,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":92,"column":5,"nodeType":"1250","messageId":"1251","endLine":92,"endColumn":16},{"ruleId":"1248","severity":1,"message":"1249","line":107,"column":9,"nodeType":"1250","messageId":"1251","endLine":107,"endColumn":20},{"ruleId":"1252","severity":1,"message":"1253","line":121,"column":9,"nodeType":"1254","messageId":"1251","endLine":121,"endColumn":53},"lines-around-directive",["1255"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","padding-line-between-statements"]