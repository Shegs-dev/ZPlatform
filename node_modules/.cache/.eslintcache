[{"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\index.js":"1","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\App.js":"2","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\context\\index.js":"3","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\routes.js":"4","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\index.js":"5","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\index.js":"6","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\index.js":"7","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\index.js":"8","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\index.js":"9","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\index.js":"10","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js":"11","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js":"12","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js":"13","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\index.js":"14","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\index.js":"15","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groupview\\index.js":"16","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js":"17","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js":"18","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\index.js":"19","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userProfile\\index.js":"20","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js":"21","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userHistory\\index.js":"22","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js":"23","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js":"24","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\applyjobmanually\\index.js":"25","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\checklists\\index.js":"26","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\skills\\index.js":"27","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\workHistory\\index.js":"28","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\index.js":"29","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\index.js":"30","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js":"31","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js":"32","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js":"33","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationHistory\\index.js":"34","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js":"35","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationSettings\\index.js":"36","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js":"37","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js":"38","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js":"39","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js":"40","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js":"41","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js":"42","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js":"43","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js":"44","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js":"45","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\index.js":"46","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js":"47","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js":"48","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js":"49","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js":"50","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js":"51","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js":"52","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\positionHeld\\index.js":"53","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js":"54","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js":"55","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js":"56","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\ManualApplication\\View\\index.js":"57","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\index.js":"58","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js":"59","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js":"60","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationHistory\\view\\index.js":"61","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js":"62","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js":"63","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js":"64","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js":"65","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js":"66","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js":"67","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js":"68","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js":"69","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\index.js":"70","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\index.js":"71","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js":"72","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\postHeader.js":"73","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\getHeader.js":"74","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js":"75","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js":"76","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js":"77","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js":"78","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js":"79","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js":"80","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js":"81","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Footer\\index.js":"82","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\index.js":"83","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js":"84","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js":"85","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js":"86","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js":"87","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js":"88","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js":"89","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\countries-states-master\\countries.js":"90","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js":"91","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js":"92","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js":"93","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js":"94","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js":"95","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js":"96","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js":"97","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js":"98","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\degree.js":"99","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\courses.js":"100","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js":"101","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js":"102","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js":"103","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\imgHeader.js":"104","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js":"105","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js":"106","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js":"107","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js":"108","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js":"109","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js":"110","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js":"111","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDAvatar\\index.js":"112","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js":"113","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js":"114","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js":"115","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js":"116","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js":"117","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js":"118","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js":"119","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js":"120","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js":"121","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js":"122","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js":"123","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js":"124","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js":"125","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js":"126","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js":"127","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js":"128","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js":"129","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js":"130","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js":"131","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js":"132","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js":"133","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js":"134","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js":"135","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js":"136","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js":"137","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js":"138","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js":"139","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js":"140","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js":"141","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js":"142","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js":"143","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js":"144","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js":"145","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js":"146","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js":"147","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js":"148","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js":"149","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js":"150","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js":"151","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js":"152","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js":"153","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js":"154","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js":"155","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js":"156","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js":"157","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js":"158","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js":"159","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js":"160","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js":"161","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js":"162","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js":"163","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js":"164","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js":"165","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js":"166","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js":"167","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\index.js":"168","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\link.js":"169","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js":"170","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js":"171","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js":"172","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js":"173","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\container.js":"174","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js":"175","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js":"176","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js":"177","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js":"178","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js":"179","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js":"180","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js":"181","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js":"182","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js":"183","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js":"184","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js":"185","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js":"186","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js":"187","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js":"188","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js":"189","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js":"190","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js":"191","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js":"192","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js":"193","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js":"194","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js":"195","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js":"196","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js":"197","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js":"198","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js":"199","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js":"200","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js":"201","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js":"202","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js":"203","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js":"204","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js":"205","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js":"206","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js":"207","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js":"208","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js":"209","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js":"210","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js":"211","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js":"212","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js":"213","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js":"214","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js":"215","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js":"216","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js":"217","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js":"218","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js":"219","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js":"220","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js":"221","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js":"222","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js":"223","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js":"224","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js":"225","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js":"226","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDProgress\\index.js":"227","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js":"228","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js":"229"},{"size":951,"mtime":1656680997757,"results":"230","hashOfConfig":"231"},{"size":4652,"mtime":1656680997324,"results":"232","hashOfConfig":"231"},{"size":4432,"mtime":1656680997658,"results":"233","hashOfConfig":"231"},{"size":11233,"mtime":1659539014848,"results":"234","hashOfConfig":"231"},{"size":6774,"mtime":1656680997631,"results":"235","hashOfConfig":"231"},{"size":1747,"mtime":1656680997639,"results":"236","hashOfConfig":"231"},{"size":9581,"mtime":1656680997720,"results":"237","hashOfConfig":"231"},{"size":7079,"mtime":1656680997575,"results":"238","hashOfConfig":"231"},{"size":7006,"mtime":1658853325578,"results":"239","hashOfConfig":"231"},{"size":14815,"mtime":1658853327228,"results":"240","hashOfConfig":"231"},{"size":2828,"mtime":1656680997737,"results":"241","hashOfConfig":"231"},{"size":3000,"mtime":1656680997738,"results":"242","hashOfConfig":"231"},{"size":14696,"mtime":1658853328572,"results":"243","hashOfConfig":"231"},{"size":6844,"mtime":1658853327237,"results":"244","hashOfConfig":"231"},{"size":11877,"mtime":1658853329381,"results":"245","hashOfConfig":"231"},{"size":7990,"mtime":1658853327717,"results":"246","hashOfConfig":"231"},{"size":6743,"mtime":1658853328575,"results":"247","hashOfConfig":"231"},{"size":11560,"mtime":1658853325831,"results":"248","hashOfConfig":"231"},{"size":5335,"mtime":1656950318335,"results":"249","hashOfConfig":"231"},{"size":55876,"mtime":1658853330771,"results":"250","hashOfConfig":"231"},{"size":62145,"mtime":1658853330044,"results":"251","hashOfConfig":"231"},{"size":14385,"mtime":1658853329371,"results":"252","hashOfConfig":"231"},{"size":36901,"mtime":1658853327726,"results":"253","hashOfConfig":"231"},{"size":34545,"mtime":1658346507568,"results":"254","hashOfConfig":"231"},{"size":9198,"mtime":1658853325582,"results":"255","hashOfConfig":"231"},{"size":8453,"mtime":1658853327230,"results":"256","hashOfConfig":"231"},{"size":18955,"mtime":1658853328560,"results":"257","hashOfConfig":"231"},{"size":28438,"mtime":1658853332422,"results":"258","hashOfConfig":"231"},{"size":6095,"mtime":1658853327715,"results":"259","hashOfConfig":"231"},{"size":26872,"mtime":1659539040783,"results":"260","hashOfConfig":"231"},{"size":892,"mtime":1656680997579,"results":"261","hashOfConfig":"231"},{"size":4326,"mtime":1656680997580,"results":"262","hashOfConfig":"231"},{"size":3315,"mtime":1656680997578,"results":"263","hashOfConfig":"231"},{"size":6742,"mtime":1658853326062,"results":"264","hashOfConfig":"231"},{"size":1408,"mtime":1656680997577,"results":"265","hashOfConfig":"231"},{"size":8584,"mtime":1658853326066,"results":"266","hashOfConfig":"231"},{"size":1079,"mtime":1656680997626,"results":"267","hashOfConfig":"231"},{"size":867,"mtime":1656680997628,"results":"268","hashOfConfig":"231"},{"size":944,"mtime":1656680997630,"results":"269","hashOfConfig":"231"},{"size":739,"mtime":1656680997629,"results":"270","hashOfConfig":"231"},{"size":1164,"mtime":1656680997581,"results":"271","hashOfConfig":"231"},{"size":4767,"mtime":1656680997581,"results":"272","hashOfConfig":"231"},{"size":801,"mtime":1656680997629,"results":"273","hashOfConfig":"231"},{"size":709,"mtime":1656680997613,"results":"274","hashOfConfig":"231"},{"size":1300,"mtime":1656680997616,"results":"275","hashOfConfig":"231"},{"size":33729,"mtime":1658853327637,"results":"276","hashOfConfig":"231"},{"size":746,"mtime":1656680997592,"results":"277","hashOfConfig":"231"},{"size":9070,"mtime":1658853326070,"results":"278","hashOfConfig":"231"},{"size":10381,"mtime":1658853327215,"results":"279","hashOfConfig":"231"},{"size":443,"mtime":1656680997796,"results":"280","hashOfConfig":"231"},{"size":8584,"mtime":1658853327211,"results":"281","hashOfConfig":"231"},{"size":4250,"mtime":1656950317973,"results":"282","hashOfConfig":"231"},{"size":28428,"mtime":1658853328559,"results":"283","hashOfConfig":"231"},{"size":32302,"mtime":1658853327213,"results":"284","hashOfConfig":"231"},{"size":20555,"mtime":1658853327208,"results":"285","hashOfConfig":"231"},{"size":10112,"mtime":1658853326068,"results":"286","hashOfConfig":"231"},{"size":9750,"mtime":1659542578946,"results":"287","hashOfConfig":"231"},{"size":4984,"mtime":1659198442534,"results":"288","hashOfConfig":"231"},{"size":6579,"mtime":1658853327209,"results":"289","hashOfConfig":"231"},{"size":751,"mtime":1656680997512,"results":"290","hashOfConfig":"231"},{"size":8628,"mtime":1659199150391,"results":"291","hashOfConfig":"231"},{"size":1001,"mtime":1656680997514,"results":"292","hashOfConfig":"231"},{"size":1364,"mtime":1656680997513,"results":"293","hashOfConfig":"231"},{"size":632,"mtime":1656680997552,"results":"294","hashOfConfig":"231"},{"size":919,"mtime":1656680997515,"results":"295","hashOfConfig":"231"},{"size":612,"mtime":1656680997506,"results":"296","hashOfConfig":"231"},{"size":981,"mtime":1656680997564,"results":"297","hashOfConfig":"231"},{"size":1025,"mtime":1656680997549,"results":"298","hashOfConfig":"231"},{"size":658,"mtime":1656680997612,"results":"299","hashOfConfig":"231"},{"size":2084,"mtime":1656680997641,"results":"300","hashOfConfig":"231"},{"size":2450,"mtime":1656680997656,"results":"301","hashOfConfig":"231"},{"size":959,"mtime":1656680997516,"results":"302","hashOfConfig":"231"},{"size":369,"mtime":1656680997970,"results":"303","hashOfConfig":"231"},{"size":387,"mtime":1656680997755,"results":"304","hashOfConfig":"231"},{"size":4191,"mtime":1656680997741,"results":"305","hashOfConfig":"231"},{"size":2399,"mtime":1656680997793,"results":"306","hashOfConfig":"231"},{"size":949,"mtime":1656680997573,"results":"307","hashOfConfig":"231"},{"size":739,"mtime":1656680997573,"results":"308","hashOfConfig":"231"},{"size":4780,"mtime":1656680997498,"results":"309","hashOfConfig":"231"},{"size":4381,"mtime":1656680997495,"results":"310","hashOfConfig":"231"},{"size":1485,"mtime":1656680997493,"results":"311","hashOfConfig":"231"},{"size":1877,"mtime":1656680997722,"results":"312","hashOfConfig":"231"},{"size":1243,"mtime":1656680997645,"results":"313","hashOfConfig":"231"},{"size":7989,"mtime":1656680997640,"results":"314","hashOfConfig":"231"},{"size":1880,"mtime":1656680997726,"results":"315","hashOfConfig":"231"},{"size":6761,"mtime":1657139253824,"results":"316","hashOfConfig":"231"},{"size":2297,"mtime":1656680997655,"results":"317","hashOfConfig":"231"},{"size":3370,"mtime":1656680997494,"results":"318","hashOfConfig":"231"},{"size":2047,"mtime":1656680997792,"results":"319","hashOfConfig":"231"},{"size":502448,"mtime":1656680997664,"results":"320","hashOfConfig":"231"},{"size":867,"mtime":1656680997570,"results":"321","hashOfConfig":"231"},{"size":2736,"mtime":1656680997642,"results":"322","hashOfConfig":"231"},{"size":1688,"mtime":1656680997727,"results":"323","hashOfConfig":"231"},{"size":3611,"mtime":1656680997731,"results":"324","hashOfConfig":"231"},{"size":1089,"mtime":1656680997569,"results":"325","hashOfConfig":"231"},{"size":3065,"mtime":1656680997669,"results":"326","hashOfConfig":"231"},{"size":1723,"mtime":1656680997724,"results":"327","hashOfConfig":"231"},{"size":747,"mtime":1656680997724,"results":"328","hashOfConfig":"231"},{"size":3523,"mtime":1656950318384,"results":"329","hashOfConfig":"231"},{"size":6777,"mtime":1657139253832,"results":"330","hashOfConfig":"231"},{"size":8337,"mtime":1658853327713,"results":"331","hashOfConfig":"231"},{"size":9898,"mtime":1658853329378,"results":"332","hashOfConfig":"231"},{"size":7987,"mtime":1658853327235,"results":"333","hashOfConfig":"231"},{"size":369,"mtime":1656680997756,"results":"334","hashOfConfig":"231"},{"size":10706,"mtime":1656680997747,"results":"335","hashOfConfig":"231"},{"size":8206,"mtime":1658853328574,"results":"336","hashOfConfig":"231"},{"size":8975,"mtime":1658853325829,"results":"337","hashOfConfig":"231"},{"size":2281,"mtime":1658853327233,"results":"338","hashOfConfig":"231"},{"size":937,"mtime":1656680997844,"results":"339","hashOfConfig":"231"},{"size":3075,"mtime":1656680997841,"results":"340","hashOfConfig":"231"},{"size":2646,"mtime":1656680997839,"results":"341","hashOfConfig":"231"},{"size":1496,"mtime":1656680997636,"results":"342","hashOfConfig":"231"},{"size":3403,"mtime":1656680997679,"results":"343","hashOfConfig":"231"},{"size":11825,"mtime":1658853327226,"results":"344","hashOfConfig":"231"},{"size":3173,"mtime":1656680997708,"results":"345","hashOfConfig":"231"},{"size":3162,"mtime":1656680997685,"results":"346","hashOfConfig":"231"},{"size":688,"mtime":1656680997499,"results":"347","hashOfConfig":"231"},{"size":1169,"mtime":1656680997557,"results":"348","hashOfConfig":"231"},{"size":1898,"mtime":1656680997511,"results":"349","hashOfConfig":"231"},{"size":1566,"mtime":1656680997568,"results":"350","hashOfConfig":"231"},{"size":1875,"mtime":1656680997558,"results":"351","hashOfConfig":"231"},{"size":902,"mtime":1656680997500,"results":"352","hashOfConfig":"231"},{"size":1618,"mtime":1656680997562,"results":"353","hashOfConfig":"231"},{"size":757,"mtime":1656680997560,"results":"354","hashOfConfig":"231"},{"size":1253,"mtime":1656680997561,"results":"355","hashOfConfig":"231"},{"size":2908,"mtime":1656680997520,"results":"356","hashOfConfig":"231"},{"size":1487,"mtime":1656680997563,"results":"357","hashOfConfig":"231"},{"size":2655,"mtime":1656680997521,"results":"358","hashOfConfig":"231"},{"size":1359,"mtime":1656680997521,"results":"359","hashOfConfig":"231"},{"size":2391,"mtime":1656680997527,"results":"360","hashOfConfig":"231"},{"size":1223,"mtime":1656680997527,"results":"361","hashOfConfig":"231"},{"size":763,"mtime":1656680997523,"results":"362","hashOfConfig":"231"},{"size":1864,"mtime":1656680997567,"results":"363","hashOfConfig":"231"},{"size":2410,"mtime":1656680997528,"results":"364","hashOfConfig":"231"},{"size":2016,"mtime":1656680997516,"results":"365","hashOfConfig":"231"},{"size":1414,"mtime":1656680997551,"results":"366","hashOfConfig":"231"},{"size":787,"mtime":1656680997528,"results":"367","hashOfConfig":"231"},{"size":1497,"mtime":1656680997525,"results":"368","hashOfConfig":"231"},{"size":1544,"mtime":1656680997524,"results":"369","hashOfConfig":"231"},{"size":928,"mtime":1656680997501,"results":"370","hashOfConfig":"231"},{"size":1924,"mtime":1656680997525,"results":"371","hashOfConfig":"231"},{"size":819,"mtime":1656680997550,"results":"372","hashOfConfig":"231"},{"size":1537,"mtime":1656680997556,"results":"373","hashOfConfig":"231"},{"size":830,"mtime":1656680997508,"results":"374","hashOfConfig":"231"},{"size":997,"mtime":1656680997508,"results":"375","hashOfConfig":"231"},{"size":1053,"mtime":1656680997564,"results":"376","hashOfConfig":"231"},{"size":1024,"mtime":1656680997565,"results":"377","hashOfConfig":"231"},{"size":1021,"mtime":1656680997566,"results":"378","hashOfConfig":"231"},{"size":709,"mtime":1656680997554,"results":"379","hashOfConfig":"231"},{"size":1328,"mtime":1656680997557,"results":"380","hashOfConfig":"231"},{"size":653,"mtime":1656680997554,"results":"381","hashOfConfig":"231"},{"size":801,"mtime":1656680997572,"results":"382","hashOfConfig":"231"},{"size":1763,"mtime":1656680997744,"results":"383","hashOfConfig":"231"},{"size":3195,"mtime":1656680997744,"results":"384","hashOfConfig":"231"},{"size":1169,"mtime":1656680997497,"results":"385","hashOfConfig":"231"},{"size":1411,"mtime":1656680997560,"results":"386","hashOfConfig":"231"},{"size":1688,"mtime":1656680997567,"results":"387","hashOfConfig":"231"},{"size":1468,"mtime":1656680997555,"results":"388","hashOfConfig":"231"},{"size":892,"mtime":1656680997495,"results":"389","hashOfConfig":"231"},{"size":3255,"mtime":1656680997638,"results":"390","hashOfConfig":"231"},{"size":1637,"mtime":1656680997502,"results":"391","hashOfConfig":"231"},{"size":658,"mtime":1656680997553,"results":"392","hashOfConfig":"231"},{"size":1453,"mtime":1656680997509,"results":"393","hashOfConfig":"231"},{"size":1798,"mtime":1656680997719,"results":"394","hashOfConfig":"231"},{"size":1255,"mtime":1656680997593,"results":"395","hashOfConfig":"231"},{"size":982,"mtime":1656680997593,"results":"396","hashOfConfig":"231"},{"size":909,"mtime":1656680997599,"results":"397","hashOfConfig":"231"},{"size":2617,"mtime":1656680997646,"results":"398","hashOfConfig":"231"},{"size":632,"mtime":1656680997611,"results":"399","hashOfConfig":"231"},{"size":2337,"mtime":1656680997635,"results":"400","hashOfConfig":"231"},{"size":1020,"mtime":1656680997609,"results":"401","hashOfConfig":"231"},{"size":976,"mtime":1656680997621,"results":"402","hashOfConfig":"231"},{"size":1149,"mtime":1656680997615,"results":"403","hashOfConfig":"231"},{"size":1888,"mtime":1656680997591,"results":"404","hashOfConfig":"231"},{"size":2001,"mtime":1656680997601,"results":"405","hashOfConfig":"231"},{"size":1546,"mtime":1656680997626,"results":"406","hashOfConfig":"231"},{"size":1875,"mtime":1656680997617,"results":"407","hashOfConfig":"231"},{"size":897,"mtime":1656680997583,"results":"408","hashOfConfig":"231"},{"size":918,"mtime":1656680997584,"results":"409","hashOfConfig":"231"},{"size":612,"mtime":1656680997588,"results":"410","hashOfConfig":"231"},{"size":1399,"mtime":1656680997610,"results":"411","hashOfConfig":"231"},{"size":814,"mtime":1656680997610,"results":"412","hashOfConfig":"231"},{"size":688,"mtime":1656680997582,"results":"413","hashOfConfig":"231"},{"size":1603,"mtime":1656680997619,"results":"414","hashOfConfig":"231"},{"size":1243,"mtime":1656680997619,"results":"415","hashOfConfig":"231"},{"size":1842,"mtime":1656680997625,"results":"416","hashOfConfig":"231"},{"size":1467,"mtime":1656680997621,"results":"417","hashOfConfig":"231"},{"size":987,"mtime":1656680997590,"results":"418","hashOfConfig":"231"},{"size":825,"mtime":1656680997589,"results":"419","hashOfConfig":"231"},{"size":949,"mtime":1656680997600,"results":"420","hashOfConfig":"231"},{"size":653,"mtime":1656680997613,"results":"421","hashOfConfig":"231"},{"size":752,"mtime":1656680997618,"results":"422","hashOfConfig":"231"},{"size":1457,"mtime":1656680997615,"results":"423","hashOfConfig":"231"},{"size":1341,"mtime":1656680997603,"results":"424","hashOfConfig":"231"},{"size":1213,"mtime":1656680997607,"results":"425","hashOfConfig":"231"},{"size":2635,"mtime":1656680997602,"results":"426","hashOfConfig":"231"},{"size":2371,"mtime":1656680997607,"results":"427","hashOfConfig":"231"},{"size":758,"mtime":1656680997604,"results":"428","hashOfConfig":"231"},{"size":1487,"mtime":1656680997605,"results":"429","hashOfConfig":"231"},{"size":782,"mtime":1656680997609,"results":"430","hashOfConfig":"231"},{"size":1740,"mtime":1656680997606,"results":"431","hashOfConfig":"231"},{"size":1038,"mtime":1656680997622,"results":"432","hashOfConfig":"231"},{"size":1244,"mtime":1656680997605,"results":"433","hashOfConfig":"231"},{"size":1011,"mtime":1656680997623,"results":"434","hashOfConfig":"231"},{"size":2380,"mtime":1656680997608,"results":"435","hashOfConfig":"231"},{"size":999,"mtime":1656680997623,"results":"436","hashOfConfig":"231"},{"size":2672,"mtime":1656680997602,"results":"437","hashOfConfig":"231"},{"size":2482,"mtime":1656680997707,"results":"438","hashOfConfig":"231"},{"size":2461,"mtime":1656680997684,"results":"439","hashOfConfig":"231"},{"size":6367,"mtime":1656680997841,"results":"440","hashOfConfig":"231"},{"size":2976,"mtime":1656680997750,"results":"441","hashOfConfig":"231"},{"size":1521,"mtime":1656680997504,"results":"442","hashOfConfig":"231"},{"size":2192,"mtime":1656680997502,"results":"443","hashOfConfig":"231"},{"size":2389,"mtime":1656680997505,"results":"444","hashOfConfig":"231"},{"size":2065,"mtime":1656680997503,"results":"445","hashOfConfig":"231"},{"size":1386,"mtime":1656680997618,"results":"446","hashOfConfig":"231"},{"size":1687,"mtime":1656680997624,"results":"447","hashOfConfig":"231"},{"size":1391,"mtime":1656680997591,"results":"448","hashOfConfig":"231"},{"size":1433,"mtime":1656680997614,"results":"449","hashOfConfig":"231"},{"size":1617,"mtime":1656680997585,"results":"450","hashOfConfig":"231"},{"size":1851,"mtime":1656680997645,"results":"451","hashOfConfig":"231"},{"size":474,"mtime":1656680997751,"results":"452","hashOfConfig":"231"},{"size":2374,"mtime":1656680997587,"results":"453","hashOfConfig":"231"},{"size":2177,"mtime":1656680997584,"results":"454","hashOfConfig":"231"},{"size":2050,"mtime":1656680997586,"results":"455","hashOfConfig":"231"},{"size":1506,"mtime":1656680997586,"results":"456","hashOfConfig":"231"},{"size":1802,"mtime":1656680997651,"results":"457","hashOfConfig":"231"},{"size":1156,"mtime":1656680997754,"results":"458","hashOfConfig":"231"},{"size":1435,"mtime":1656680997650,"results":"459","hashOfConfig":"231"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},"oommc9",{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"462"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"462"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"462"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"462"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"462"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"462"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"462"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"462"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"462"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"462"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"462"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"462"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"462"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"462"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"462"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"875","messages":"876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"877","messages":"878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"462"},"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\index.js",[],["935","936","937","938","939"],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\App.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\context\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\routes.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groupview\\index.js",["940","941","942","943"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const [namex, setName] = useState(\"\");\r\n  const [groupmembers, setGroupMember] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [usermembers, setUserMember] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    e.preventDefault();\r\n    setOpened(true);\r\n\r\n    const checks = e.target.checked;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const orgIDs = data11.orgID;\r\n    if (checks) {\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        groupID: apix.groupID,\r\n        empID: apix.empID,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      // const headers = miHeaders;\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/addMember`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/groups/removeMember/${orgIDs}/${apix.groupID}/${apix.empID}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          setOpened(false);\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    const permissionsList = [];\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUsers(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/getByIds/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setName(resultrs[0].group.name);\r\n              setGroupMember(resultrs[0].groupMembers);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((emp) => {\r\n              let check = false;\r\n              if (resultrs[0].groupMembers != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs[0].groupMembers.map((member) => {\r\n                  if (member.empID === emp.personal.id) {\r\n                    // if (rolPermi.isCheck === 1) {\r\n                    check = true;\r\n                    // }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                groupID: id,\r\n                empID: emp.personal.id,\r\n                fname: emp.personal.fname,\r\n                lname: emp.personal.lname,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(users);\r\n            console.log(groupmembers);\r\n            setUserMember(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {namex}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {usermembers.map((api) => (\r\n              <div key={api.empID} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>\r\n                    {api.fname} {api.lname}\r\n                  </Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userProfile\\index.js",["944","945","946","947","948","949","950","951","952","953","954","955","956"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport dummyUser from \"assets/images/dummy-user.png\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// // import Icon from \"@mui/material/Icon\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { Divider } from \"@mui/material\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n// imports for the drawer\r\nimport Box from \"@mui/material/Box\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport UploadFileIcon from \"@mui/icons-material/UploadFile\";\r\nimport ChangeCircleIcon from \"@mui/icons-material/ChangeCircle\";\r\n// imports for modal\r\nimport Modal from \"@mui/material/Modal\";\r\n\r\nfunction UserProfile() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [openn, setOpenn] = React.useState(false);\r\n  const handleOpen = () => setOpenn(true);\r\n  const handleClose = () => setOpenn(false);\r\n  const [files, setFiles] = useState();\r\n\r\n  const [state, setState] = React.useState({\r\n    right: false,\r\n  });\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [deleteFlagx, setDeleteFlag] = useState(\"\");\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  const [skillsx, setSkills] = useState([]);\r\n  const [educationx, setEducation] = useState([]);\r\n  const [workHistoryx, setWorkHistory] = useState([]);\r\n  const [positionHeldx, setPositionHeld] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const [showUser, setShowUser] = useState(false);\r\n  const [showSkills, setShowSkills] = useState(false);\r\n  const [showWorkHistory, setShowWorkHistory] = useState(false);\r\n  const [showEducation, setShowEducation] = useState(false);\r\n  const [showPositionHeld, setShowPositionHeld] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const changeDateandTime = (stimestamp, etimestamp) => {\r\n    const sdate = new Date(stimestamp);\r\n    let sdayx = \"\";\r\n    let smonthx = \"\";\r\n    let syearx = \"\";\r\n    if (sdate !== null) {\r\n      sdayx = sdate.getDate();\r\n      smonthx = sdate.getMonth() + 1;\r\n      syearx = sdate.getFullYear();\r\n    }\r\n\r\n    const edate = new Date(etimestamp);\r\n    let edayx = \"\";\r\n    let emonthx = \"\";\r\n    let eyearx = \"\";\r\n    if (edate !== null) {\r\n      edayx = edate.getDate();\r\n      emonthx = edate.getMonth() + 1;\r\n      eyearx = edate.getFullYear();\r\n    }\r\n    return `${syearx}/${smonthx}/${sdayx} - ${eyearx}/${emonthx}/${edayx}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    console.log(data11);\r\n    const personalIDs = data11.id;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${personalIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resultp) => {\r\n        setOpened(false);\r\n        if (resultp.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(resultp);\r\n          if (resultp.length > 0) {\r\n            setShowUser(true);\r\n          }\r\n          setFname(resultp[0].fname);\r\n          setLname(resultp[0].lname);\r\n          setOname(resultp[0].oname);\r\n          setEmail(resultp[0].email);\r\n          setPhone(resultp[0].pno);\r\n          //   setDayOfBirth(resultp[0].dayOfBirth);\r\n          //   setMonthOfBirth(resultp[0].monthOfBirth);\r\n          //   setYearOfBirth(resultp[0].yearOfBirth);\r\n          const filteredItems = AlCountry.filter(\r\n            (item) => item.name === resultp[0].residentialCountry\r\n          );\r\n          setAllStates(filteredItems[0].states);\r\n          setNationality(resultp[0].nationality);\r\n          setResidentialStreet(resultp[0].residentialStreet);\r\n          setResidentialCity(resultp[0].residentialCity);\r\n          setResidentialState(resultp[0].residentialState);\r\n          setResidentialCountry(resultp[0].residentialCountry);\r\n          setMaritalStatus(resultp[0].maritalStatus);\r\n          setDeleteFlag(resultp[0].deleteFlag);\r\n          setSysStatus(resultp[0].sysStatus);\r\n          setCreatedTime(resultp[0].createdTime);\r\n\r\n          setStartDate(\r\n            new Date(\r\n              `${resultp[0].monthOfBirth}/${resultp[0].dayOfBirth}/${resultp[0].yearOfBirth}`\r\n            )\r\n          );\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/resume/getForEmployee/${personalIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          if (result === null) {\r\n            setSkills([]);\r\n            setWorkHistory([]);\r\n            setEducation([]);\r\n            setPositionHeld([]);\r\n          } else {\r\n            setSkills(result.skills);\r\n            setWorkHistory(result.workHistories);\r\n            setEducation(result.educations);\r\n            setPositionHeld(result.positionHelds);\r\n          }\r\n          if (result.skills.length > 0) {\r\n            setShowSkills(true);\r\n          }\r\n          if (result.workHistories.length > 0) {\r\n            setShowWorkHistory(true);\r\n          }\r\n          if (result.educations.length > 0) {\r\n            setShowEducation(true);\r\n          }\r\n          if (result.positionHelds.length > 0) {\r\n            setShowPositionHeld(true);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const printDocument = () => {\r\n    const input = document.getElementById(\"divToPrint\");\r\n    html2canvas(input).then((canvas) => {\r\n      const imgData = canvas.toDataURL(\"image/png\");\r\n      // eslint-disable-next-line new-cap\r\n      const pdf = new jsPDF();\r\n      pdf.addImage(imgData, \"JPEG\", 0, 0);\r\n      // pdf.output('dataurlnewwindow');\r\n      pdf.save(\"CV.pdf\");\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate != null) {\r\n      dayx = startDate.getDate();\r\n      monthx = startDate.getMonth() + 1;\r\n      yearx = startDate.getFullYear();\r\n    }\r\n\r\n    const raw = JSON.stringify({\r\n      id: personalIDs,\r\n      fname: fnamex,\r\n      lname: lnamex,\r\n      oname: onamex,\r\n      email: emailx,\r\n      pno: phonex,\r\n      nationality: nationalityx,\r\n      residentialStreet: residentialStreetx,\r\n      residentialCity: residentialCityx,\r\n      residentialState: residentialStatex,\r\n      residentialCountry: residentialCountryx,\r\n      dayOfBirth: dayx,\r\n      monthOfBirth: monthx,\r\n      yearOfBirth: yearx,\r\n      maritalStatus: maritalStatusx,\r\n      sysStatus: sysStatusx,\r\n      deleteFlag: deleteFlagx,\r\n      createdTime: createdTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 .,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - . , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  // modal\r\n  const style = {\r\n    position: \"relative\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: 400,\r\n    bgcolor: \"#ffffff\",\r\n    // border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    borderRadius: 3,\r\n    p: 4,\r\n  };\r\n\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    const imgKey = `PROF_PIC_EMP-${personalIDs}`;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/Mono/${imgKey}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/getS3Urls/${result.name}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            const resultres = await res.text();\r\n            if (resultres === null || resultres === undefined || resultres === \"\") {\r\n              return {};\r\n            }\r\n            return JSON.parse(resultres);\r\n          })\r\n          .then((resultxx) => {\r\n            if (resultxx.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (resultxx.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n              window.location.reload();\r\n            }\r\n            if (resultxx.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n              window.location.reload();\r\n            }\r\n            if (isMounted) {\r\n              console.log(resultxx);\r\n            }\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleImageUpload = (e) => {\r\n    handleClose();\r\n    console.log(files);\r\n    console.log(files[0]);\r\n    if (files === undefined) {\r\n      MySwal.fire({\r\n        title: \"INVALID_INPUT\",\r\n        type: \"error\",\r\n        text: \"Please input a file\",\r\n      }).then(() => {\r\n        handleOpen();\r\n      });\r\n    } else {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      // Headers for upload image\r\n      const GenToken = localStorage.getItem(\"rexxdex1\");\r\n      const apiiToken = localStorage.getItem(\"rexxdex\");\r\n\r\n      if (apiiToken !== \"null\" && apiiToken !== null) {\r\n        localStorage.setItem(\"rexxdex1\", apiiToken);\r\n      }\r\n      const iiHeaders = new Headers();\r\n      iiHeaders.append(\"Token-1\", GenToken);\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const imgKey = `PROF_PIC_EMP-${personalIDs}`;\r\n      console.log(imgKey);\r\n\r\n      const mOrgID = \"Mono\";\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", files[0]);\r\n      formData.append(\"orgID\", mOrgID);\r\n      formData.append(\"key\", imgKey);\r\n      formData.append(\"type\", \"png\");\r\n\r\n      const raw = formData;\r\n      console.log(raw);\r\n\r\n      // const raw = JSON.stringify({\r\n      //   mediaDTO: {\r\n      //     multipartFile: formData,\r\n      //     key: imgKey,\r\n      //     type: files[0].type,\r\n      //   },\r\n      // });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: iiHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/uploadFile`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          console.log(result);\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            if (result.status !== \"SUCCESS\") {\r\n              handleOpen();\r\n            }\r\n            console.log(\"SUCCESS\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          }).then(() => {\r\n            handleOpen();\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleDeleteImage = () => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    const imgKey = `PROF_PIC_EMP-${personalIDs}`;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/delete//${imgKey}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resx) => {\r\n        console.log(resx);\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          console.log(\"SUCCESS\");\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === \"keydown\" && (event.key === \"Tab\" || event.key === \"Shift\")) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <Box\r\n      sx={{ width: 250 }}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <MDBox mt={3}>\r\n        <List>\r\n          <ListItem disablePadding>\r\n            <ListItemButton onClick={handleOpen}>\r\n              <ListItemIcon>\r\n                <UploadFileIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Upload\" />\r\n            </ListItemButton>\r\n          </ListItem>\r\n          <Divider />\r\n        </List>\r\n        <List>\r\n          <ListItem disablePadding>\r\n            <ListItemButton onClick={handleOpen}>\r\n              <ListItemIcon>\r\n                <ChangeCircleIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Change\" />\r\n            </ListItemButton>\r\n          </ListItem>\r\n          <Divider />\r\n        </List>\r\n        <List>\r\n          <ListItem disablePadding>\r\n            <ListItemButton onClick={handleDeleteImage}>\r\n              <ListItemIcon>\r\n                <DeleteIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Remove\" />\r\n            </ListItemButton>\r\n          </ListItem>\r\n          <Divider />\r\n        </List>\r\n      </MDBox>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n      {/* modal for file upload */}\r\n      <div>\r\n        <Modal\r\n          open={openn}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <MDBox sx={style}>\r\n            <MDTypography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              Upload Image\r\n            </MDTypography>\r\n            <MDInput type=\"file\" files={files} onChange={(e) => setFiles(e.target.files)} />\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleImageUpload}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Upload\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Modal>\r\n      </div>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={4} md={4} lg={4}>\r\n          <Card>\r\n            <div align=\"center\">\r\n              <div>\r\n                {[\"right\"].map((anchor) => (\r\n                  <React.Fragment key={anchor}>\r\n                    <Button onClick={toggleDrawer(anchor, true)}>\r\n                      <MDBox mt={-4} mx={2} p={0}>\r\n                        <MDAvatar src={dummyUser} alt=\"name\" size=\"xxl\" />\r\n                      </MDBox>\r\n                    </Button>\r\n                    <Drawer\r\n                      anchor={anchor}\r\n                      open={state[anchor]}\r\n                      onClose={toggleDrawer(anchor, false)}\r\n                    >\r\n                      {list(anchor)}\r\n                    </Drawer>\r\n                  </React.Fragment>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div align=\"center\">\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"sm\"\r\n                coloredShadow=\"info\"\r\n                mt={2}\r\n                mx={0}\r\n                p={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Helvetica\"\r\n                  fontSize=\"120%\"\r\n                  color=\"white\"\r\n                >\r\n                  {fnamex} {onamex} {lnamex}\r\n                </MDTypography>\r\n              </MDBox>\r\n            </div>\r\n            <div align=\"center\">\r\n              <MDTypography\r\n                variant=\"h7\"\r\n                fontWeight=\"medium\"\r\n                fontFamily=\"Century Gothic\"\r\n                fontSize=\"70%\"\r\n                color=\"dark\"\r\n                mt={0}\r\n              >\r\n                {emailx}\r\n              </MDTypography>\r\n            </div>\r\n            <div align=\"center\">\r\n              <MDTypography\r\n                variant=\"h5\"\r\n                fontWeight=\"light\"\r\n                fontSize=\"70%\"\r\n                fontFamily=\"Helvetica\"\r\n                color=\"dark\"\r\n                mt={0}\r\n              >\r\n                {phonex}\r\n              </MDTypography>\r\n            </div>\r\n            <div align=\"center\">\r\n              <MDTypography\r\n                variant=\"h6\"\r\n                fontWeight=\"medium\"\r\n                fontFamily=\"Helvetica\"\r\n                fontSize=\"80%\"\r\n                color=\"dark\"\r\n                mt={0}\r\n              >\r\n                {residentialStreetx}&#44; {residentialCityx}&#44; {residentialStatex}\r\n              </MDTypography>\r\n\r\n              <MDTypography\r\n                variant=\"h6\"\r\n                fontWeight=\"medium\"\r\n                fontFamily=\"Helvetica\"\r\n                color=\"dark\"\r\n                mt={0}\r\n                mb={5}\r\n              >\r\n                {residentialCountryx}\r\n              </MDTypography>\r\n            </div>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={0}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    BASIC INFO\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"First Name\"\r\n                          value={fnamex || \"\"}\r\n                          onKeyUp={handleOnFirstKeys}\r\n                          onChange={(e) => setFname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Last Name\"\r\n                          value={lnamex || \"\"}\r\n                          onKeyUp={handleOnLastKeys}\r\n                          onChange={(e) => setLname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Other Name\"\r\n                          value={onamex || \"\"}\r\n                          onKeyUp={handleOnOtherKeys}\r\n                          onChange={(e) => setOname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Personal Email\"\r\n                          disabled\r\n                          value={emailx || \"\"}\r\n                          onKeyUp={handleOnPEmailKeys}\r\n                          onChange={(e) => setEmail(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Phone Number\r\n                        </MDTypography>\r\n                        <PhoneInput\r\n                          value={phonex}\r\n                          inputStyle={{ width: \"100%\" }}\r\n                          buttonStyle={{}}\r\n                          onChange={setPhone}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Marital Status\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMaritalStatus(e.target.value)}\r\n                          value={maritalStatusx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Marital Status---</option>\r\n                          <option value=\"Single\">Single</option>\r\n                          <option value=\"Married\">Married</option>\r\n                          <option value=\"Divorced\">Divorced</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mb={0} mt={0} textAlign=\"left\">\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          color=\"text\"\r\n                          mt={1}\r\n                          textAlign=\"left\"\r\n                        >\r\n                          Date Of Birth\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <MDBox mb={4} mt={0} textAlign=\"left\">\r\n                        <div>\r\n                          <style>\r\n                            {`.date-picker input {\r\n                      width: 50%\r\n                      align: left\r\n                 }`}\r\n                          </style>\r\n                          <DatePicker\r\n                            date={startDate}\r\n                            wrapperClassName=\"date-picker\"\r\n                            placeholder=\"Select Birth Date\"\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            confirmBtnText=\"Confirm\"\r\n                            showCancelButton=\"true\"\r\n                            customStyles={{\r\n                              placeholderText: {\r\n                                fontSize: 5,\r\n                              },\r\n                              dateIcon: {\r\n                                height: 0,\r\n                                width: 0,\r\n                              },\r\n                              dateText: {\r\n                                color: \"#b3b4b5\",\r\n                                fontSize: 16,\r\n                              },\r\n                              dateInput: {\r\n                                borderWidth: 0,\r\n                              },\r\n                            }}\r\n                            selected={startDate}\r\n                            onChange={(date) => setStartDate(date)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Nationality\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nationalityx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNationality}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Street\"\r\n                          value={residentialStreetx || \"\"}\r\n                          onKeyUp={handleOnStreetKeys}\r\n                          onChange={(e) => setResidentialStreet(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          value={residentialCityx || \"\"}\r\n                          onKeyUp={handleOnCityKeys}\r\n                          onChange={(e) => setResidentialCity(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          State\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialStatex || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCState}\r\n                          >\r\n                            <option>--Select State--</option>\r\n                            {allStates.map((apis) => (\r\n                              <option key={apis.code} value={apis.name}>\r\n                                {apis.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton variant=\"gradient\" onClick={handleUpdate} color=\"info\" width=\"50%\">\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n        </Grid>\r\n        <Grid item xs={8} md={8} lg={8}>\r\n          <MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={printDocument}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Download\r\n              </MDButton>\r\n            </MDBox>\r\n            <Paper\r\n              id=\"divToPrint\"\r\n              sx={{\r\n                display: \"flex\",\r\n                \"& > :not(style)\": {\r\n                  width: 2480,\r\n                  height: 3508,\r\n                  maxWidth: 2480,\r\n                  maxHeight: 3508,\r\n                },\r\n              }}\r\n              variant=\"outlined\"\r\n              square\r\n            >\r\n              <Paper\r\n                style={{\r\n                  backgroundColor: \"info\",\r\n                  width: 720,\r\n                  height: 3508,\r\n                  maxWidth: 720,\r\n                  maxHeight: 3508,\r\n                }}\r\n                variant=\"outlined\"\r\n                square\r\n              >\r\n                {showUser ? (\r\n                  <MDBox>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={12} md={12} lg={12}>\r\n                        <MDTypography\r\n                          variant=\"h3\"\r\n                          fontWeight=\"medium\"\r\n                          color=\"text\"\r\n                          ml={2}\r\n                          mt={3}\r\n                          mb={-3}\r\n                        >\r\n                          {`${fnamex} ${lnamex} ${onamex}`}\r\n                          <Divider />\r\n                        </MDTypography>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <MDBox id=\"personalInfo\">\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={12} lg={12}>\r\n                          <Stack direction=\"row\" spacing={1} ml={2} mb={-4}>\r\n                            <Avatar sx={{ bgcolor: \"primary\", width: 32, height: 32 }}>\r\n                              <Icon fontSize=\"medium\">person</Icon>\r\n                            </Avatar>\r\n                            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"text\">\r\n                              Personal Information\r\n                              <Divider />\r\n                            </MDTypography>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <br />\r\n                      <MDBox>\r\n                        <MDTypography variant=\"h5\" fontWeight=\"medium\" color=\"text\" ml={2} mt={1}>\r\n                          Email\r\n                        </MDTypography>\r\n                        <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                          {emailx}{\" \"}\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <MDBox>\r\n                        <MDTypography variant=\"h5\" fontWeight=\"medium\" color=\"text\" ml={2} mt={2}>\r\n                          Phone\r\n                        </MDTypography>\r\n                        <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                          {phonex}{\" \"}\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <MDBox>\r\n                        <MDTypography variant=\"h5\" fontWeight=\"medium\" color=\"text\" ml={2} mt={2}>\r\n                          Residental Area\r\n                        </MDTypography>\r\n                        <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                          {`${residentialCityx} ${residentialStatex}, ${residentialCountryx}`}{\" \"}\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                    <br />\r\n                  </MDBox>\r\n                ) : (\r\n                  <MDBox />\r\n                )}\r\n                {showSkills ? (\r\n                  <MDBox>\r\n                    <MDBox id=\"skills\">\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={12} lg={12}>\r\n                          <Stack direction=\"row\" spacing={1} ml={2} mb={-2}>\r\n                            <Avatar sx={{ bgcolor: \"primary\", width: 32, height: 32 }}>\r\n                              <Icon fontSize=\"medium\">accessibility</Icon>\r\n                            </Avatar>\r\n                            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"text\">\r\n                              Skills\r\n                              <Divider />\r\n                            </MDTypography>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <MDBox ml={2}>\r\n                        {skillsx.map((item) => (\r\n                          <MDBox key={item.id}>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              color=\"text\"\r\n                              ml={2}\r\n                              mt={2}\r\n                            >\r\n                              {item.name}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {item.descrip}{\" \"}\r\n                            </MDTypography>\r\n                          </MDBox>\r\n                        ))}\r\n                      </MDBox>\r\n                    </MDBox>\r\n                    <br />\r\n                  </MDBox>\r\n                ) : (\r\n                  <MDBox />\r\n                )}\r\n                <MDBox mb={5}> &nbsp;</MDBox>\r\n              </Paper>\r\n              <Paper\r\n                style={{\r\n                  color: \"318CE7\",\r\n                  width: 1760,\r\n                  height: 3508,\r\n                  maxWidth: 1760,\r\n                  maxHeight: 3508,\r\n                }}\r\n                variant=\"outlined\"\r\n                square\r\n              >\r\n                <MDBox ml={2} mb={-2} mt={8} />\r\n                {showWorkHistory ? (\r\n                  <MDBox>\r\n                    <MDBox id=\"workHistory\">\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={12} lg={12}>\r\n                          <Stack direction=\"row\" spacing={1} ml={2} mb={-2} mt={5}>\r\n                            <Avatar sx={{ bgcolor: \"primary\", width: 32, height: 32 }}>\r\n                              <Icon fontSize=\"medium\">work_history</Icon>\r\n                            </Avatar>\r\n                            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"text\">\r\n                              Work History\r\n                              <Divider />\r\n                            </MDTypography>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <MDBox ml={2}>\r\n                        {workHistoryx.map((item) => (\r\n                          <MDBox key={item.id}>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              color=\"text\"\r\n                              ml={2}\r\n                              mt={2}\r\n                            >\r\n                              {item.name}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"text\" ml={2}>\r\n                              {item.position}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {item.descrip}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {changeDateandTime(item.startTime, item.endTime)}\r\n                            </MDTypography>\r\n                          </MDBox>\r\n                        ))}\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </MDBox>\r\n                ) : (\r\n                  <MDBox />\r\n                )}\r\n                {showEducation ? (\r\n                  <MDBox>\r\n                    <MDBox id=\"education\">\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={12} lg={12}>\r\n                          <Stack direction=\"row\" spacing={1} ml={2} mb={-2} mt={5}>\r\n                            <Avatar sx={{ bgcolor: \"primary\", width: 32, height: 32 }}>\r\n                              <Icon fontSize=\"medium\">school</Icon>\r\n                            </Avatar>\r\n                            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"text\">\r\n                              Education\r\n                              <Divider />\r\n                            </MDTypography>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <MDBox ml={2}>\r\n                        {educationx.map((item) => (\r\n                          <MDBox key={item.id}>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              color=\"text\"\r\n                              ml={2}\r\n                              mt={2}\r\n                            >\r\n                              {item.specialization}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"text\" ml={2}>\r\n                              {item.name}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {item.degree} {item.grade}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {changeDateandTime(item.startTime, item.endTime)}{\" \"}\r\n                            </MDTypography>\r\n                          </MDBox>\r\n                        ))}\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </MDBox>\r\n                ) : (\r\n                  <MDBox />\r\n                )}\r\n                {showPositionHeld ? (\r\n                  <MDBox>\r\n                    <MDBox id=\"positionHeld\">\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={12} lg={12}>\r\n                          <Stack direction=\"row\" spacing={1} ml={2} mb={-2} mt={5}>\r\n                            <Avatar sx={{ bgcolor: \"primary\", width: 32, height: 32 }}>\r\n                              <Icon fontSize=\"medium\">person_outline</Icon>\r\n                            </Avatar>\r\n                            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"text\">\r\n                              Position Held\r\n                              <Divider />\r\n                            </MDTypography>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <br />\r\n                      <MDBox ml={2}>\r\n                        {positionHeldx.map((item) => (\r\n                          <MDBox key={item.id}>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              color=\"text\"\r\n                              ml={2}\r\n                              mt={2}\r\n                            >\r\n                              {item.name}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"text\" ml={2}>\r\n                              {item.place}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {item.descrip}{\" \"}\r\n                            </MDTypography>\r\n                            <MDTypography variant=\"h6\" fontWeight=\"light\" color=\"text\" ml={2}>\r\n                              {changeDateandTime(item.startTime, item.endTime)}{\" \"}\r\n                            </MDTypography>\r\n                          </MDBox>\r\n                        ))}\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </MDBox>\r\n                ) : (\r\n                  <MDBox />\r\n                )}\r\n                <MDBox mb={5} />\r\n              </Paper>\r\n            </Paper>\r\n          </MDBox>\r\n        </Grid>\r\n      </Grid>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userHistory\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js",["957","958","959","960"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { MonnifyConsumer } from \"react-monnify\";\r\n\r\nfunction PaymentHis() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [descripx, setDescripx] = useState(\"\");\r\n  const [currencyx, setCurrency] = useState(\"NGN\");\r\n  const [amountx, setAmountx] = useState(0);\r\n  const [pnox, setPno] = useState(\"\");\r\n  const [bonusCheck, setBonusCheck] = useState([]);\r\n  const [referenceSKey, setReferenceSKey] = useState();\r\n  const [bonusSetID, setBonusSetID] = useState([]);\r\n\r\n  const [checkedEmail, setCheckedEmail] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n  const [checkedCity, setCheckedCity] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [auditSDate, setAuditSDate] = useState(\"\");\r\n  const [auditEDate, setAuditEDate] = useState(\"\");\r\n  const [concaBalance, setConcaBalance] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n  const bonusStatus = \"1\";\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/gets/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(resultapi);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getBalance/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          let comBalance = 0;\r\n          if (resultapi.length === 0) {\r\n            comBalance = 0;\r\n          } else {\r\n            comBalance = resultapi.balance;\r\n          }\r\n\r\n          let parts = 0;\r\n          if (comBalance > 0) {\r\n            parts = comBalance.toString().split(\".\");\r\n          }\r\n          const numberPart = parts[0];\r\n          const decimalPart = parts[1];\r\n          const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n          let value = 0;\r\n          if (comBalance > 0) {\r\n            value = numberPart.replace(thousands, \",\") + (decimalPart ? `.${decimalPart}` : \"\");\r\n          }\r\n          setConcaBalance(`NGN ${value}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/bonusSetting/getByStatus/${bonusStatus}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          if (resultapi.message === \"Your Organization Has Not Made Any Payment\") {\r\n            setBonusCheck([]);\r\n          } else {\r\n            setBonusCheck(resultapi);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  //   const honComplete = (response) => {\r\n  //     setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n  //     console.log(response); // card charged successfully, get reference here\r\n  //     if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n  //       setOpened(true);\r\n  //       const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n  //       //   bonusAmount: 10\r\n  //       //   createdTime: 1649875827073\r\n  //       //   deleteFlag: 0\r\n  //       //   endTime: 1651104000000\r\n  //       //   id: \"62571b73813e040d304c13fd\"\r\n  //       //   maxTrigger: 6000\r\n  //       //   minTrigger: 2000\r\n  //       //   name: \"Test Freebie\"\r\n  //       //   startTime: 1649894400000\r\n  //       //   status: 0\r\n  //       let allPayandBonus = 0;\r\n  //       let mBonusAmount = 0;\r\n  //       // eslint-disable-next-line radix\r\n  //       const amountCOn = parseInt(amountx);\r\n  //       // eslint-disable-next-line array-callback-return\r\n  //       bonusCheck.map((checkBonus) => {\r\n  //         if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else {\r\n  //           mBonusAmount = 0;\r\n  //           allPayandBonus = amountCOn;\r\n  //         }\r\n  //         // check = false;\r\n  //       });\r\n  //       const orgIDs = data11.orgID;\r\n  //       const raw = JSON.stringify({\r\n  //         orgID: orgIDs,\r\n  //         paidAmount: amountCOn,\r\n  //         bonusAmount: mBonusAmount,\r\n  //         totalAmount: allPayandBonus,\r\n  //       });\r\n  //       const requestOptions = {\r\n  //         method: \"POST\",\r\n  //         headers: myHeaders,\r\n  //         body: raw,\r\n  //         redirect: \"follow\",\r\n  //       };\r\n  //       console.log(raw);\r\n  //       fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n  //         .then(async (res) => {\r\n  //           const aToken = res.headers.get(\"token-1\");\r\n  //           localStorage.setItem(\"rexxdex\", aToken);\r\n  //           return res.json();\r\n  //         })\r\n  //         .then((result) => {\r\n  //           if (result.message === \"Expired Access\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Token Does Not Exist\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Unauthorized Access\") {\r\n  //             navigate(\"/authentication/forbiddenPage\");\r\n  //           }\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: result.status,\r\n  //             type: \"success\",\r\n  //             text: result.message,\r\n  //           }).then(() => {\r\n  //             window.location.reload();\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: error.status,\r\n  //             type: \"error\",\r\n  //             text: error.message,\r\n  //           });\r\n  //         });\r\n  //     }\r\n  //   };\r\n\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[-+]?[0-9]+.[0-9]+$/;\r\n    if (!amountx.match(letters)) {\r\n      setCheckedCity(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount - input a valid Amount<br>\";\r\n    }\r\n    if (amountx.match(letters)) {\r\n      setCheckedCity(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (amountx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const honClose = (response) => {\r\n    handleOnNameKeys();\r\n    handleOnEmailKeys();\r\n    handleOnCityKeys();\r\n    if (enabled) {\r\n      setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n      if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n        setOpened(true);\r\n\r\n        let allPayandBonus = 0;\r\n        let mBonusAmount = 0;\r\n        // eslint-disable-next-line radix\r\n        const amountCOn = parseInt(amountx);\r\n        if (bonusCheck.length === 0) {\r\n          mBonusAmount = 0;\r\n          allPayandBonus = amountCOn;\r\n        } else {\r\n          // eslint-disable-next-line array-callback-return\r\n          bonusCheck.map((checkBonus) => {\r\n            if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else {\r\n              mBonusAmount = 0;\r\n              allPayandBonus = amountCOn;\r\n            }\r\n            // check = false;\r\n          });\r\n        }\r\n\r\n        const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n        const orgIDs = data11.orgID;\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          paidAmount: amountCOn,\r\n          bonusAmount: mBonusAmount,\r\n          totalAmount: allPayandBonus,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((result) => {\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            setOpened(false);\r\n\r\n            const raw1 = JSON.stringify({\r\n              orgID: orgIDs,\r\n              bonusSettingID: bonusSetID,\r\n            });\r\n            const requestOptions1 = {\r\n              method: \"POST\",\r\n              headers: myHeaders,\r\n              body: raw1,\r\n              redirect: \"follow\",\r\n            };\r\n            if (mBonusAmount !== 0) {\r\n              fetch(\r\n                `${process.env.REACT_APP_EKOATLANTIC_URL}/bonusHistory/add`,\r\n                requestOptions1\r\n              ).then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              });\r\n            }\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const personalApiKey = \"MK_TEST_JB2L9T7HMG\";\r\n  const personalConCode = \"6428086775\";\r\n\r\n  const monNey = {\r\n    onClose: honClose,\r\n    amount: amountx,\r\n    currency: currencyx,\r\n    reference: referenceSKey,\r\n    customerFullName: namex,\r\n    customerEmail: emailx,\r\n    customerMobileNumber: pnox,\r\n    apiKey: personalApiKey,\r\n    contractCode: personalConCode,\r\n    paymentDescription: descripx,\r\n    isTestMode: true,\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const auditConSDate = new Date(auditSDate).getTime();\r\n    const auditConEDate = new Date(auditEDate).getTime();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      startDate: auditConSDate,\r\n      endDate: auditConEDate,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getFilter`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setItems(result);\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleGenReceipt = (filteredData, value) => {\r\n    const headers = miHeaders;\r\n    let receiptNumber = \"\";\r\n    // Avoid filter for empty string\r\n    if (!value) {\r\n      receiptNumber = \"\";\r\n    } else {\r\n      const filteredItems = filteredData.filter((item) => item.id === value);\r\n\r\n      receiptNumber = filteredItems[0].receiptNo;\r\n    }\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      receiptNo: receiptNumber,\r\n      paymentHistoryID: paymentHisValue,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentReceipt/generate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              const result = await res.text();\r\n              if (result === null || result === undefined || result === \"\") {\r\n                return {};\r\n              }\r\n              return JSON.parse(result);\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Organization\", accessor: \"orgName\", align: \"left\" },\r\n    { Header: \"Paid Amount\", accessor: \"paidAmount\", align: \"left\" },\r\n    { Header: \"Bonus Amount\", accessor: \"bonusAmount\", align: \"left\" },\r\n    { Header: \"Total Amount\", accessor: \"totalAmount\", align: \"left\" },\r\n    { Header: \"Balance\", accessor: \"balance\", align: \"left\" },\r\n    {\r\n      Header: \"Last Updated\",\r\n      accessor: \"lastUpdatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"Date Created\",\r\n      accessor: \"createdTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"id\",\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(items, value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Container>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5\">\r\n            <Card>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mt={2}\r\n                mx={0}\r\n                p={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Balance\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"white\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={2}\r\n                p={6}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography variant=\"h1\" fontWeight=\"medium\" color=\"info\" textAlign=\"center\">\r\n                  {concaBalance}\r\n                </MDTypography>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-7\">\r\n            <Card>\r\n              <MDBox pt={4} pb={3} px={3}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={-3}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Make Payment\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox component=\"form\" role=\"form\">\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Name(name on receipt) *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={emailx || \"\"}\r\n                            onKeyUp={handleOnEmailKeys}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            label=\"Email *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={currencyx || \"\"}\r\n                            onChange={(e) => setCurrency(e.target.value)}\r\n                            label=\"Currency *\"\r\n                            disabled\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-9\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={amountx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setAmountx(e.target.value)}\r\n                            label=\"Amount *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={descripx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setDescripx(e.target.value)}\r\n                            label=\"Description *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                            Phone Number *\r\n                          </MDTypography>\r\n                          <PhoneInput\r\n                            value={pnox}\r\n                            inputStyle={{ width: \"100%\" }}\r\n                            buttonStyle={{}}\r\n                            onChange={setPno}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <div>\r\n                      <MonnifyConsumer {...monNey} className=\"btn\">\r\n                        {({ initializePayment }) => (\r\n                          // eslint-disable-next-line react/button-has-type\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={() => initializePayment()}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Pay\r\n                          </MDButton>\r\n                        )}\r\n                      </MonnifyConsumer>\r\n                    </div>\r\n                  </MDBox>\r\n                </MDBox>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Payment History\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Start Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditSDate}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                            onChange={(time) => setAuditSDate(time)}\r\n                          />{\" \"}\r\n                        </MDBox>{\" \"}\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            End Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditEDate}\r\n                            onChange={(time) => setAuditEDate(time)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />{\" \"}\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleClick}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                        align=\"center\"\r\n                      >\r\n                        Add Filters\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      </Container>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PaymentHis;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js",["961","962","963","964","965","966","967","968","969"],"// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction InviteUser() {\r\n  const [phonex, setPhone] = useState(\"\");\r\n  // const [startDate, setStartDate] = useState(new Date());\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [idx, setId] = useState(0);\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [roleIDx, setRoleID] = useState(0);\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [emaily, setOemail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [deleteFlagx, setDeleteFlag] = useState(0);\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n  const [passEnabled, setPassEnabled] = useState(true);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  useEffect(() => {\r\n    /* if (idx === 0) {\r\n      setPassEnabled(true);\r\n    } */\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const fnameu = urlParams.get(\"fname\");\r\n    const lnameu = urlParams.get(\"lname\");\r\n    const emailu = urlParams.get(\"email\");\r\n    const orgIDu = urlParams.get(\"orgID\");\r\n    const roleIDu = urlParams.get(\"role\");\r\n    console.log(fnameu);\r\n    console.log(lnameu);\r\n    console.log(emailu);\r\n    console.log(orgIDu);\r\n    console.log(roleIDu);\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      setFname(fnameu);\r\n      setLname(lnameu);\r\n      setOemail(emailu);\r\n      setOrgID(orgIDu);\r\n      setRoleID(roleIDu);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/${emailpersonal}`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            setPassEnabled(false);\r\n            setOname(result.oname);\r\n            setId(result.id);\r\n            setPhone(result.pno);\r\n            setNationality(result.nationality);\r\n            setResidentialStreet(result.residentialStreet);\r\n            setResidentialCity(result.residentialCity);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === result.residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setResidentialState(result.residentialState);\r\n            setResidentialCountry(result.residentialCountry);\r\n            setMaritalStatus(result.maritalStatus);\r\n            setDeleteFlag(result.deleteFlag);\r\n            setSysStatus(result.sysStatus);\r\n            setCreatedTime(result.createdTime);\r\n\r\n            setStartDate(\r\n              new Date(`${result.monthOfBirth}/${result.dayOfBirth}/${result.yearOfBirth}`)\r\n            );\r\n          } else {\r\n            setId(0);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setId(0);\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      // const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        id: idx,\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n        deleteFlag: deleteFlagx,\r\n        sysStatus: sysStatusx,\r\n        createdTime: createdTimex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      localStorage.setItem(\"email1\", emailx);\r\n\r\n      let endpoint = \"add\";\r\n      if (idx !== 0) {\r\n        endpoint = \"update\";\r\n      }\r\n      if (endpoint === \"update\") {\r\n        setPassword(\"\");\r\n      }\r\n      const endpointPC = \"add\";\r\n      let endpointL = \"add\";\r\n      if (endpoint === \"update\") {\r\n        endpointL = `updateOrganization/${emailx}/${orgIDx}`;\r\n      }\r\n      let methodLUO = \"POST\";\r\n      if (endpointL !== \"add\") {\r\n        methodLUO = \"GET\";\r\n      }\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/${endpoint}`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          localStorage.setItem(\"personalInfo\", JSON.stringify(result.data));\r\n          const raw1 = JSON.stringify({\r\n            orgID: orgIDx,\r\n            personalID: result.data.id,\r\n            email: emaily,\r\n            roleID: roleIDx,\r\n          });\r\n          const requestOptions1 = {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: raw1,\r\n            redirect: \"follow\",\r\n          };\r\n\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/${endpointPC}`, requestOptions1)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              const resultres = await res.text();\r\n              if (resultres === null || resultres === undefined || resultres === \"\") {\r\n                return {};\r\n              }\r\n              return JSON.parse(resultres);\r\n            })\r\n            .then((resultx) => {\r\n              console.log(resultx);\r\n              localStorage.setItem(\"company\", JSON.stringify(resultx.data));\r\n              const raw2 = JSON.stringify({\r\n                orgID: orgIDx,\r\n                empID: result.data.id,\r\n                username: emailx,\r\n                password: passwordx,\r\n              });\r\n              const requestOptions2 = {\r\n                method: methodLUO,\r\n                headers: myHeaders,\r\n                body: raw2,\r\n                redirect: \"follow\",\r\n              };\r\n              fetch(`${process.env.REACT_APP_ZAVE_URL}/login/${endpointL}`, requestOptions2)\r\n                .then(async (res) => {\r\n                  const aToken = res.headers.get(\"token-1\");\r\n                  localStorage.setItem(\"rexxdex\", aToken);\r\n                  return res.json();\r\n                })\r\n                .then(() => {\r\n                  setOpened(false);\r\n                  MySwal.fire({\r\n                    title: result.status,\r\n                    type: \"success\",\r\n                    text: result.message,\r\n                  }).then(() => {\r\n                    navigate(\"/authentication/sign-in\", { replace: true });\r\n                  });\r\n                });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  /* return <Select options={options} value={value} onChange={changeHandler} />\r\n} */\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h2\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            PlutoSpace\r\n          </MDTypography>\r\n          <MDTypography display=\"block\" variant=\"button\" color=\"white\" my={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"text\"\r\n                label=\"Other Name\"\r\n                value={onamex || \"\"}\r\n                onKeyUp={handleOnOtherKeys}\r\n                onChange={(e) => setOname(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Personal Email\"\r\n                value={emailx || \"\"}\r\n                onKeyUp={handleOnPEmailKeys}\r\n                onChange={getPersonalInformation}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Official Email\"\r\n                value={emaily || \"\"}\r\n                disabled\r\n                onChange={(e) => setOemail(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <div className=\"col-sm-8\">\r\n                <Form.Select\r\n                  aria-label=\"Default select example\"\r\n                  width=\"50%\"\r\n                  mx={34}\r\n                  value={maritalStatusx || \"\"}\r\n                  onChange={(e) => setMaritalStatus(e.target.value)}\r\n                >\r\n                  <option>--Marital Status--</option>\r\n                  <option value=\"Married\">Married</option>\r\n                  <option value=\"Single\">Single</option>\r\n                  <option value=\"Divorced\">Divorced</option>\r\n                </Form.Select>\r\n              </div>\r\n            </MDBox>\r\n            <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n              Date Of Birth\r\n            </MDTypography>\r\n            <MDBox mb={4} mt={-1}>\r\n              <div>\r\n                <style>\r\n                  {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                </style>\r\n                <DatePicker\r\n                  date={startDate}\r\n                  wrapperClassName=\"date-picker\"\r\n                  placeholder=\"Select Birth Date\"\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  confirmBtnText=\"Confirm\"\r\n                  showCancelButton=\"true\"\r\n                  customStyles={{\r\n                    placeholderText: {\r\n                      fontSize: 5,\r\n                    },\r\n                    dateIcon: {\r\n                      height: 0,\r\n                      width: 0,\r\n                    },\r\n                    dateText: {\r\n                      color: \"#b3b4b5\",\r\n                      fontSize: 16,\r\n                    },\r\n                    dateInput: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  }}\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  peekNextMonth\r\n                  showMonthDropdown\r\n                  showYearDropdown\r\n                  dropdownMode=\"select\"\r\n                />\r\n              </div>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-10\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Country\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={residentialCountryx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeRCCountry}\r\n                        >\r\n                          <option>--Select Country--</option>\r\n                          {AlCountry.map((apic) => (\r\n                            <option key={apic.code3} value={apic.name}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default InviteUser;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\applyjobmanually\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\checklists\\index.js",["970","971","972"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [rolName, setRolName] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [vPermissions, setVPermissions] = useState([]);\r\n  const [roleStep, setRoleStep] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n  const orgIDs = data11.orgID;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    let isChecked = 0;\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      isChecked = 1;\r\n    }\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      roleID: id,\r\n      stepID: apix.id,\r\n      isCheck: isChecked,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    // const headers = miHeaders;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/save`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/role/get/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultg) => {\r\n        // setOpened(false);\r\n        if (resultg.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setRolName(resultg[0].name);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const permissionsList = [];\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/step/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setPermissions(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n        fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/getsRoleSteps/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setRoleStep(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((permission) => {\r\n              let check = false;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((rolPermi) => {\r\n                  if (rolPermi.stepID === permission.id) {\r\n                    if (rolPermi.isCheck === 1) {\r\n                      check = true;\r\n                    }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: permission.id,\r\n                name: permission.name,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(permissions);\r\n            console.log(roleStep);\r\n            console.log(permissionsList);\r\n            setVPermissions(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {rolName}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDTypography\r\n          variant=\"h4\"\r\n          textAlign=\"left\"\r\n          fontWeight=\"medium\"\r\n          color=\"secondary\"\r\n          mx={4}\r\n          mt={2}\r\n        >\r\n          Steps\r\n        </MDTypography>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {vPermissions.map((api) => (\r\n              <div key={api.id} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>{api.name}</Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\skills\\index.js",["973","974","975","976"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Skills() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [showLists, setShowLists] = useState(false);\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n    display: \"block\",\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        console.log(result);\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({ empID: personalIDs, name: namex, descrip: descripx });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      console.log(raw);\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      descrip: udescripx,\r\n      empID: uempID,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUEmpID(filteredItems[0].empID);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Add Skill\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Name *\"\r\n                      value={namex || \"\"}\r\n                      onKeyUp={handleOnNameKeys}\r\n                      className=\"form-control\"\r\n                      onChange={(e) => setName(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={descripx || \"\"}\r\n                      onChange={(e) => setDescrip(e.target.value)}\r\n                      label=\"Description\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleClick}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Card style={{ backgroundColor: \"white\" }}>\r\n                &nbsp;\r\n                {/* <div\r\n                  className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                  style={scrollContainerStyle}\r\n                > */}\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    {allApp.map((item) => (\r\n                      <Grid item xs={3} md={3} lg={3} key={item.id}>\r\n                        <Card>\r\n                          <CardContent>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              fontSize=\"120%\"\r\n                              color=\"info\"\r\n                              textAlign=\"left\"\r\n                              mt={1}\r\n                              mb={-3.5}\r\n                            >\r\n                              {item.name}\r\n                            </MDTypography>\r\n                          </CardContent>\r\n                          <CardActions>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleDeleteSK(item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  delete\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleShow(allApp, item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  edit\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                          </CardActions>\r\n                        </Card>\r\n                        &nbsp;\r\n                      </Grid>\r\n                    ))}\r\n                  </div>\r\n                </Container>\r\n                {/* </div> */}\r\n                &nbsp;\r\n                <br />\r\n              </Card>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Skill\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card style={style}>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n                mx={2}\r\n                mt={-3}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                  Update Skill\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Name *\"\r\n                          value={unamex || \"\"}\r\n                          onKeyUp={handleOnNameKeys}\r\n                          className=\"form-control\"\r\n                          onChange={(e) => setUName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          value={udescripx || \"\"}\r\n                          onChange={(e) => setUDescrip(e.target.value)}\r\n                          label=\"Description\"\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mt={4} mb={1}>\r\n                  <MDButton\r\n                    variant=\"gradient\"\r\n                    onClick={handleUpdate}\r\n                    color=\"info\"\r\n                    width=\"50%\"\r\n                    align=\"left\"\r\n                  >\r\n                    Save\r\n                  </MDButton>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Skills;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\workHistory\\index.js",["977","978"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction WorkHistory() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n  const [positionx, setPosition] = useState(\"\");\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [upositionx, setUPosition] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n    display: \"block\",\r\n  };\r\n\r\n  const changeDateandTime = (stimestamp, etimestamp) => {\r\n    const sdate = new Date(stimestamp);\r\n    let sdayx = \"\";\r\n    let smonthx = \"\";\r\n    let syearx = \"\";\r\n    if (sdate !== null) {\r\n      sdayx = sdate.getDate();\r\n      smonthx = sdate.getMonth() + 1;\r\n      syearx = sdate.getFullYear();\r\n    }\r\n\r\n    const edate = new Date(etimestamp);\r\n    let edayx = \"\";\r\n    let emonthx = \"\";\r\n    let eyearx = \"\";\r\n    if (edate !== null) {\r\n      edayx = edate.getDate();\r\n      emonthx = edate.getMonth() + 1;\r\n      eyearx = edate.getFullYear();\r\n    }\r\n    return `From ${syearx}/${smonthx}/${sdayx} to ${eyearx}/${emonthx}/${edayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      const startCDate = new Date(startDate).getTime();\r\n      const endCDate = new Date(endDate).getTime();\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        descrip: descripx,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        position: positionx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n            setPosition(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      descrip: udescripx,\r\n      position: upositionx,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUPosition(filteredItems[0].position);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Work History\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" Company Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Description *\"\r\n                            value={descripx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setDescrip(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Position *\"\r\n                        value={positionx || \"\"}\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPosition(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Position: {item.position}\r\n                          </MDTypography>{\" \"}\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {changeDateandTime(item.startTime, item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Work History\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card style={style}>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Work History\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" Company Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\"Description *\"\r\n                                value={udescripx || \"\"}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUDescrip(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Position *\"\r\n                            value={upositionx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setUPosition(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default WorkHistory;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\index.js",["979","980","981","982","983","984","985","986","987","988"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n// import Accordion from \"@mui/material/Accordion\";\r\n// import AccordionSummary from \"@mui/material/AccordionSummary\";\r\n// import AccordionDetails from \"@mui/material/AccordionDetails\";/\r\nimport Typography from \"@mui/material/Typography\";\r\n// import ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { Container, Form, Row, Col, ButtonGroup, ToggleButton } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import TimePicker from \"react-bootstrap-time-picker\";\r\nimport DatePicker from \"react-datepicker\";\r\n// import Swal from \"sweetalert2\";\r\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText } from \"mdb-react-ui-kit\";\r\n// import withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\n// import GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import Button from \"assets/theme/components/button\";\r\n\r\nfunction JobApplication() {\r\n  const MySwal = withReactContent(Swal);\r\n  const [titlex, setTitlex] = useState(\"\");\r\n  const [locationx, setLocationx] = useState(\"\");\r\n  const [minCreated, setMinCreated] = useState(0);\r\n  const [maxCreated, setMaxCreated] = useState(0);\r\n  const [minClose, setMinClosed] = useState(0);\r\n  const [maxClose, setMaxClosed] = useState(0);\r\n  const [opened, setOpened] = useState(false);\r\n  const [salarymin, setSalarymin] = useState(\"\");\r\n  const [salarymax, setSalarymax] = useState(\"\");\r\n  const [statusx, setStatusx] = useState(\"\");\r\n  const [industryx, setIndustryx] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const [selopen, setSelopen] = useState(false);\r\n  // const [selclose, setSelclose] = useState(true);\r\n  const [sellopen, setSellopen] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  // const [organization, setOrganization] = useState({});\r\n\r\n  // useEffect(() => {\r\n  //   setOpened(true);\r\n  //   const headers = miHeaders;\r\n  //   const queryString = window.location.search;\r\n  //   const urlParams = new URLSearchParams(queryString);\r\n  //   const ids = urlParams.get(\"id\");\r\n\r\n  //   let isMounted = true;\r\n  //   fetch(`${process.env.REACT_APP_KUBU_URL}/company/getAll`, { headers })\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((result) => {\r\n  //       setOpened(false);\r\n  //       if (result.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (isMounted) {\r\n  //         setOrganization(` ${result[0].amount}`);\r\n  //          setAmount(` ${result[0].amount}`);\r\n  //         setApprover(result[0].approverID);\r\n  //       }\r\n  //     });\r\n  //   return () => {\r\n  //     isMounted = false;\r\n  //   };\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const date = new Date();\r\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\r\n    const maxCreatedx = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\r\n    setOpened(true);\r\n\r\n    const raw = JSON.stringify({\r\n      createdTimeStartTime: firstDay,\r\n      createdTimeEndTime: maxCreatedx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobPost/getFiltered`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n\r\n        if (isMounted) {\r\n          setItems(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n  // useEffect(() => {\r\n  //   const minCreatedx = new Date(minCreated).getTime();\r\n  //   const maxCreatedx = new Date().getTime();\r\n  //   const isopen = selopen;\r\n  //   setOpened(true);\r\n\r\n  //   const raw = JSON.stringify({\r\n  //     title: titlex,\r\n  //     location: locationx,\r\n  //     closingDateStartTime: minClosex,\r\n  //     closingDateEndTime: maxClosex,\r\n  //     createdTimeEndTime: maxCreatedx,\r\n  //     jobStatus: statusx,\r\n  //     industry: industryx,\r\n  //     opened: isopen,\r\n  //   });\r\n  //   console.log(raw);\r\n  //   const requestOptions = {\r\n  //     method: \"POST\",\r\n  //     headers: myHeaders,\r\n  //     body: raw,\r\n  //     redirect: \"follow\",\r\n  //   };\r\n\r\n  //   fetch(`${process.env.REACT_APP_RAGA_URL}/jobPost/getFiltered`, requestOptions)\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       console.log(res);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((result) => {\r\n  //       console.log(result);\r\n  //       if (result.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //       }\r\n  //       if (result.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //       }\r\n  //       if (result.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //       }\r\n  //       setItems(result);\r\n  //       console.log(items);\r\n  //       setOpened(false);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       alert(`Error ${error.length} : In Posting.`);\r\n  //     });\r\n  // });\r\n\r\n  const handleOpened = () => {\r\n    setSelopen(true);\r\n    setSellopen(true);\r\n    // setSelclose(false);\r\n    console.log(selopen);\r\n  };\r\n  // const handleClosed = () => {\r\n  //   setSelopen(false);\r\n  //   setSelclose(true);\r\n  //   setSellopen(false);\r\n  //   console.log(selopen);\r\n  // };\r\n\r\n  const handleView = (value) => {\r\n    console.log(\"hear\");\r\n    console.log(value);\r\n    navigate(`/job-Application/Manual-Application/View?id=${value}`);\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handleApply = (value) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    console.log(data11);\r\n    const personalIDs = data11.id;\r\n    const raw = JSON.stringify({\r\n      empID: personalIDs,\r\n      jobPostID: value,\r\n      type: 0,\r\n      status: \"Applied\",\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobApplication/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    const minCreatedx = new Date(minCreated).getTime();\r\n    const maxCreatedx = new Date(maxCreated).getTime();\r\n    const minClosex = new Date(minClose).getTime();\r\n    const maxClosex = new Date(maxClose).getTime();\r\n    const minSalary = Number(salarymin);\r\n    const maxSalary = Number(salarymax);\r\n    const isopen = selopen;\r\n    setOpened(true);\r\n\r\n    const raw = JSON.stringify({\r\n      title: titlex,\r\n      location: locationx,\r\n      closingDateStartTime: minClosex,\r\n      closingDateEndTime: maxClosex,\r\n      createdTimeStartTime: minCreatedx,\r\n      createdTimeEndTime: maxCreatedx,\r\n      minSalaryExpectation: minSalary,\r\n      maxSalaryExpectation: maxSalary,\r\n      jobStatus: statusx,\r\n      industry: industryx,\r\n      opened: isopen,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobPost/getFiltered`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        console.log(res);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        setItems(result);\r\n        console.log(items);\r\n        setOpened(false);\r\n      })\r\n      .catch((error) => {\r\n        alert(`Error ${error.length} : In Posting.`);\r\n      });\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={9} md={9} lg={9}>\r\n          <Container>\r\n            {/* <Card> */}\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"info\"\r\n              mx={3}\r\n              mt={5}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                Jobs\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {items.map((item) => (\r\n                    <div className=\"col-sm-4\" key={item.id}>\r\n                      <MDBCard style={{ width: \"18rem\" }}>\r\n                        <MDBCardBody>\r\n                          <MDBCardTitle>\r\n                            <Col>\r\n                              <Typography>{item.title}</Typography>\r\n                            </Col>\r\n                          </MDBCardTitle>\r\n                          <MDBCardText>\r\n                            <Col>\r\n                              <Typography>\r\n                                <b>{item.orgName}</b>\r\n                              </Typography>\r\n                            </Col>\r\n                            <Col>\r\n                              <Typography>{item.location}</Typography>\r\n                            </Col>\r\n                            <Col>\r\n                              <Typography>\r\n                                <span>\r\n                                  <h5>{changeDate(item.openingTime)}</h5>\r\n                                </span>\r\n                              </Typography>\r\n                            </Col>\r\n                          </MDBCardText>\r\n                          <div>\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              onClick={() => handleApply(item.id)}\r\n                              color=\"info\"\r\n                              width=\"50%\"\r\n                              align=\"left\"\r\n                            >\r\n                              Apply\r\n                            </MDButton>\r\n                            &nbsp; &nbsp;\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              onClick={() => handleView(item.id)}\r\n                              color=\"info\"\r\n                              width=\"50%\"\r\n                              align=\"left\"\r\n                            >\r\n                              View\r\n                            </MDButton>\r\n                          </div>\r\n                        </MDBCardBody>\r\n                      </MDBCard>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            {/* </Card> */}\r\n          </Container>\r\n        </Grid>\r\n        <Grid item xs={3} md={3} lg={3}>\r\n          <Container>\r\n            <Card>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n                mx={2}\r\n                mt={5}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                  Get Job Posts\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox textAlign=\"center\">\r\n                <Container>\r\n                  <Row>\r\n                    <Col>\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Title\"\r\n                        value={titlex || \"\"}\r\n                        //   onKeyUp={handleOnTitleKeys}\r\n                        onChange={(e) => setTitlex(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <MDBox>\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Location\"\r\n                          value={locationx || \"\"}\r\n                          //   onKeyUp={handleOnTitleKeys}\r\n                          onChange={(e) => setLocationx(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </MDBox>\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </MDBox>\r\n              <hr />\r\n              <MDBox textAlign=\"center\">\r\n                <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"60%\">\r\n                  Created Date\r\n                </MDTypography>\r\n                <Row>\r\n                  <Col>\r\n                    <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"70%\">\r\n                      Lowest Created Date Range\r\n                    </MDTypography>\r\n                    <Container>\r\n                      <DatePicker\r\n                        placeholderText=\"MM/DD/YY\"\r\n                        style={{ marginRight: \"2px\" }}\r\n                        selected={minCreated}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(time) => setMinCreated(time)}\r\n                      />\r\n                    </Container>\r\n                  </Col>\r\n                  <Col>\r\n                    <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"70%\">\r\n                      Highest Created Date Range\r\n                    </MDTypography>\r\n                    <Container>\r\n                      <DatePicker\r\n                        placeholderText=\"MM/DD/YY\"\r\n                        style={{ marginRight: \"10px\" }}\r\n                        selected={maxCreated}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(time) => setMaxCreated(time)}\r\n                      />\r\n                    </Container>\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n              </MDBox>\r\n              <hr />\r\n              <MDBox textAlign=\"center\">\r\n                <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"60%\">\r\n                  Closing Time\r\n                </MDTypography>\r\n                <Row>\r\n                  <Col>\r\n                    <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"70%\">\r\n                      Lowest Closing Date Range\r\n                    </MDTypography>\r\n                    <Container>\r\n                      <DatePicker\r\n                        placeholderText=\"MM/DD/YY\"\r\n                        style={{ marginRight: \"2px\" }}\r\n                        selected={minClose}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(time) => setMinClosed(time)}\r\n                      />\r\n                    </Container>\r\n                  </Col>\r\n                  <Col>\r\n                    <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"70%\">\r\n                      Highest Closing Date Range\r\n                    </MDTypography>\r\n                    <Container>\r\n                      <DatePicker\r\n                        placeholderText=\"MM/DD/YY\"\r\n                        style={{ marginRight: \"10px\" }}\r\n                        selected={maxClose}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                        onChange={(time) => setMaxClosed(time)}\r\n                      />\r\n                    </Container>\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n              </MDBox>\r\n              <hr />\r\n              <MDBox textAlign=\"center\" mb={10}>\r\n                <MDBox textAlign=\"center\">\r\n                  <Row>\r\n                    <MDTypography variant=\"p\" fontWeight=\"light\" color=\"secondary\" fontSize=\"60%\">\r\n                      Salary Expectation Range\r\n                    </MDTypography>\r\n                    <br />\r\n                    <br />\r\n                    <Col>\r\n                      <MDTypography variant=\"p\" fontWeight=\"bold\" color=\"secondary\" fontSize=\"70%\">\r\n                        Minimum Salary Expectation(₦): <br />\r\n                        <TextField\r\n                          label=\"Amount \"\r\n                          type=\"number\"\r\n                          value={salarymin}\r\n                          onChange={(e) => setSalarymin(e.target.value)}\r\n                        />\r\n                      </MDTypography>\r\n                    </Col>\r\n                    <Col>\r\n                      <MDTypography variant=\"p\" fontWeight=\"bold\" color=\"secondary\" fontSize=\"70%\">\r\n                        Maximum Salary Expectation(₦): <br />\r\n                        <TextField\r\n                          label=\"Amount \"\r\n                          type=\"number\"\r\n                          value={salarymax}\r\n                          onChange={(e) => setSalarymax(e.target.value)}\r\n                        />\r\n                      </MDTypography>\r\n                    </Col>\r\n                  </Row>\r\n                </MDBox>\r\n                <br />\r\n                <hr />\r\n                <Container>\r\n                  <Row>\r\n                    <Col>\r\n                      <MDBox>\r\n                        <Container>\r\n                          <MDTypography\r\n                            variant=\"p\"\r\n                            fontWeight=\"regular\"\r\n                            color=\"secondary\"\r\n                            fontSize=\"90%\"\r\n                          >\r\n                            Job Status\r\n                          </MDTypography>\r\n                          <Form.Select\r\n                            aria-label=\"Default select example\"\r\n                            value={statusx}\r\n                            onChange={(e) => setStatusx(e.target.value)}\r\n                          >\r\n                            <option>--Job Status--</option>\r\n                            <option value=\"Full Time\">Full Time</option>\r\n                            <option value=\"Part Time\">Part Time</option>\r\n                            <option value=\"Temporal\">Temporal</option>\r\n                            <option value=\"Seasonal\">Seasonal</option>\r\n                            <option value=\"Internship\">Internship</option>\r\n                            <option value=\"At Will\">At Will</option>\r\n                          </Form.Select>\r\n                        </Container>\r\n                      </MDBox>\r\n                    </Col>\r\n                    <Col>\r\n                      <MDTypography\r\n                        variant=\"p\"\r\n                        fontWeight=\"regular\"\r\n                        color=\"secondary\"\r\n                        fontSize=\"90%\"\r\n                      >\r\n                        Industry\r\n                      </MDTypography>\r\n                      <MDBox>\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          value={industryx}\r\n                          // textAlign=\"center\"\r\n                          onChange={(e) => setIndustryx(e.target.value)}\r\n                        >\r\n                          <option>--Select Industry--</option>\r\n                          <option value=\"Agriculture\">Agriculture</option>\r\n                          <option value=\"Chemical Industry\">Chemical Industry</option>\r\n                          <option value=\"Commerce\">Commerce</option>\r\n                          <option value=\"Construction\">Construction</option>\r\n                          <option value=\"Education\">Education</option>\r\n                          <option value=\"Financial Services\">Financial Services</option>\r\n                          <option value=\"Fisheries\">Fisheries</option>\r\n                          <option value=\"Food\">Food</option>\r\n                          <option value=\"Forestry\">Forestry</option>\r\n                          <option value=\"Health Services\">Health Services</option>\r\n                          <option value=\"Hotels\">Hotels</option>\r\n                          <option value=\"Metal Production\">Metal Production</option>\r\n                          <option value=\"Mining\">Mining</option>\r\n                          <option value=\"Mechanical and Electricitical Engineering\">\r\n                            Mechanical and Electrical Engineering\r\n                          </option>\r\n                          <option value=\"Media - Culture\">Media - Culture</option>\r\n                          <option value=\"Oil and Gas production\">Oil and Gas production</option>\r\n                          <option value=\"Postals and Telecommunication\">\r\n                            Postals and Telecommunication\r\n                          </option>\r\n                          <option value=\"Public Service\">Public Service</option>\r\n                          <option value=\"Shipping and Ports\">Shipping and Ports</option>\r\n                          <option value=\"Textiles\"> Textiles, Clothing, Leather </option>\r\n                          <option value=\"Transport: road, railways\">\r\n                            Transport (road, railways)\r\n                          </option>\r\n                          <option value=\"Transport Equipment Manufacturing\">\r\n                            Transport Equipment Manufacturing\r\n                          </option>\r\n                          <option value=\"utilities: water, gas, electricity\">\r\n                            Utilities:Water, Gas, Electricity\r\n                          </option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </Col>\r\n                  </Row>\r\n                  <br />\r\n                  <br />\r\n                  <ButtonGroup>\r\n                    <ToggleButton\r\n                      type=\"checkbox\"\r\n                      value={selopen}\r\n                      onClick={handleOpened}\r\n                      variant=\"outline-success\"\r\n                      checked={sellopen}\r\n                    >\r\n                      Opened\r\n                    </ToggleButton>\r\n                  </ButtonGroup>\r\n                </Container>\r\n              </MDBox>\r\n              <MDBox textAlign=\"center\" p={5}>\r\n                <MDButton\r\n                  textAlign=\"center\"\r\n                  color=\"success\"\r\n                  variant=\"gradient\"\r\n                  onClick={handleCreate}\r\n                  size=\"large\"\r\n                >\r\n                  Get Job Posts\r\n                </MDButton>\r\n              </MDBox>\r\n            </Card>\r\n\r\n            <Backdrop\r\n              sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n              open={opened}\r\n            >\r\n              <CircularProgress color=\"info\" />\r\n            </Backdrop>\r\n          </Container>\r\n        </Grid>\r\n      </Grid>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default JobApplication;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationHistory\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationSettings\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\index.js",["989","990","991"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AllDegrees from \"./degree\";\r\nimport AllCourses from \"./courses\";\r\n\r\nfunction Education() {\r\n  const MySwal = withReactContent(Swal);\r\n  const { allCourses: AlCourses } = AllCourses();\r\n  const { allDegrees: AlDegrees } = AllDegrees();\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [specializationx, setSpecialization] = useState(\"\");\r\n  const [gradex, setGrades] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [udegreex, setUDegreex] = useState(\"\");\r\n  const [uspecializationx, setUSpecialization] = useState(\"\");\r\n  const [ugradex, setUGrades] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [degreex, setDegreex] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n    display: \"block\",\r\n  };\r\n\r\n  const changeDateandTime = (stimestamp, etimestamp) => {\r\n    const sdate = new Date(stimestamp);\r\n    let sdayx = \"\";\r\n    let smonthx = \"\";\r\n    let syearx = \"\";\r\n    if (sdate !== null) {\r\n      sdayx = sdate.getDate();\r\n      smonthx = sdate.getMonth() + 1;\r\n      syearx = sdate.getFullYear();\r\n    }\r\n\r\n    const edate = new Date(etimestamp);\r\n    let edayx = \"\";\r\n    let emonthx = \"\";\r\n    let eyearx = \"\";\r\n    if (edate !== null) {\r\n      edayx = edate.getDate();\r\n      emonthx = edate.getMonth() + 1;\r\n      eyearx = edate.getFullYear();\r\n    }\r\n    return `From ${syearx}/${smonthx}/${sdayx} to ${eyearx}/${emonthx}/${edayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      //   fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    const startCDate = new Date(startDate).getTime();\r\n    const endCDate = new Date(endDate).getTime();\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        degree: degreex,\r\n        specialization: specializationx,\r\n        grade: gradex,\r\n      });\r\n      console.log(raw);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/education/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setSpecialization(\"\");\r\n            setGrades(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n            setDegreex(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      degree: udegreex,\r\n      specialization: uspecializationx,\r\n      grade: ugradex,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDegreex(filteredItems[0].degree);\r\n    setUSpecialization(filteredItems[0].specialization);\r\n    setUGrades(filteredItems[0].grade);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Education\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" School's Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Degree\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      value={degreex}\r\n                      onChange={(e) => setDegreex(e.target.value)}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option value=\"\">--Select Degree--</option>\r\n                      {AlDegrees.map((api) => (\r\n                        <option key={api.id} value={api.value}>\r\n                          {api.name}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                    <br />\r\n                  </MDBox>\r\n                  <MDBox mt={-1}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Specialization\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      aria-label=\"Default select example\"\r\n                      value={specializationx}\r\n                      onChange={(e) => setSpecialization(e.target.value)}\r\n                    >\r\n                      <option>--Select Specialization--</option>\r\n                      {AlCourses.map((api) => (\r\n                        <option key={api.name} value={api.name}>\r\n                          {api.name}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                  </MDBox>\r\n                  <MDBox mt={2}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Grade\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      aria-label=\"Default select example\"\r\n                      value={gradex}\r\n                      onChange={(e) => setGrades(e.target.value)}\r\n                    >\r\n                      <option>--Select Grade--</option>\r\n                      <option value=\"First class\">First class</option>\r\n                      <option value=\"Second class upper\">Second class upper</option>\r\n                      <option value=\"Second class lower\">Second class lower</option>\r\n                      <option value=\"Third class\">Third class</option>\r\n                    </Form.Select>\r\n                  </MDBox>{\" \"}\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.specialization}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Degree: {item.degree}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Grade: {item.grade}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {changeDateandTime(item.startTime, item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Education\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card style={style}>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Education\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" School's Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Degree\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          value={udegreex}\r\n                          onChange={(e) => setUDegreex(e.target.value)}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option value=\"\">--Select Degree--</option>\r\n                          {AlDegrees.map((api) => (\r\n                            <option key={api.id} value={api.value}>\r\n                              {api.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        <br />\r\n                      </MDBox>\r\n                      <MDBox mt={-1}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Specialization\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          value={uspecializationx}\r\n                          onChange={(e) => setUSpecialization(e.target.value)}\r\n                        >\r\n                          <option>--Select Specialization--</option>\r\n                          {AlCourses.map((api) => (\r\n                            <option key={api.name} value={api.name}>\r\n                              {api.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Grade\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          value={ugradex}\r\n                          onChange={(e) => setUGrades(e.target.value)}\r\n                        >\r\n                          <option>--Select Grade--</option>\r\n                          <option value=\"First class\">First class</option>\r\n                          <option value=\"Second class upper\">Second class upper</option>\r\n                          <option value=\"Second class lower\">Second class lower</option>\r\n                          <option value=\"Third class\">Third class</option>\r\n                        </Form.Select>\r\n                      </MDBox>{\" \"}\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Education;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\positionHeld\\index.js",["992","993","994"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction PositionHeld() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n  const [placex, setPlace] = useState(\"\");\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [uplacex, setUPlace] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n    display: \"block\",\r\n  };\r\n\r\n  const changeDateandTime = (stimestamp, etimestamp) => {\r\n    const sdate = new Date(stimestamp);\r\n    let sdayx = \"\";\r\n    let smonthx = \"\";\r\n    let syearx = \"\";\r\n    if (sdate !== null) {\r\n      sdayx = sdate.getDate();\r\n      smonthx = sdate.getMonth() + 1;\r\n      syearx = sdate.getFullYear();\r\n    }\r\n\r\n    const edate = new Date(etimestamp);\r\n    let edayx = \"\";\r\n    let emonthx = \"\";\r\n    let eyearx = \"\";\r\n    if (edate !== null) {\r\n      edayx = edate.getDate();\r\n      emonthx = edate.getMonth() + 1;\r\n      eyearx = edate.getFullYear();\r\n    }\r\n    return `From ${syearx}/${smonthx}/${sdayx} to ${eyearx}/${emonthx}/${edayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n        console.log(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n\r\n      const startCDate = new Date(startDate).getTime();\r\n      const endCDate = new Date(endDate).getTime();\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        descrip: descripx,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        place: placex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n            setPlace(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      descrip: udescripx,\r\n      place: uplacex,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        const result = await res.text();\r\n        if (result === null || result === undefined || result === \"\") {\r\n          return {};\r\n        }\r\n        return JSON.parse(result);\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUPlace(filteredItems[0].place);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Position Held\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" Position Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Description *\"\r\n                            value={descripx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setDescrip(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Place *\"\r\n                        value={placex || \"\"}\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPlace(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Position: {item.place}\r\n                          </MDTypography>{\" \"}\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {changeDateandTime(item.startTime, item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Position Held\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card style={style}>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Position Held\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" Company Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\"Description *\"\r\n                                value={udescripx || \"\"}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUDescrip(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Place *\"\r\n                            value={uplacex || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setUPlace(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PositionHeld;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js",["995","996","997"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\nimport plutospaceImg from \"assets/images/PlutoSpaceImg.png\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction Cover() {\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  // Password toggle handler\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length !== 0) {\r\n      if (retypePasswordx !== passwordx) {\r\n        setCheckedPass(false);\r\n        // eslint-disable-next-line no-unused-expressions\r\n        document.getElementById(\"password\").innerHTML = \"Passwords don't match<br>\";\r\n      }\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n    } else {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      const myHeaders = new Headers();\r\n      myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      // localStorage.setItem(\"pass1\", passwordx);\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/add`, requestOptions)\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.status === \"SUCCESS\") {\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            }).then(() => {\r\n              const raw2 = JSON.stringify({\r\n                empID: result.data.id,\r\n                username: result.data.email,\r\n                password: passwordx,\r\n              });\r\n              const requestOptions2 = {\r\n                method: \"POST\",\r\n                headers: myHeaders,\r\n                body: raw2,\r\n                redirect: \"follow\",\r\n              };\r\n              fetch(`${process.env.REACT_APP_ZAVE_URL}/individualLogin/add`, requestOptions2)\r\n                .then((res) => res.json())\r\n                .then((resultIL) => {\r\n                  MySwal.fire({\r\n                    title: resultIL.status,\r\n                    type: \"success\",\r\n                    text: resultIL.message,\r\n                  }).then(() => {\r\n                    localStorage.setItem(\"user\", JSON.stringify(result.data));\r\n                    navigate(\"/authentication/sign-in\", { replace: true });\r\n                  });\r\n                });\r\n            });\r\n          } else {\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"error\",\r\n              text: result.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/teptvv@gmail.com`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            console.log(result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDBox component=\"img\" src={plutospaceImg} alt=\"PlutoSpace\" width=\"10rem\" />\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Other Name\"\r\n                      value={onamex || \"\"}\r\n                      onKeyUp={handleOnOtherKeys}\r\n                      onChange={(e) => setOname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"email\"\r\n                      label=\"Personal Email\"\r\n                      value={emailx || \"\"}\r\n                      onKeyUp={handleOnPEmailKeys}\r\n                      onChange={getPersonalInformation}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-8\">\r\n                  <MDBox mb={2}>\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Marital Status\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      onChange={(e) => setMaritalStatus(e.target.value)}\r\n                      value={maritalStatusx || \"\"}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option>---Marital Status---</option>\r\n                      <option value=\"Single\">Single</option>\r\n                      <option value=\"Married\">Married</option>\r\n                      <option value=\"Divorced\">Divorced</option>\r\n                    </Form.Select>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n                    Date Of Birth\r\n                  </MDTypography>\r\n                  <MDBox mb={4} mt={-1}>\r\n                    <div>\r\n                      <style>\r\n                        {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                      </style>\r\n                      <DatePicker\r\n                        date={startDate}\r\n                        wrapperClassName=\"date-picker\"\r\n                        placeholder=\"Select Birth Date\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        confirmBtnText=\"Confirm\"\r\n                        showCancelButton=\"true\"\r\n                        customStyles={{\r\n                          placeholderText: {\r\n                            fontSize: 5,\r\n                          },\r\n                          dateIcon: {\r\n                            height: 0,\r\n                            width: 0,\r\n                          },\r\n                          dateText: {\r\n                            color: \"#b3b4b5\",\r\n                            fontSize: 16,\r\n                          },\r\n                          dateInput: {\r\n                            borderWidth: 0,\r\n                          },\r\n                        }}\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      Country\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialCountryx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCCountry}\r\n                      >\r\n                        <option>--Select Country--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default Cover;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\JobApplication\\ManualApplication\\View\\index.js",["998","999","1000"],"// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\n\r\n// import MDBox from \"components/MDBox\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\n// import CardActions from \"@mui/material/CardActions\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport MDButton from \"components/MDButton\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport GHeaders from \"getHeader\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction ViewJobPost() {\r\n  //   const MySwal = withReactContent(Swal);\r\n  const [jobPost, setJobPost] = useState([]);\r\n  const MySwal = withReactContent(Swal);\r\n  const [opened, setOpened] = useState(false);\r\n  // const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handleApply = (value) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n    console.log(data11);\r\n    const personalIDs = data11.id;\r\n    const raw = JSON.stringify({\r\n      empID: personalIDs,\r\n      jobPostID: value,\r\n      type: 0,\r\n      status: \"Applied\",\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobApplication/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobPost/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setJobPost(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              View Job Post\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  {jobPost.length > 0 && (\r\n                    <Card sx={{ maxWidth: 800 }}>\r\n                      <CardContent>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          <div\r\n                            // eslint-disable-next-line react/no-danger\r\n                            dangerouslySetInnerHTML={{ __html: jobPost[0].description }}\r\n                          />\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Job Status: {jobPost[0].jobStatus}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Company Name: {jobPost[0].orgName}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Job Status: {jobPost[0].jobStatus}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Industry: {jobPost[0].industry}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Location: {jobPost[0].location}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Salary Expectation: {jobPost[0].salaryExpectation}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Created Time: {changeDate(jobPost[0].createdTime)}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"120%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Closing Time: {changeDate(jobPost[0].closingTime)}\r\n                        </MDTypography>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={() => handleApply(jobPost[0].id)}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"left\"\r\n                        >\r\n                          Apply\r\n                        </MDButton>\r\n                      </CardContent>\r\n                    </Card>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Container>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default ViewJobPost;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\position\\index.js",["1001"],"// import React, { useState } from \"react\";\r\n\r\n// import DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\n// import Footer from \"examples/Footer\";\r\n// import MDButton from \"components/MDButton\";\r\n// import MDInput from \"components/MDInput\";\r\n\r\n// import { Logger } from \"logging-library\";\r\n// import FileViewer from \"react-file-viewer\";\r\n// import { CustomErrorComponent } from \"custom-error\";\r\n\r\n// import DocViewer, { DocViewerRenderers } from \"react-doc-viewer\";\r\n// import Iframe from \"react-iframe\";\r\n// import test1 from \"./test1.jpeg\";\r\n// import test2 from \"./test2.pdf\";\r\n// import test3 from \"./test3.png\";\r\n// import testExcel from \"./test-excel.xlsx\";\r\n// import testTxt from \"./test-txt.txt\";\r\n// import testDocx from \"./test-doc.doc\";\r\n// import testPpt from \"./test-ppt.pptx\";\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction Positions() {\r\n  console.log(\"Tight\");\r\n  //   const [files, setFiles] = useState();\r\n  //   const docs = [\r\n  //     { uri: test3 },\r\n  //     { uri: test2 },\r\n  //     { uri: test1 },\r\n  //     { uri: \"http://ieee802.org/secmail/docIZSEwEqHFr.doc&embedded=true\" },\r\n  //     { uri: testExcel },\r\n  //     { uri: testTxt },\r\n  //     { uri: testDocx },\r\n  //     { uri: testPpt },\r\n  //     // // eslint-disable-next-line global-require\r\n  //     // { uri: require(\"./test1.jpeg\") }, // Local File\r\n  //     // // eslint-disable-next-line global-require\r\n  //     // { uri: require(\"./test3.png\") }, // Local File\r\n  //     // // eslint-disable-next-line global-require\r\n  //     // { uri: require(\"./test2.pdf\") }, // Local Fil\r\n  //   ];\r\n  //   // const uuri = \"http%3A%2F%2Fieee802%2Eorg%3A80%2Fsecmail%2FdocIZSEwEqHFr%2Edoc\";\r\n  //   // // eslint-disable-next-line prefer-template\r\n  //   // console.log(\"https://view.officeapps.live.com/op/embed.aspx?src=\" + uuri);\r\n  //   const [view, setView] = useState(false);\r\n  //   const handleView = () => {\r\n  //     setView(!view);\r\n  //   };\r\n  //   const onError = (e) => {\r\n  //     Logger.logError(e, \"error in file-viewer\");\r\n  //   };\r\n  //   const file = testExcel;\r\n  //   const type = \"pdf\";\r\n  //   const changeFiles = (e) => {\r\n  //     const fii = e.target.files;\r\n  //     console.log(fii[0]);\r\n  //     const fileReader = new FileReader();\r\n  //     fileReader.onload = (event) => {\r\n  //       const { result } = event.target;\r\n  //       setFiles(result);\r\n  //     };\r\n  //     fileReader.readAsDataURL(fii[0]);\r\n  //   };\r\n  //   return (\r\n  //     <DashboardLayout>\r\n  //       <DashboardNavbar />\r\n  //       <MDInput type=\"file\" files={files} onChange={(e) => changeFiles(e)} />\r\n  //       <div className=\"container\" id=\"msdoc-renderer\">\r\n  //         <iframe\r\n  //           title=\"msdoc-iframe2\"\r\n  //           src=\"https://docs.google.com/gview?url=http://ieee802.org/secmail/docIZSEwEqHFr.doc&embedded=true\"\r\n  //           width=\"100%\"\r\n  //           height=\"100%\"\r\n  //           frameBorder=\"0\"\r\n  //         >\r\n  //           This is an embedded{\" \"}\r\n  //           <a target=\"_blank\" href=\"http://office.com\" rel=\"noreferrer\">\r\n  //             Microsoft Office\r\n  //           </a>{\" \"}\r\n  //           document, powered by{\" \"}\r\n  //           <a target=\"_blank\" href=\"http://office.com/webapps\" rel=\"noreferrer\">\r\n  //             Office Online\r\n  //           </a>\r\n  //           .\r\n  //         </iframe>\r\n  //         <iframe title=\"msdoc-iframe3\" src={file} width=\"100%\" height=\"100%\" frameBorder=\"0\">\r\n  //           {/* This is an embedded{\" \"}\r\n  //           <a target=\"_blank\" href=\"http://office.com\" rel=\"noreferrer\">\r\n  //             Microsoft Office\r\n  //           </a>{\" \"}\r\n  //           document, powered by{\" \"}\r\n  //           <a target=\"_blank\" href=\"http://office.com/webapps\" rel=\"noreferrer\">\r\n  //             Office Online\r\n  //           </a> */}\r\n  //           .\r\n  //         </iframe>\r\n  //         <Iframe\r\n  //           id=\"msdoc-iframe\"\r\n  //           title=\"msdoc-iframe\"\r\n  //           src=\"https://view.officeapps.live.com/op/embed.aspx?src=http%3A%2F%2Fieee802%2Eorg%3A80%2Fsecmail%2FdocIZSEwEqHFr%2Edoc\"\r\n  //           frameBorder=\"0\"\r\n  //         />\r\n  //         <Iframe\r\n  //           id=\"msdoc-iframe\"\r\n  //           title=\"msdoc-iframe\"\r\n  //           src={`https://view.officeapps.live.com/op/embed.aspx?src=${testDocx}`}\r\n  //           frameBorder=\"0\"\r\n  //         />\r\n  //       </div>\r\n  //       <DocViewer pluginRenderers={DocViewerRenderers} documents={docs} />\r\n  //       <>\r\n  //         <MDButton onClick={handleView}>View</MDButton>\r\n  //         {view && (\r\n  //           <FileViewer\r\n  //             fileType={type}\r\n  //             filePath={file}\r\n  //             errorComponent={CustomErrorComponent}\r\n  //             onError={onError}\r\n  //           />\r\n  //         )}\r\n  //       </>\r\n  //       <Footer />\r\n  //     </DashboardLayout>\r\n  //   );\r\n}\r\n\r\nexport default Positions;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\applicationHistory\\view\\index.js",["1002"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\n// import CardActions from \"@mui/material/CardActions\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport GHeaders from \"getHeader\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nfunction ViewJobApplication() {\r\n  const [application, setApplication] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  // Method to change type\r\n  const changeType = (value) => {\r\n    if (value === 0) {\r\n      return \"Manual\";\r\n    }\r\n\r\n    return \"Automatic\";\r\n  };\r\n\r\n  // Method to set rescinded\r\n  const setRescinded = (value) => {\r\n    if (value) {\r\n      return \"True\";\r\n    }\r\n\r\n    return \"False\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_RAGA_URL}/jobApplication/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setApplication(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Return table\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              View Job Application\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  {application.length > 0 && (\r\n                    <Card sx={{ maxWidth: 500 }}>\r\n                      <CardContent>\r\n                        <MDTypography\r\n                          variant=\"h3\"\r\n                          fontWeight=\"medium\"\r\n                          fontSize=\"120%\"\r\n                          color=\"info\"\r\n                          textAlign=\"left\"\r\n                          mt={1}\r\n                        >\r\n                          {application[0].jobPost.title}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={1}\r\n                        >\r\n                          {application[0].jobPost.location}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          <div\r\n                            // eslint-disable-next-line react/no-danger\r\n                            dangerouslySetInnerHTML={{ __html: application[0].jobPost.description }}\r\n                          />\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Opening Time: {changeDate(application[0].jobPost.openingTime)}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Closing Time: {changeDate(application[0].jobPost.closingTime)}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h6\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Minimum Salary Expectation: NGN {application[0].jobPost.salaryExpectation}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Job Status: {application[0].jobPost.jobStatus}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Industry: {application[0].jobPost.industry}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Application Type: {changeType(application[0].type)}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Applied On: {changeDate(application[0].applicationTime)}\r\n                        </MDTypography>\r\n                        <MDTypography\r\n                          variant=\"h4\"\r\n                          color=\"text\"\r\n                          fontSize=\"75%\"\r\n                          textAlign=\"left\"\r\n                          mt={0}\r\n                        >\r\n                          Is Application Rescinded?: {setRescinded(application[0].rescinded)}\r\n                        </MDTypography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Container>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default ViewJobApplication;\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\postHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\getHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Footer\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\countries-states-master\\countries.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\degree.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\education\\courses.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js",["1003","1004","1005"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nexport default function UserData() {\r\n  const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDisable = (pIDVal) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/getByPersonalID/${orgIDs}/${pIDVal}`)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultPC) => {\r\n        if (resultPC.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: \"Reason For Delete\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          html: `<div align=\"center\"><select id=\"reasonForDelete\" class=\"form-control\" aria-label=\"Default select example\" style=\"width:auto;\">\r\n          <option value=\"\">---Reason For Delete---</option>\r\n          <option value=\"Retired\">Retired</option>\r\n          <option value=\"Late\">Late</option>\r\n          <option value=\"Resigned\">Resigned</option>\r\n          <option value=\"Sacked\">Sacked</option>\r\n        </select></div>`,\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\",\r\n        }).then((resultD) => {\r\n          if (resultD.isConfirmed) {\r\n            const modalValue = document.getElementById(\"reasonForDelete\").value;\r\n            const requestOptions = {\r\n              method: \"DELETE\",\r\n              headers: miHeaders,\r\n            };\r\n            fetch(\r\n              `${process.env.REACT_APP_ZAVE_URL}/personalcompany/delete/${resultPC.id}/${modalValue}`,\r\n              requestOptions\r\n            )\r\n              .then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              })\r\n              .then((resx) => {\r\n                if (resx.message === \"Expired Access\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Token Does Not Exist\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Unauthorized Access\") {\r\n                  navigate(\"/authentication/forbiddenPage\");\r\n                }\r\n                MySwal.fire({\r\n                  title: resx.status,\r\n                  type: \"success\",\r\n                  text: resx.message,\r\n                }).then(() => {\r\n                  window.location.reload();\r\n                });\r\n              })\r\n              .catch((error) => {\r\n                MySwal.fire({\r\n                  title: error.status,\r\n                  type: \"error\",\r\n                  text: error.message,\r\n                });\r\n              });\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleView = (value) => {\r\n    navigate(`/user-Management/view-User?id=${value}`);\r\n  };\r\n  const handleAddTOT = (value) => {\r\n    navigate(`/user-Management/user-TimeOff-Type?id=${value}`);\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handlePasswordReset = (value) => {\r\n    const headers = miHeaders;\r\n    console.log(value);\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${value}`, { headers })\r\n      .then((res) => res.json())\r\n      .then((resultp) => {\r\n        const raw = JSON.stringify({\r\n          username: resultp[0].email,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        console.log(resultp);\r\n        if (resultp.length > 0) {\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/login/resetpassword/`, requestOptions)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              const result = await res.text();\r\n              if (result === null || result === undefined || result === \"\") {\r\n                return {};\r\n              }\r\n              return JSON.parse(result);\r\n            })\r\n            .then((resx) => {\r\n              if (resx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n              MySwal.fire({\r\n                title: resx.status,\r\n                type: \"success\",\r\n                text: resx.message,\r\n              }).then(() => {\r\n                window.location.reload();\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              MySwal.fire({\r\n                title: error.status,\r\n                type: \"error\",\r\n                text: error.message,\r\n              });\r\n            });\r\n        } else {\r\n          MySwal.fire({\r\n            title: \"NOT_FOUND\",\r\n            type: \"error\",\r\n            text: \"User Not Found\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n  // const handleAddsalary = (value) => {\r\n  //   navigate(`/user-Management/user-Salary`(value));\r\n  // };\r\n\r\n  const handleAddsalary = (value) => {\r\n    navigate(`/user-Management/user-Salary?id=${value}`);\r\n  };\r\n\r\n  const handleUpdateSystemRole = (value) => {\r\n    navigate(`/update-system-role?id=${value}`);\r\n  };\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"First Name\", accessor: \"personal.fname\", align: \"left\" },\r\n      { Header: \"Last Name\", accessor: \"personal.lname\", align: \"left\" },\r\n      { Header: \"Email\", accessor: \"personal.email\", align: \"left\" },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"personal.createdTime\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Actions\",\r\n        accessor: \"personal.id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#dadada\",\r\n                borderRadius: \"2px\",\r\n              }}\r\n            >\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                  <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => handleView(value)}>\r\n                    View/Add Office Details\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddTOT(value)}>\r\n                    Add Time-Off Type\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddsalary(value)}>User Salary</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleUpdateSystemRole(value)}>\r\n                    Change User&apos;s System Role\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handlePasswordReset(value)}>\r\n                    Reset Password\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\imgHeader.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js",["1006","1007"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\nimport { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ReportsPollData() {\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const navigate = useNavigate();\r\n  const [resultx, setResult] = useState(\"\");\r\n  console.log(resultx);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"MonoUser1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setResult(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\r\n    datasets: { label: \"Sales\", data: [50, 20, 10, 22, 50, 10, 40] },\r\n  };\r\n}\r\n","C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDAvatar\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\link.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\container.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDProgress\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js",[],"C:\\Users\\ABIOYE DANIEL\\Desktop\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js",[],{"ruleId":"1008","replacedBy":"1009"},{"ruleId":"1010","replacedBy":"1011"},{"ruleId":"1012","replacedBy":"1013"},{"ruleId":"1014","replacedBy":"1015"},{"ruleId":"1016","replacedBy":"1017"},{"ruleId":"1018","severity":1,"message":"1019","line":73,"column":11,"nodeType":"1020","messageId":"1021","endLine":73,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":104,"column":11,"nodeType":"1020","messageId":"1021","endLine":104,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":190,"column":13,"nodeType":"1020","messageId":"1021","endLine":190,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":191,"column":13,"nodeType":"1020","messageId":"1021","endLine":191,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":126,"column":5,"nodeType":"1020","messageId":"1021","endLine":126,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":152,"column":11,"nodeType":"1020","messageId":"1021","endLine":152,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":219,"column":11,"nodeType":"1020","messageId":"1021","endLine":219,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":522,"column":15,"nodeType":"1020","messageId":"1021","endLine":522,"endColumn":26},{"ruleId":"1018","severity":1,"message":"1019","line":533,"column":5,"nodeType":"1020","messageId":"1021","endLine":533,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":534,"column":5,"nodeType":"1020","messageId":"1021","endLine":534,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":557,"column":7,"nodeType":"1020","messageId":"1021","endLine":557,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":560,"column":7,"nodeType":"1020","messageId":"1021","endLine":560,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":571,"column":7,"nodeType":"1020","messageId":"1021","endLine":571,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":607,"column":11,"nodeType":"1020","messageId":"1021","endLine":607,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":616,"column":13,"nodeType":"1020","messageId":"1021","endLine":616,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":651,"column":9,"nodeType":"1020","messageId":"1021","endLine":651,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":669,"column":11,"nodeType":"1020","messageId":"1021","endLine":669,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":98,"column":11,"nodeType":"1020","messageId":"1021","endLine":98,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":592,"column":11,"nodeType":"1020","messageId":"1021","endLine":592,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":622,"column":15,"nodeType":"1020","messageId":"1021","endLine":622,"endColumn":26},{"ruleId":"1018","severity":1,"message":"1019","line":634,"column":19,"nodeType":"1020","messageId":"1021","endLine":634,"endColumn":30},{"ruleId":"1018","severity":1,"message":"1019","line":97,"column":5,"nodeType":"1020","messageId":"1021","endLine":97,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":98,"column":5,"nodeType":"1020","messageId":"1021","endLine":98,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":99,"column":5,"nodeType":"1020","messageId":"1021","endLine":99,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":100,"column":5,"nodeType":"1020","messageId":"1021","endLine":100,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":101,"column":5,"nodeType":"1020","messageId":"1021","endLine":101,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":130,"column":11,"nodeType":"1020","messageId":"1021","endLine":130,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":159,"column":11,"nodeType":"1020","messageId":"1021","endLine":159,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":423,"column":11,"nodeType":"1020","messageId":"1021","endLine":423,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":449,"column":15,"nodeType":"1020","messageId":"1021","endLine":449,"endColumn":26},{"ruleId":"1018","severity":1,"message":"1019","line":206,"column":13,"nodeType":"1020","messageId":"1021","endLine":206,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":207,"column":13,"nodeType":"1020","messageId":"1021","endLine":207,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":208,"column":13,"nodeType":"1020","messageId":"1021","endLine":208,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":97,"column":9,"nodeType":"1020","messageId":"1021","endLine":97,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":187,"column":7,"nodeType":"1020","messageId":"1021","endLine":187,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":196,"column":7,"nodeType":"1020","messageId":"1021","endLine":196,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":247,"column":5,"nodeType":"1020","messageId":"1021","endLine":247,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":222,"column":7,"nodeType":"1020","messageId":"1021","endLine":222,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":298,"column":5,"nodeType":"1020","messageId":"1021","endLine":298,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":192,"column":5,"nodeType":"1020","messageId":"1021","endLine":192,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":202,"column":5,"nodeType":"1020","messageId":"1021","endLine":202,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":203,"column":5,"nodeType":"1020","messageId":"1021","endLine":203,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":217,"column":5,"nodeType":"1020","messageId":"1021","endLine":217,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":225,"column":5,"nodeType":"1020","messageId":"1021","endLine":225,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":294,"column":5,"nodeType":"1020","messageId":"1021","endLine":294,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":306,"column":9,"nodeType":"1020","messageId":"1021","endLine":306,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":310,"column":9,"nodeType":"1020","messageId":"1021","endLine":310,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":321,"column":9,"nodeType":"1020","messageId":"1021","endLine":321,"endColumn":20},{"ruleId":"1022","severity":1,"message":"1023","line":325,"column":9,"nodeType":"1024","messageId":"1021","endLine":325,"endColumn":53},{"ruleId":"1018","severity":1,"message":"1019","line":229,"column":7,"nodeType":"1020","messageId":"1021","endLine":229,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":240,"column":7,"nodeType":"1020","messageId":"1021","endLine":240,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":309,"column":5,"nodeType":"1020","messageId":"1021","endLine":309,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":132,"column":9,"nodeType":"1020","messageId":"1021","endLine":132,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":225,"column":7,"nodeType":"1020","messageId":"1021","endLine":225,"endColumn":18},{"ruleId":"1018","severity":1,"message":"1019","line":301,"column":5,"nodeType":"1020","messageId":"1021","endLine":301,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":399,"column":11,"nodeType":"1020","messageId":"1021","endLine":399,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":401,"column":13,"nodeType":"1020","messageId":"1021","endLine":401,"endColumn":24},{"ruleId":"1018","severity":1,"message":"1019","line":405,"column":11,"nodeType":"1020","messageId":"1021","endLine":405,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":48,"column":5,"nodeType":"1020","messageId":"1021","endLine":48,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":56,"column":5,"nodeType":"1020","messageId":"1021","endLine":56,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":131,"column":11,"nodeType":"1020","messageId":"1021","endLine":131,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":25,"column":3,"nodeType":"1020","messageId":"1021","endLine":25,"endColumn":14},{"ruleId":"1018","severity":1,"message":"1019","line":85,"column":11,"nodeType":"1020","messageId":"1021","endLine":85,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":53,"column":11,"nodeType":"1020","messageId":"1021","endLine":53,"endColumn":22},{"ruleId":"1018","severity":1,"message":"1019","line":159,"column":5,"nodeType":"1020","messageId":"1021","endLine":159,"endColumn":16},{"ruleId":"1018","severity":1,"message":"1019","line":172,"column":9,"nodeType":"1020","messageId":"1021","endLine":172,"endColumn":20},{"ruleId":"1018","severity":1,"message":"1019","line":23,"column":3,"nodeType":"1020","messageId":"1021","endLine":23,"endColumn":14},{"ruleId":"1018","severity":1,"message":"1019","line":57,"column":11,"nodeType":"1020","messageId":"1021","endLine":57,"endColumn":22},"lines-around-directive",["1025"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","padding-line-between-statements"]