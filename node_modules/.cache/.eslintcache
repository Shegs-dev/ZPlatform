[{"C:\\Users\\HP\\PlutospaceMono\\src\\index.js":"1","C:\\Users\\HP\\PlutospaceMono\\src\\App.js":"2","C:\\Users\\HP\\PlutospaceMono\\src\\context\\index.js":"3","C:\\Users\\HP\\PlutospaceMono\\src\\routes.js":"4","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\index.js":"5","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\index.js":"6","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\index.js":"7","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\index.js":"8","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\index.js":"9","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\index.js":"10","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js":"11","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js":"12","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js":"13","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\index.js":"14","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\index.js":"15","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\index.js":"16","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js":"17","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js":"18","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\index.js":"19","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userProfile\\index.js":"20","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js":"21","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userHistory\\index.js":"22","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js":"23","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\checklists\\index.js":"24","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groupview\\index.js":"25","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\index.js":"26","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js":"27","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js":"28","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js":"29","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js":"30","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js":"31","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js":"32","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\index.js":"33","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js":"34","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js":"35","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js":"36","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\index.js":"37","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js":"38","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js":"39","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js":"40","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\index.js":"41","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js":"42","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js":"43","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js":"44","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js":"45","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js":"46","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js":"47","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js":"48","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js":"49","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js":"50","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js":"51","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js":"52","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js":"53","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js":"54","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js":"55","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js":"56","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js":"57","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js":"58","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js":"59","C:\\Users\\HP\\PlutospaceMono\\src\\getHeader.js":"60","C:\\Users\\HP\\PlutospaceMono\\src\\postHeader.js":"61","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js":"62","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js":"63","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\index.js":"64","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js":"65","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js":"66","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\index.js":"67","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js":"68","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js":"69","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\index.js":"70","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js":"71","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Footer\\index.js":"72","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js":"73","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js":"74","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js":"75","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js":"76","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js":"77","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js":"78","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js":"79","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\index.js":"80","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js":"81","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js":"82","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js":"83","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js":"84","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js":"85","C:\\Users\\HP\\PlutospaceMono\\src\\countries-states-master\\countries.js":"86","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js":"87","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js":"88","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js":"89","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js":"90","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js":"91","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js":"92","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js":"93","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js":"94","C:\\Users\\HP\\PlutospaceMono\\src\\imgHeader.js":"95","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js":"96","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js":"97","C:\\Users\\HP\\PlutospaceMono\\src\\nigeria.js":"98","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js":"99","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js":"100","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js":"101","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js":"102","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js":"103","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js":"104","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js":"105","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js":"106","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js":"107","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js":"108","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js":"109","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js":"110","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js":"111","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js":"112","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js":"113","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js":"114","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js":"115","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js":"116","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js":"117","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js":"118","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js":"119","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js":"120","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js":"121","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js":"122","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js":"123","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js":"124","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js":"125","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js":"126","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js":"127","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js":"128","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js":"129","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js":"130","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js":"131","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js":"132","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js":"133","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js":"134","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js":"135","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js":"136","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js":"137","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js":"138","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js":"139","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js":"140","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js":"141","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js":"142","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js":"143","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js":"144","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js":"145","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js":"146","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js":"147","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js":"148","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js":"149","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js":"150","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js":"151","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js":"152","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js":"153","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js":"154","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js":"155","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js":"156","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js":"157","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js":"158","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js":"159","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js":"160","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js":"161","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\link.js":"162","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js":"163","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js":"164","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js":"165","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js":"166","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js":"167","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\container.js":"168","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js":"169","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js":"170","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js":"171","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js":"172","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js":"173","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js":"174","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js":"175","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js":"176","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js":"177","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js":"178","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js":"179","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js":"180","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js":"181","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js":"182","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js":"183","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js":"184","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js":"185","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js":"186","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js":"187","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js":"188","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js":"189","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js":"190","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js":"191","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js":"192","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js":"193","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js":"194","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js":"195","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js":"196","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js":"197","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js":"198","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js":"199","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js":"200","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js":"201","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js":"202","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js":"203","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js":"204","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js":"205","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js":"206","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js":"207","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js":"208","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js":"209","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js":"210","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js":"211","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js":"212","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js":"213","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js":"214","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js":"215","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js":"216","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js":"217","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js":"218","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js":"219","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js":"220","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js":"221","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js":"222","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js":"223","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js":"224","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js":"225","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js":"226","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js":"227","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js":"228","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js":"229","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js":"230","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js":"231","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js":"232","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js":"233","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js":"234","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js":"235","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js":"236","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js":"237","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js":"238","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js":"239","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js":"240","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\index.js":"241","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\index.js":"242","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js":"243","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js":"244","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js":"245","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\skills\\index.js":"246","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\index.js":"247","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\courses.js":"248","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\degree.js":"249","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\workHistory\\index.js":"250","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\positionHeld\\index.js":"251"},{"size":951,"mtime":1656440824194,"results":"252","hashOfConfig":"253"},{"size":4652,"mtime":1656440822248,"results":"254","hashOfConfig":"253"},{"size":4432,"mtime":1656440823769,"results":"255","hashOfConfig":"253"},{"size":9529,"mtime":1656981805020,"results":"256","hashOfConfig":"253"},{"size":9581,"mtime":1656440824029,"results":"257","hashOfConfig":"253"},{"size":1747,"mtime":1656440823446,"results":"258","hashOfConfig":"253"},{"size":6774,"mtime":1656440823297,"results":"259","hashOfConfig":"253"},{"size":7079,"mtime":1656440822857,"results":"260","hashOfConfig":"253"},{"size":7002,"mtime":1656692321977,"results":"261","hashOfConfig":"253"},{"size":14811,"mtime":1656440824450,"results":"262","hashOfConfig":"253"},{"size":1256,"mtime":1656440824532,"results":"263","hashOfConfig":"253"},{"size":12195,"mtime":1656440824443,"results":"264","hashOfConfig":"253"},{"size":12082,"mtime":1656440824528,"results":"265","hashOfConfig":"253"},{"size":5335,"mtime":1656617395390,"results":"266","hashOfConfig":"253"},{"size":6840,"mtime":1656440824514,"results":"267","hashOfConfig":"253"},{"size":7074,"mtime":1656440824565,"results":"268","hashOfConfig":"253"},{"size":6739,"mtime":1656440824579,"results":"269","hashOfConfig":"253"},{"size":14508,"mtime":1656440824578,"results":"270","hashOfConfig":"253"},{"size":11865,"mtime":1656440824654,"results":"271","hashOfConfig":"253"},{"size":9139,"mtime":1657065753524,"results":"272","hashOfConfig":"253"},{"size":61933,"mtime":1656440824660,"results":"273","hashOfConfig":"253"},{"size":14377,"mtime":1656440824650,"results":"274","hashOfConfig":"253"},{"size":34350,"mtime":1656440824523,"results":"275","hashOfConfig":"253"},{"size":8449,"mtime":1656440824451,"results":"276","hashOfConfig":"253"},{"size":7982,"mtime":1656440824521,"results":"277","hashOfConfig":"253"},{"size":10559,"mtime":1656440824517,"results":"278","hashOfConfig":"253"},{"size":12008,"mtime":1656440824659,"results":"279","hashOfConfig":"253"},{"size":12990,"mtime":1656440824652,"results":"280","hashOfConfig":"253"},{"size":12627,"mtime":1656440824529,"results":"281","hashOfConfig":"253"},{"size":13145,"mtime":1656440824447,"results":"282","hashOfConfig":"253"},{"size":36697,"mtime":1656440824556,"results":"283","hashOfConfig":"253"},{"size":14130,"mtime":1656440824448,"results":"284","hashOfConfig":"253"},{"size":6091,"mtime":1656440824520,"results":"285","hashOfConfig":"253"},{"size":7741,"mtime":1656440824445,"results":"286","hashOfConfig":"253"},{"size":8097,"mtime":1656440824561,"results":"287","hashOfConfig":"253"},{"size":7513,"mtime":1656440824656,"results":"288","hashOfConfig":"253"},{"size":9198,"mtime":1656440824560,"results":"289","hashOfConfig":"253"},{"size":8477,"mtime":1656440824563,"results":"290","hashOfConfig":"253"},{"size":9261,"mtime":1656440824558,"results":"291","hashOfConfig":"253"},{"size":8428,"mtime":1656440824527,"results":"292","hashOfConfig":"253"},{"size":11345,"mtime":1656440824350,"results":"293","hashOfConfig":"253"},{"size":5248,"mtime":1656440824562,"results":"294","hashOfConfig":"253"},{"size":13173,"mtime":1656440824360,"results":"295","hashOfConfig":"253"},{"size":4250,"mtime":1656529938818,"results":"296","hashOfConfig":"253"},{"size":8598,"mtime":1656979819417,"results":"297","hashOfConfig":"253"},{"size":10209,"mtime":1656440824429,"results":"298","hashOfConfig":"253"},{"size":6571,"mtime":1656440824425,"results":"299","hashOfConfig":"253"},{"size":443,"mtime":1656440824420,"results":"300","hashOfConfig":"253"},{"size":8944,"mtime":1656529874381,"results":"301","hashOfConfig":"253"},{"size":9940,"mtime":1656529801005,"results":"302","hashOfConfig":"253"},{"size":20547,"mtime":1656440824423,"results":"303","hashOfConfig":"253"},{"size":11556,"mtime":1656440824363,"results":"304","hashOfConfig":"253"},{"size":1798,"mtime":1656440824028,"results":"305","hashOfConfig":"253"},{"size":32100,"mtime":1656692344964,"results":"306","hashOfConfig":"253"},{"size":3255,"mtime":1656440823434,"results":"307","hashOfConfig":"253"},{"size":3000,"mtime":1656440824179,"results":"308","hashOfConfig":"253"},{"size":8472,"mtime":1656440824533,"results":"309","hashOfConfig":"253"},{"size":746,"mtime":1656440822918,"results":"310","hashOfConfig":"253"},{"size":751,"mtime":1656440822670,"results":"311","hashOfConfig":"253"},{"size":387,"mtime":1656440824193,"results":"312","hashOfConfig":"253"},{"size":369,"mtime":1656440824704,"results":"313","hashOfConfig":"253"},{"size":9749,"mtime":1656440824526,"results":"314","hashOfConfig":"253"},{"size":5140,"mtime":1656440824198,"results":"315","hashOfConfig":"253"},{"size":2084,"mtime":1656440823458,"results":"316","hashOfConfig":"253"},{"size":6761,"mtime":1656979356479,"results":"317","hashOfConfig":"253"},{"size":10706,"mtime":1656440824186,"results":"318","hashOfConfig":"253"},{"size":2450,"mtime":1656440823682,"results":"319","hashOfConfig":"253"},{"size":739,"mtime":1656440823269,"results":"320","hashOfConfig":"253"},{"size":739,"mtime":1656440822855,"results":"321","hashOfConfig":"253"},{"size":1243,"mtime":1656440823515,"results":"322","hashOfConfig":"253"},{"size":1880,"mtime":1656440824115,"results":"323","hashOfConfig":"253"},{"size":1877,"mtime":1656440824030,"results":"324","hashOfConfig":"253"},{"size":3611,"mtime":1656440824173,"results":"325","hashOfConfig":"253"},{"size":7989,"mtime":1656440823456,"results":"326","hashOfConfig":"253"},{"size":1763,"mtime":1656440824184,"results":"327","hashOfConfig":"253"},{"size":3195,"mtime":1656440824185,"results":"328","hashOfConfig":"253"},{"size":2297,"mtime":1656440823682,"results":"329","hashOfConfig":"253"},{"size":2736,"mtime":1656440823506,"results":"330","hashOfConfig":"253"},{"size":4767,"mtime":1656440822866,"results":"331","hashOfConfig":"253"},{"size":2617,"mtime":1656440823523,"results":"332","hashOfConfig":"253"},{"size":3065,"mtime":1656440823799,"results":"333","hashOfConfig":"253"},{"size":1723,"mtime":1656440824103,"results":"334","hashOfConfig":"253"},{"size":747,"mtime":1656440824113,"results":"335","hashOfConfig":"253"},{"size":1851,"mtime":1656440823523,"results":"336","hashOfConfig":"253"},{"size":4326,"mtime":1656440822863,"results":"337","hashOfConfig":"253"},{"size":502448,"mtime":1656440823794,"results":"338","hashOfConfig":"253"},{"size":8967,"mtime":1656440824362,"results":"339","hashOfConfig":"253"},{"size":2399,"mtime":1656440824417,"results":"340","hashOfConfig":"253"},{"size":1688,"mtime":1656440824116,"results":"341","hashOfConfig":"253"},{"size":2047,"mtime":1656440824416,"results":"342","hashOfConfig":"253"},{"size":9376,"mtime":1656440824516,"results":"343","hashOfConfig":"253"},{"size":4690,"mtime":1656440824658,"results":"344","hashOfConfig":"253"},{"size":9710,"mtime":1656440824653,"results":"345","hashOfConfig":"253"},{"size":8631,"mtime":1656440824559,"results":"346","hashOfConfig":"253"},{"size":369,"mtime":1656440824193,"results":"347","hashOfConfig":"253"},{"size":8329,"mtime":1656440824519,"results":"348","hashOfConfig":"253"},{"size":5700,"mtime":1656440824446,"results":"349","hashOfConfig":"253"},{"size":124,"mtime":1656440824663,"results":"350","hashOfConfig":"253"},{"size":8198,"mtime":1656440824579,"results":"351","hashOfConfig":"253"},{"size":7979,"mtime":1656440824513,"results":"352","hashOfConfig":"253"},{"size":2828,"mtime":1656440824178,"results":"353","hashOfConfig":"253"},{"size":8250,"mtime":1656440824564,"results":"354","hashOfConfig":"253"},{"size":11817,"mtime":1656440824449,"results":"355","hashOfConfig":"253"},{"size":1364,"mtime":1656440822671,"results":"356","hashOfConfig":"253"},{"size":1001,"mtime":1656440822672,"results":"357","hashOfConfig":"253"},{"size":632,"mtime":1656440822690,"results":"358","hashOfConfig":"253"},{"size":1898,"mtime":1656440822669,"results":"359","hashOfConfig":"253"},{"size":919,"mtime":1656440822673,"results":"360","hashOfConfig":"253"},{"size":1025,"mtime":1656440822688,"results":"361","hashOfConfig":"253"},{"size":612,"mtime":1656440822664,"results":"362","hashOfConfig":"253"},{"size":981,"mtime":1656440822736,"results":"363","hashOfConfig":"253"},{"size":1169,"mtime":1656440822698,"results":"364","hashOfConfig":"253"},{"size":2908,"mtime":1656440822676,"results":"365","hashOfConfig":"253"},{"size":2655,"mtime":1656440822677,"results":"366","hashOfConfig":"253"},{"size":2391,"mtime":1656440822683,"results":"367","hashOfConfig":"253"},{"size":763,"mtime":1656440822679,"results":"368","hashOfConfig":"253"},{"size":1359,"mtime":1656440822678,"results":"369","hashOfConfig":"253"},{"size":1223,"mtime":1656440822684,"results":"370","hashOfConfig":"253"},{"size":1487,"mtime":1656440822735,"results":"371","hashOfConfig":"253"},{"size":1618,"mtime":1656440822704,"results":"372","hashOfConfig":"253"},{"size":757,"mtime":1656440822703,"results":"373","hashOfConfig":"253"},{"size":1253,"mtime":1656440822703,"results":"374","hashOfConfig":"253"},{"size":688,"mtime":1656440822656,"results":"375","hashOfConfig":"253"},{"size":1864,"mtime":1656440822755,"results":"376","hashOfConfig":"253"},{"size":902,"mtime":1656440822657,"results":"377","hashOfConfig":"253"},{"size":1875,"mtime":1656440822700,"results":"378","hashOfConfig":"253"},{"size":1566,"mtime":1656440822756,"results":"379","hashOfConfig":"253"},{"size":928,"mtime":1656440822657,"results":"380","hashOfConfig":"253"},{"size":1414,"mtime":1656440822689,"results":"381","hashOfConfig":"253"},{"size":2410,"mtime":1656440822685,"results":"382","hashOfConfig":"253"},{"size":2016,"mtime":1656440822674,"results":"383","hashOfConfig":"253"},{"size":1924,"mtime":1656440822682,"results":"384","hashOfConfig":"253"},{"size":1497,"mtime":1656440822681,"results":"385","hashOfConfig":"253"},{"size":787,"mtime":1656440822687,"results":"386","hashOfConfig":"253"},{"size":1537,"mtime":1656440822697,"results":"387","hashOfConfig":"253"},{"size":1544,"mtime":1656440822680,"results":"388","hashOfConfig":"253"},{"size":819,"mtime":1656440822688,"results":"389","hashOfConfig":"253"},{"size":1053,"mtime":1656440822737,"results":"390","hashOfConfig":"253"},{"size":1024,"mtime":1656440822738,"results":"391","hashOfConfig":"253"},{"size":1021,"mtime":1656440822739,"results":"392","hashOfConfig":"253"},{"size":830,"mtime":1656440822665,"results":"393","hashOfConfig":"253"},{"size":997,"mtime":1656440822666,"results":"394","hashOfConfig":"253"},{"size":3403,"mtime":1656440823852,"results":"395","hashOfConfig":"253"},{"size":1328,"mtime":1656440822699,"results":"396","hashOfConfig":"253"},{"size":959,"mtime":1656440822673,"results":"397","hashOfConfig":"253"},{"size":709,"mtime":1656440822693,"results":"398","hashOfConfig":"253"},{"size":653,"mtime":1656440822694,"results":"399","hashOfConfig":"253"},{"size":801,"mtime":1656440822854,"results":"400","hashOfConfig":"253"},{"size":949,"mtime":1656440822856,"results":"401","hashOfConfig":"253"},{"size":1089,"mtime":1656440822775,"results":"402","hashOfConfig":"253"},{"size":867,"mtime":1656440822853,"results":"403","hashOfConfig":"253"},{"size":1485,"mtime":1656440822628,"results":"404","hashOfConfig":"253"},{"size":3370,"mtime":1656440822629,"results":"405","hashOfConfig":"253"},{"size":4780,"mtime":1656440822655,"results":"406","hashOfConfig":"253"},{"size":1169,"mtime":1656440822653,"results":"407","hashOfConfig":"253"},{"size":892,"mtime":1656440822630,"results":"408","hashOfConfig":"253"},{"size":4381,"mtime":1656440822652,"results":"409","hashOfConfig":"253"},{"size":1411,"mtime":1656440822701,"results":"410","hashOfConfig":"253"},{"size":1688,"mtime":1656440822754,"results":"411","hashOfConfig":"253"},{"size":982,"mtime":1656440822920,"results":"412","hashOfConfig":"253"},{"size":1255,"mtime":1656440822919,"results":"413","hashOfConfig":"253"},{"size":632,"mtime":1656440823016,"results":"414","hashOfConfig":"253"},{"size":976,"mtime":1656440823053,"results":"415","hashOfConfig":"253"},{"size":909,"mtime":1656440822921,"results":"416","hashOfConfig":"253"},{"size":1020,"mtime":1656440822945,"results":"417","hashOfConfig":"253"},{"size":612,"mtime":1656440822913,"results":"418","hashOfConfig":"253"},{"size":1149,"mtime":1656440823021,"results":"419","hashOfConfig":"253"},{"size":1888,"mtime":1656440822917,"results":"420","hashOfConfig":"253"},{"size":1468,"mtime":1656440822696,"results":"421","hashOfConfig":"253"},{"size":2672,"mtime":1656440822937,"results":"422","hashOfConfig":"253"},{"size":2635,"mtime":1656440822938,"results":"423","hashOfConfig":"253"},{"size":2371,"mtime":1656440822942,"results":"424","hashOfConfig":"253"},{"size":758,"mtime":1656440822939,"results":"425","hashOfConfig":"253"},{"size":1637,"mtime":1656440822660,"results":"426","hashOfConfig":"253"},{"size":658,"mtime":1656440822692,"results":"427","hashOfConfig":"253"},{"size":1453,"mtime":1656440822668,"results":"428","hashOfConfig":"253"},{"size":4191,"mtime":1656440824182,"results":"429","hashOfConfig":"253"},{"size":949,"mtime":1656440822922,"results":"430","hashOfConfig":"253"},{"size":1408,"mtime":1656440822861,"results":"431","hashOfConfig":"253"},{"size":3315,"mtime":1656440822862,"results":"432","hashOfConfig":"253"},{"size":892,"mtime":1656440822863,"results":"433","hashOfConfig":"253"},{"size":2389,"mtime":1656440822662,"results":"434","hashOfConfig":"253"},{"size":2192,"mtime":1656440822659,"results":"435","hashOfConfig":"253"},{"size":1521,"mtime":1656440822662,"results":"436","hashOfConfig":"253"},{"size":2065,"mtime":1656440822661,"results":"437","hashOfConfig":"253"},{"size":801,"mtime":1656440823231,"results":"438","hashOfConfig":"253"},{"size":1341,"mtime":1656440822938,"results":"439","hashOfConfig":"253"},{"size":688,"mtime":1656440822867,"results":"440","hashOfConfig":"253"},{"size":897,"mtime":1656440822868,"results":"441","hashOfConfig":"253"},{"size":1213,"mtime":1656440822943,"results":"442","hashOfConfig":"253"},{"size":918,"mtime":1656440822869,"results":"443","hashOfConfig":"253"},{"size":1546,"mtime":1656440823161,"results":"444","hashOfConfig":"253"},{"size":1399,"mtime":1656440822985,"results":"445","hashOfConfig":"253"},{"size":2001,"mtime":1656440822923,"results":"446","hashOfConfig":"253"},{"size":1875,"mtime":1656440823048,"results":"447","hashOfConfig":"253"},{"size":782,"mtime":1656440822945,"results":"448","hashOfConfig":"253"},{"size":2380,"mtime":1656440822944,"results":"449","hashOfConfig":"253"},{"size":1244,"mtime":1656440822940,"results":"450","hashOfConfig":"253"},{"size":1487,"mtime":1656440822941,"results":"451","hashOfConfig":"253"},{"size":1740,"mtime":1656440822941,"results":"452","hashOfConfig":"253"},{"size":814,"mtime":1656440822946,"results":"453","hashOfConfig":"253"},{"size":1603,"mtime":1656440823052,"results":"454","hashOfConfig":"253"},{"size":1467,"mtime":1656440823052,"results":"455","hashOfConfig":"253"},{"size":752,"mtime":1656440823050,"results":"456","hashOfConfig":"253"},{"size":1243,"mtime":1656440823051,"results":"457","hashOfConfig":"253"},{"size":1457,"mtime":1656440823020,"results":"458","hashOfConfig":"253"},{"size":987,"mtime":1656440822915,"results":"459","hashOfConfig":"253"},{"size":825,"mtime":1656440822914,"results":"460","hashOfConfig":"253"},{"size":1842,"mtime":1656440823160,"results":"461","hashOfConfig":"253"},{"size":653,"mtime":1656440823018,"results":"462","hashOfConfig":"253"},{"size":709,"mtime":1656440823018,"results":"463","hashOfConfig":"253"},{"size":1300,"mtime":1656440823021,"results":"464","hashOfConfig":"253"},{"size":1038,"mtime":1656440823103,"results":"465","hashOfConfig":"253"},{"size":999,"mtime":1656440823114,"results":"466","hashOfConfig":"253"},{"size":1011,"mtime":1656440823137,"results":"467","hashOfConfig":"253"},{"size":944,"mtime":1656440823296,"results":"468","hashOfConfig":"253"},{"size":1386,"mtime":1656440823049,"results":"469","hashOfConfig":"253"},{"size":1433,"mtime":1656440823019,"results":"470","hashOfConfig":"253"},{"size":1391,"mtime":1656440822916,"results":"471","hashOfConfig":"253"},{"size":1687,"mtime":1656440823159,"results":"472","hashOfConfig":"253"},{"size":658,"mtime":1656440823017,"results":"473","hashOfConfig":"253"},{"size":1617,"mtime":1656440822890,"results":"474","hashOfConfig":"253"},{"size":1079,"mtime":1656440823193,"results":"475","hashOfConfig":"253"},{"size":867,"mtime":1656440823229,"results":"476","hashOfConfig":"253"},{"size":1164,"mtime":1656440822865,"results":"477","hashOfConfig":"253"},{"size":1506,"mtime":1656440822912,"results":"478","hashOfConfig":"253"},{"size":2374,"mtime":1656440822912,"results":"479","hashOfConfig":"253"},{"size":2050,"mtime":1656440822891,"results":"480","hashOfConfig":"253"},{"size":2177,"mtime":1656440822890,"results":"481","hashOfConfig":"253"},{"size":937,"mtime":1656440824510,"results":"482","hashOfConfig":"253"},{"size":3075,"mtime":1656440824507,"results":"483","hashOfConfig":"253"},{"size":2277,"mtime":1656440824509,"results":"484","hashOfConfig":"253"},{"size":3173,"mtime":1656440823938,"results":"485","hashOfConfig":"253"},{"size":2646,"mtime":1656440824504,"results":"486","hashOfConfig":"253"},{"size":3162,"mtime":1656440823890,"results":"487","hashOfConfig":"253"},{"size":6367,"mtime":1656440824506,"results":"488","hashOfConfig":"253"},{"size":2482,"mtime":1656440823937,"results":"489","hashOfConfig":"253"},{"size":2461,"mtime":1656440823889,"results":"490","hashOfConfig":"253"},{"size":2976,"mtime":1656440824188,"results":"491","hashOfConfig":"253"},{"size":474,"mtime":1656440824189,"results":"492","hashOfConfig":"253"},{"size":1496,"mtime":1656440823386,"results":"493","hashOfConfig":"253"},{"size":1802,"mtime":1656440823666,"results":"494","hashOfConfig":"253"},{"size":1156,"mtime":1656440824192,"results":"495","hashOfConfig":"253"},{"size":2337,"mtime":1656440823335,"results":"496","hashOfConfig":"253"},{"size":1435,"mtime":1656440823665,"results":"497","hashOfConfig":"253"},{"size":18201,"mtime":1657060166006,"results":"498","hashOfConfig":"253"},{"size":32722,"mtime":1657060183752,"results":"499","hashOfConfig":"253"},{"size":6777,"mtime":1657048863195,"results":"500","hashOfConfig":"253"},{"size":3523,"mtime":1656781115676,"results":"501","hashOfConfig":"253"},{"size":27434,"mtime":1657060215990,"results":"502","hashOfConfig":"253"},{"size":27424,"mtime":1657060778348,"results":"503","hashOfConfig":"253"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},"19qt1lf",{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"506"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"506"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"506"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"506"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"506"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"506"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"506"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"506"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"506"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"506"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"875","messages":"876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"877","messages":"878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"937","messages":"938","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"939","messages":"940","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"941","messages":"942","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"943","messages":"944","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"945","messages":"946","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"947","messages":"948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"949","messages":"950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"953","messages":"954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"961","messages":"962","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"973","messages":"974","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"975","messages":"976","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"506"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1008","usedDeprecatedRules":"506"},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1017","usedDeprecatedRules":"506"},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1020","usedDeprecatedRules":"506"},"C:\\Users\\HP\\PlutospaceMono\\src\\index.js",[],["1021","1022","1023","1024","1025"],"C:\\Users\\HP\\PlutospaceMono\\src\\App.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\context\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\routes.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userProfile\\index.js",["1026","1027","1028"],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userHistory\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js",["1029","1030","1031","1032","1033","1034","1035","1036","1037"],"// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction InviteUser() {\r\n  const [phonex, setPhone] = useState(\"\");\r\n  // const [startDate, setStartDate] = useState(new Date());\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [idx, setId] = useState(0);\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [roleIDx, setRoleID] = useState(0);\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [emaily, setOemail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [deleteFlagx, setDeleteFlag] = useState(0);\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n  const [passEnabled, setPassEnabled] = useState(true);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  useEffect(() => {\r\n    /* if (idx === 0) {\r\n      setPassEnabled(true);\r\n    } */\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const fnameu = urlParams.get(\"fname\");\r\n    const lnameu = urlParams.get(\"lname\");\r\n    const emailu = urlParams.get(\"email\");\r\n    const orgIDu = urlParams.get(\"orgID\");\r\n    const roleIDu = urlParams.get(\"role\");\r\n    console.log(fnameu);\r\n    console.log(lnameu);\r\n    console.log(emailu);\r\n    console.log(orgIDu);\r\n    console.log(roleIDu);\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      setFname(fnameu);\r\n      setLname(lnameu);\r\n      setOemail(emailu);\r\n      setOrgID(orgIDu);\r\n      setRoleID(roleIDu);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/${emailpersonal}`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            setPassEnabled(false);\r\n            setOname(result.oname);\r\n            setId(result.id);\r\n            setPhone(result.pno);\r\n            setNationality(result.nationality);\r\n            setResidentialStreet(result.residentialStreet);\r\n            setResidentialCity(result.residentialCity);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === result.residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setResidentialState(result.residentialState);\r\n            setResidentialCountry(result.residentialCountry);\r\n            setMaritalStatus(result.maritalStatus);\r\n            setDeleteFlag(result.deleteFlag);\r\n            setSysStatus(result.sysStatus);\r\n            setCreatedTime(result.createdTime);\r\n\r\n            setStartDate(\r\n              new Date(`${result.monthOfBirth}/${result.dayOfBirth}/${result.yearOfBirth}`)\r\n            );\r\n          } else {\r\n            setId(0);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setId(0);\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      // const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        id: idx,\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n        deleteFlag: deleteFlagx,\r\n        sysStatus: sysStatusx,\r\n        createdTime: createdTimex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      localStorage.setItem(\"email1\", emailx);\r\n\r\n      let endpoint = \"add\";\r\n      if (idx !== 0) {\r\n        endpoint = \"update\";\r\n      }\r\n      if (endpoint === \"update\") {\r\n        setPassword(\"\");\r\n      }\r\n      const endpointPC = \"add\";\r\n      let endpointL = \"add\";\r\n      if (endpoint === \"update\") {\r\n        endpointL = `updateOrganization/${emailx}/${orgIDx}`;\r\n      }\r\n      let methodLUO = \"POST\";\r\n      if (endpointL !== \"add\") {\r\n        methodLUO = \"GET\";\r\n      }\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/${endpoint}`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          localStorage.setItem(\"personalInfo\", JSON.stringify(result.data));\r\n          const raw1 = JSON.stringify({\r\n            orgID: orgIDx,\r\n            personalID: result.data.id,\r\n            email: emaily,\r\n            roleID: roleIDx,\r\n          });\r\n          const requestOptions1 = {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: raw1,\r\n            redirect: \"follow\",\r\n          };\r\n\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/${endpointPC}`, requestOptions1)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resultx) => {\r\n              console.log(resultx);\r\n              localStorage.setItem(\"company\", JSON.stringify(resultx.data));\r\n              const raw2 = JSON.stringify({\r\n                orgID: orgIDx,\r\n                empID: result.data.id,\r\n                username: emailx,\r\n                password: passwordx,\r\n              });\r\n              const requestOptions2 = {\r\n                method: methodLUO,\r\n                headers: myHeaders,\r\n                body: raw2,\r\n                redirect: \"follow\",\r\n              };\r\n              fetch(`${process.env.REACT_APP_ZAVE_URL}/login/${endpointL}`, requestOptions2)\r\n                .then(async (res) => {\r\n                  const aToken = res.headers.get(\"token-1\");\r\n                  localStorage.setItem(\"rexxdex\", aToken);\r\n                  return res.json();\r\n                })\r\n                .then(() => {\r\n                  setOpened(false);\r\n                  MySwal.fire({\r\n                    title: result.status,\r\n                    type: \"success\",\r\n                    text: result.message,\r\n                  }).then(() => {\r\n                    navigate(\"/authentication/sign-in\", { replace: true });\r\n                  });\r\n                });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  /* return <Select options={options} value={value} onChange={changeHandler} />\r\n} */\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h2\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            PlutoSpace\r\n          </MDTypography>\r\n          <MDTypography display=\"block\" variant=\"button\" color=\"white\" my={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"text\"\r\n                label=\"Other Name\"\r\n                value={onamex || \"\"}\r\n                onKeyUp={handleOnOtherKeys}\r\n                onChange={(e) => setOname(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Personal Email\"\r\n                value={emailx || \"\"}\r\n                onKeyUp={handleOnPEmailKeys}\r\n                onChange={getPersonalInformation}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Official Email\"\r\n                value={emaily || \"\"}\r\n                disabled\r\n                onChange={(e) => setOemail(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <div className=\"col-sm-8\">\r\n                <Form.Select\r\n                  aria-label=\"Default select example\"\r\n                  width=\"50%\"\r\n                  mx={34}\r\n                  value={maritalStatusx || \"\"}\r\n                  onChange={(e) => setMaritalStatus(e.target.value)}\r\n                >\r\n                  <option>--Marital Status--</option>\r\n                  <option value=\"Married\">Married</option>\r\n                  <option value=\"Single\">Single</option>\r\n                  <option value=\"Divorced\">Divorced</option>\r\n                </Form.Select>\r\n              </div>\r\n            </MDBox>\r\n            <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n              Date Of Birth\r\n            </MDTypography>\r\n            <MDBox mb={4} mt={-1}>\r\n              <div>\r\n                <style>\r\n                  {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                </style>\r\n                <DatePicker\r\n                  date={startDate}\r\n                  wrapperClassName=\"date-picker\"\r\n                  placeholder=\"Select Birth Date\"\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  confirmBtnText=\"Confirm\"\r\n                  showCancelButton=\"true\"\r\n                  customStyles={{\r\n                    placeholderText: {\r\n                      fontSize: 5,\r\n                    },\r\n                    dateIcon: {\r\n                      height: 0,\r\n                      width: 0,\r\n                    },\r\n                    dateText: {\r\n                      color: \"#b3b4b5\",\r\n                      fontSize: 16,\r\n                    },\r\n                    dateInput: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  }}\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  peekNextMonth\r\n                  showMonthDropdown\r\n                  showYearDropdown\r\n                  dropdownMode=\"select\"\r\n                />\r\n              </div>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-10\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Country\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={residentialCountryx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeRCCountry}\r\n                        >\r\n                          <option>--Select Country--</option>\r\n                          {AlCountry.map((apic) => (\r\n                            <option key={apic.code3} value={apic.name}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default InviteUser;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\checklists\\index.js",["1038","1039","1040"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [rolName, setRolName] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [vPermissions, setVPermissions] = useState([]);\r\n  const [roleStep, setRoleStep] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n  const orgIDs = data11.orgID;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    let isChecked = 0;\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      isChecked = 1;\r\n    }\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      roleID: id,\r\n      stepID: apix.id,\r\n      isCheck: isChecked,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    // const headers = miHeaders;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/save`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/role/get/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultg) => {\r\n        // setOpened(false);\r\n        if (resultg.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setRolName(resultg[0].name);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const permissionsList = [];\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/step/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setPermissions(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n        fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/getsRoleSteps/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setRoleStep(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((permission) => {\r\n              let check = false;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((rolPermi) => {\r\n                  if (rolPermi.stepID === permission.id) {\r\n                    if (rolPermi.isCheck === 1) {\r\n                      check = true;\r\n                    }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: permission.id,\r\n                name: permission.name,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(permissions);\r\n            console.log(roleStep);\r\n            console.log(permissionsList);\r\n            setVPermissions(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {rolName}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDTypography\r\n          variant=\"h4\"\r\n          textAlign=\"left\"\r\n          fontWeight=\"medium\"\r\n          color=\"secondary\"\r\n          mx={4}\r\n          mt={2}\r\n        >\r\n          Steps\r\n        </MDTypography>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {vPermissions.map((api) => (\r\n              <div key={api.id} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>{api.name}</Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groupview\\index.js",["1041","1042","1043","1044"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const [namex, setName] = useState(\"\");\r\n  const [groupmembers, setGroupMember] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [usermembers, setUserMember] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    e.preventDefault();\r\n    setOpened(true);\r\n\r\n    const checks = e.target.checked;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    if (checks) {\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        groupID: apix.groupID,\r\n        empID: apix.empID,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      // const headers = miHeaders;\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/addMember`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/groups/removeMember/${orgIDs}/${apix.groupID}/${apix.empID}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          setOpened(false);\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    const permissionsList = [];\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUsers(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/getByIds/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setName(resultrs[0].group.name);\r\n              setGroupMember(resultrs[0].groupMembers);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((emp) => {\r\n              let check = false;\r\n              if (resultrs[0].groupMembers != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs[0].groupMembers.map((member) => {\r\n                  if (member.empID === emp.personal.id) {\r\n                    // if (rolPermi.isCheck === 1) {\r\n                    check = true;\r\n                    // }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                groupID: id,\r\n                empID: emp.personal.id,\r\n                fname: emp.personal.fname,\r\n                lname: emp.personal.lname,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(users);\r\n            console.log(groupmembers);\r\n            setUserMember(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {namex}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {usermembers.map((api) => (\r\n              <div key={api.empID} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>\r\n                    {api.fname} {api.lname}\r\n                  </Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js",["1045","1046","1047","1048"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { MonnifyConsumer } from \"react-monnify\";\r\n\r\nfunction PaymentHis() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [descripx, setDescripx] = useState(\"\");\r\n  const [currencyx, setCurrency] = useState(\"NGN\");\r\n  const [amountx, setAmountx] = useState(0);\r\n  const [pnox, setPno] = useState(\"\");\r\n  const [bonusCheck, setBonusCheck] = useState([]);\r\n  const [referenceSKey, setReferenceSKey] = useState();\r\n  const [bonusSetID, setBonusSetID] = useState([]);\r\n\r\n  const [checkedEmail, setCheckedEmail] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n  const [checkedCity, setCheckedCity] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [auditSDate, setAuditSDate] = useState(\"\");\r\n  const [auditEDate, setAuditEDate] = useState(\"\");\r\n  const [concaBalance, setConcaBalance] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n  const bonusStatus = \"1\";\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/gets/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(resultapi);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getBalance/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          let comBalance = 0;\r\n          if (resultapi.length === 0) {\r\n            comBalance = 0;\r\n          } else {\r\n            comBalance = resultapi.balance;\r\n          }\r\n\r\n          let parts = 0;\r\n          if (comBalance > 0) {\r\n            parts = comBalance.toString().split(\".\");\r\n          }\r\n          const numberPart = parts[0];\r\n          const decimalPart = parts[1];\r\n          const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n          let value = 0;\r\n          if (comBalance > 0) {\r\n            value = numberPart.replace(thousands, \",\") + (decimalPart ? `.${decimalPart}` : \"\");\r\n          }\r\n          setConcaBalance(`NGN ${value}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/bonusSetting/getByStatus/${bonusStatus}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          if (resultapi.message === \"Your Organization Has Not Made Any Payment\") {\r\n            setBonusCheck([]);\r\n          } else {\r\n            setBonusCheck(resultapi);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  //   const honComplete = (response) => {\r\n  //     setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n  //     console.log(response); // card charged successfully, get reference here\r\n  //     if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n  //       setOpened(true);\r\n  //       const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n  //       //   bonusAmount: 10\r\n  //       //   createdTime: 1649875827073\r\n  //       //   deleteFlag: 0\r\n  //       //   endTime: 1651104000000\r\n  //       //   id: \"62571b73813e040d304c13fd\"\r\n  //       //   maxTrigger: 6000\r\n  //       //   minTrigger: 2000\r\n  //       //   name: \"Test Freebie\"\r\n  //       //   startTime: 1649894400000\r\n  //       //   status: 0\r\n  //       let allPayandBonus = 0;\r\n  //       let mBonusAmount = 0;\r\n  //       // eslint-disable-next-line radix\r\n  //       const amountCOn = parseInt(amountx);\r\n  //       // eslint-disable-next-line array-callback-return\r\n  //       bonusCheck.map((checkBonus) => {\r\n  //         if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else {\r\n  //           mBonusAmount = 0;\r\n  //           allPayandBonus = amountCOn;\r\n  //         }\r\n  //         // check = false;\r\n  //       });\r\n  //       const orgIDs = data11.orgID;\r\n  //       const raw = JSON.stringify({\r\n  //         orgID: orgIDs,\r\n  //         paidAmount: amountCOn,\r\n  //         bonusAmount: mBonusAmount,\r\n  //         totalAmount: allPayandBonus,\r\n  //       });\r\n  //       const requestOptions = {\r\n  //         method: \"POST\",\r\n  //         headers: myHeaders,\r\n  //         body: raw,\r\n  //         redirect: \"follow\",\r\n  //       };\r\n  //       console.log(raw);\r\n  //       fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n  //         .then(async (res) => {\r\n  //           const aToken = res.headers.get(\"token-1\");\r\n  //           localStorage.setItem(\"rexxdex\", aToken);\r\n  //           return res.json();\r\n  //         })\r\n  //         .then((result) => {\r\n  //           if (result.message === \"Expired Access\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Token Does Not Exist\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Unauthorized Access\") {\r\n  //             navigate(\"/authentication/forbiddenPage\");\r\n  //           }\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: result.status,\r\n  //             type: \"success\",\r\n  //             text: result.message,\r\n  //           }).then(() => {\r\n  //             window.location.reload();\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: error.status,\r\n  //             type: \"error\",\r\n  //             text: error.message,\r\n  //           });\r\n  //         });\r\n  //     }\r\n  //   };\r\n\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[-+]?[0-9]+.[0-9]+$/;\r\n    if (!amountx.match(letters)) {\r\n      setCheckedCity(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount - input a valid Amount<br>\";\r\n    }\r\n    if (amountx.match(letters)) {\r\n      setCheckedCity(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (amountx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const honClose = (response) => {\r\n    handleOnNameKeys();\r\n    handleOnEmailKeys();\r\n    handleOnCityKeys();\r\n    if (enabled) {\r\n      setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n      if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n        setOpened(true);\r\n\r\n        let allPayandBonus = 0;\r\n        let mBonusAmount = 0;\r\n        // eslint-disable-next-line radix\r\n        const amountCOn = parseInt(amountx);\r\n        if (bonusCheck.length === 0) {\r\n          mBonusAmount = 0;\r\n          allPayandBonus = amountCOn;\r\n        } else {\r\n          // eslint-disable-next-line array-callback-return\r\n          bonusCheck.map((checkBonus) => {\r\n            if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else {\r\n              mBonusAmount = 0;\r\n              allPayandBonus = amountCOn;\r\n            }\r\n            // check = false;\r\n          });\r\n        }\r\n\r\n        const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n        const orgIDs = data11.orgID;\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          paidAmount: amountCOn,\r\n          bonusAmount: mBonusAmount,\r\n          totalAmount: allPayandBonus,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((result) => {\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            setOpened(false);\r\n\r\n            const raw1 = JSON.stringify({\r\n              orgID: orgIDs,\r\n              bonusSettingID: bonusSetID,\r\n            });\r\n            const requestOptions1 = {\r\n              method: \"POST\",\r\n              headers: myHeaders,\r\n              body: raw1,\r\n              redirect: \"follow\",\r\n            };\r\n            if (mBonusAmount !== 0) {\r\n              fetch(\r\n                `${process.env.REACT_APP_EKOATLANTIC_URL}/bonusHistory/add`,\r\n                requestOptions1\r\n              ).then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              });\r\n            }\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const personalApiKey = \"MK_TEST_JB2L9T7HMG\";\r\n  const personalConCode = \"6428086775\";\r\n\r\n  const monNey = {\r\n    onClose: honClose,\r\n    amount: amountx,\r\n    currency: currencyx,\r\n    reference: referenceSKey,\r\n    customerFullName: namex,\r\n    customerEmail: emailx,\r\n    customerMobileNumber: pnox,\r\n    apiKey: personalApiKey,\r\n    contractCode: personalConCode,\r\n    paymentDescription: descripx,\r\n    isTestMode: true,\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const auditConSDate = new Date(auditSDate).getTime();\r\n    const auditConEDate = new Date(auditEDate).getTime();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      startDate: auditConSDate,\r\n      endDate: auditConEDate,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getFilter`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setItems(result);\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleGenReceipt = (filteredData, value) => {\r\n    const headers = miHeaders;\r\n    let receiptNumber = \"\";\r\n    // Avoid filter for empty string\r\n    if (!value) {\r\n      receiptNumber = \"\";\r\n    } else {\r\n      const filteredItems = filteredData.filter((item) => item.id === value);\r\n\r\n      receiptNumber = filteredItems[0].receiptNo;\r\n    }\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      receiptNo: receiptNumber,\r\n      paymentHistoryID: paymentHisValue,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentReceipt/generate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Organization\", accessor: \"orgName\", align: \"left\" },\r\n    { Header: \"Paid Amount\", accessor: \"paidAmount\", align: \"left\" },\r\n    { Header: \"Bonus Amount\", accessor: \"bonusAmount\", align: \"left\" },\r\n    { Header: \"Total Amount\", accessor: \"totalAmount\", align: \"left\" },\r\n    { Header: \"Balance\", accessor: \"balance\", align: \"left\" },\r\n    {\r\n      Header: \"Last Updated\",\r\n      accessor: \"lastUpdatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"Date Created\",\r\n      accessor: \"createdTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"id\",\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(items, value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Container>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5\">\r\n            <Card>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mt={2}\r\n                mx={0}\r\n                p={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Balance\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"white\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={2}\r\n                p={6}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography variant=\"h1\" fontWeight=\"medium\" color=\"info\" textAlign=\"center\">\r\n                  {concaBalance}\r\n                </MDTypography>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-7\">\r\n            <Card>\r\n              <MDBox pt={4} pb={3} px={3}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={-3}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Make Payment\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox component=\"form\" role=\"form\">\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Name(name on receipt) *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={emailx || \"\"}\r\n                            onKeyUp={handleOnEmailKeys}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            label=\"Email *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={currencyx || \"\"}\r\n                            onChange={(e) => setCurrency(e.target.value)}\r\n                            label=\"Currency *\"\r\n                            disabled\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-9\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={amountx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setAmountx(e.target.value)}\r\n                            label=\"Amount *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={descripx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setDescripx(e.target.value)}\r\n                            label=\"Description *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                            Phone Number *\r\n                          </MDTypography>\r\n                          <PhoneInput\r\n                            value={pnox}\r\n                            inputStyle={{ width: \"100%\" }}\r\n                            buttonStyle={{}}\r\n                            onChange={setPno}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <div>\r\n                      <MonnifyConsumer {...monNey} className=\"btn\">\r\n                        {({ initializePayment }) => (\r\n                          // eslint-disable-next-line react/button-has-type\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={() => initializePayment()}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Pay\r\n                          </MDButton>\r\n                        )}\r\n                      </MonnifyConsumer>\r\n                    </div>\r\n                  </MDBox>\r\n                </MDBox>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Payment History\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Start Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditSDate}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                            onChange={(time) => setAuditSDate(time)}\r\n                          />{\" \"}\r\n                        </MDBox>{\" \"}\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            End Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditEDate}\r\n                            onChange={(time) => setAuditEDate(time)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />{\" \"}\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleClick}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                        align=\"center\"\r\n                      >\r\n                        Add Filters\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      </Container>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PaymentHis;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js",["1049"],"import { useNavigate } from \"react-router-dom\";\r\nimport GHeaders from \"getHeader\";\r\nimport PHeaders from \"postHeader\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nfunction EscalateMatter() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [userx, setUser] = useState([]);\r\n  const [escalatetox, setEscalateto] = useState();\r\n  const [reasonx, setReason] = useState(\"\");\r\n  //   const [reasonTitle, setReasonTitle] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n          // setEscalateto(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernids = urlParams.get(\"id\");\r\n\r\n    const raw = JSON.stringify({\r\n      concernID: concernids,\r\n      escalateTo: escalatetox,\r\n      reasonForEscalation: reasonx,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/escalate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  //   const handleOnEscalateKeys = () => {\r\n  //     const letters = /^[a-zA-Z ]+$/;\r\n  //     if (!reasonx.match(letters)) {\r\n  //       setReasonTitle(false);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML =\r\n  //         \"Reason - input only capital and small letters<br>\";\r\n  //     }\r\n  //     if (reasonx.match(letters)) {\r\n  //       setReasonTitle(true);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"\";\r\n  //     }\r\n  //     if (reasonx.length === 0) {\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"Reason is required<br>\";\r\n  //     }\r\n  //     setEnabled(reasonTitle === true);\r\n  //   };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-2\">&nbsp;</div>\r\n        <div className=\"col-sm-8\" align=\"center\">\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={25}\r\n                  mt={-6}\r\n                  p={3}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Escalation\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"reason\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                {/* <Form> */}\r\n                <Form.Group\r\n                  className=\"mb-3\"\r\n                  controlId=\"setPurposex\"\r\n                  placeholder=\"Description\"\r\n                  value={reasonx || \"\"}\r\n                  onChange={(e) => setReason(e.target.value)}\r\n                >\r\n                  <Form.Label>Reason For Escalation</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows={2} />\r\n                </Form.Group>\r\n                {/* </Form> */}\r\n                {/* <option align=\"center\">Escalate Matter To</option>\r\n                {userx.map((api) => (\r\n                  <div key={api.personal.id} className=\"mb-3\" align=\"left\">\r\n                    <Form.Check.Input\r\n                      type=\"radio\"\r\n                      defaultChecked={api.isCheck}\r\n                      onClick={(e) => handleClick(e, api)}\r\n                      // onChange={setEscalateto}\r\n                    />\r\n                    <Form.Check.Label>\r\n                      &nbsp; {api.personal.fname} {api.personal.lname}\r\n                    </Form.Check.Label>\r\n                  </div>\r\n                ))} */}\r\n                <MDBox mb={2}>\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                    Reason For Escalation\r\n                  </MDTypography>\r\n                  <Form.Select\r\n                    value={escalatetox}\r\n                    onChange={(e) => setEscalateto(e.target.value)}\r\n                    aria-label=\"Default select example\"\r\n                    // onClick={(e) => handleClick(e)}\r\n                  >\r\n                    <option value=\"\">Escalate Matter To</option>\r\n                    {userx.map((api) => (\r\n                      <option key={api.personal.id} value={api.personal.id}>\r\n                        {api.personal.fname} {api.personal.lname}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                  <br />\r\n                </MDBox>\r\n              </MDBox>\r\n              <MDBox mt={4} mb={1}>\r\n                <MDButton\r\n                  variant=\"gradient\"\r\n                  onClick={handleClick}\r\n                  // onKeyUp={handleOnEscalateKeys}\r\n                  // disabled={!enabled}\r\n                  color=\"info\"\r\n                  width=\"50%\"\r\n                  align=\"center\"\r\n                >\r\n                  Add\r\n                </MDButton>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default EscalateMatter;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js",["1050"],"import { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nfunction PollsView() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [questionx, setQuestion] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultx) => {\r\n        if (resultx.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (resultx[0].status === 0 || resultx[0].status === \"0\") {\r\n            MySwal.fire({\r\n              title: \"Poll Not Opened\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `Open Poll To Vote`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          } else if (resultx[0].status === 2 || resultx[0].status === \"2\") {\r\n            MySwal.fire({\r\n              title: \"Poll Closed\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `You can't vote on this poll`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          }\r\n          setQuestion(resultx[0].question);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const pColumns = [\r\n    { Header: \"Poll Options\", accessor: \"response\", align: \"left\" },\r\n    { Header: \"Number Of Votes\", accessor: \"number\", align: \"left\" },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox>\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={3}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={25}\r\n              mt={-6}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                {questionx}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp; &nbsp;\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: items }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      {/* <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop> */}\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PollsView;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js",["1051","1052"],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction UpdateAnnouncement() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [titlex, setTitle] = useState(\"\");\r\n  const [messagex, setMessage] = useState(\"\");\r\n  const [groupidx, setGroupIdx] = useState(\"\");\r\n  const [annoucementTypeIDx, setAnnoucementTypeID] = useState(\"\");\r\n  const [deletex, setDeletex] = useState(\"\");\r\n  const [createbyx, setCreatebyx] = useState(\"\");\r\n  const [createx, setCreatex] = useState(\"\");\r\n  const [idx, setIdx] = useState(\"\");\r\n\r\n  const [allAnnouncementType, setAllAnnouncementType] = useState([]);\r\n\r\n  const [user, setUser] = useState([]);\r\n\r\n  const [checkedTitle, setCheckedTitle] = useState(\"\");\r\n  const [, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Method to fetch all announcementtype\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcementtype/getAll/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setAllAnnouncementType(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // setItems(result);\r\n          setIdx(result[0].announcement.id);\r\n          setTitle(result[0].announcement.title);\r\n          setMessage(result[0].announcement.message);\r\n          setGroupIdx(result[0].announcement.groupID);\r\n          setCreatebyx(result[0].announcement.createdBy);\r\n          setDeletex(result[0].announcement.deleteFlag);\r\n          setCreatex(result[0].announcement.createdTime);\r\n          setAnnoucementTypeID(result[0].announcementType.id);\r\n        }\r\n        console.log(result);\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChangeAnnounceType = (e) => {\r\n    setAnnoucementTypeID(e.target.value);\r\n  };\r\n\r\n  const handleOnTitleKeys = () => {\r\n    const letters = /^[a-zA-Z ('\") ]+$/;\r\n    if (titlex.match(letters)) {\r\n      setCheckedTitle(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"\";\r\n    }\r\n    if (titlex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"Title is required<br>\";\r\n    }\r\n    setEnabled(checkedTitle === true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    // const ids = data11.id;\r\n    // const personalIds = data11.id;\r\n    const orgIDs = data11.orgID;\r\n\r\n    const raw = JSON.stringify({\r\n      id: idx,\r\n      title: titlex,\r\n      message: messagex,\r\n      orgID: orgIDs,\r\n      groupID: groupidx,\r\n      announcementTypeID: annoucementTypeIDx,\r\n      createdBy: createbyx,\r\n      createdTime: createx,\r\n      deleteFlag: deletex,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        // setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Update Announcement\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"title\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\" name=\"form1\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Title*\"\r\n                      value={titlex || \"\"}\r\n                      onKeyUp={handleOnTitleKeys}\r\n                      onChange={(e) => setTitle(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-6\">\r\n                    <Form.Group className=\"mb-1\" controlId=\"exampleForm.ControlTextArea\">\r\n                      <Form.Label style={{ fontSize: 14 }}>Message</Form.Label>\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        value={messagex || \"\"}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        label=\"Message\"\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  {/* <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"textarea\"\r\n                      value={messagex || \"\"}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      label=\"Message\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        color=\"text\"\r\n                      >\r\n                        Annoucement Type\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={annoucementTypeIDx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeAnnounceType}\r\n                        >\r\n                          <option>--Select Announcement Type--</option>\r\n                          {allAnnouncementType.map((apic) => (\r\n                            <option key={apic.id} value={apic.id}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"right\"\r\n                        color=\"text\"\r\n                      >\r\n                        Group\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        value={groupidx || \"\"}\r\n                        onChange={(e) => setGroupIdx(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Group</option>\r\n                        {user.map((api) => (\r\n                          <option key={api.group.id} value={api.group.id}>\r\n                            {api.group.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={(e) => handleUpdate(e)}\r\n                // disabled={!enabled}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n              >\r\n                Update\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UpdateAnnouncement;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js",["1053"],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js",["1054","1055","1056"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\nimport plutospaceImg from \"assets/images/PlutoSpaceImg.png\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction Cover() {\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  // Password toggle handler\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      const myHeaders = new Headers();\r\n      myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      // localStorage.setItem(\"pass1\", passwordx);\r\n\r\n      if (passwordx === retypePasswordx) {\r\n        fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/add`, requestOptions)\r\n          .then((res) => res.json())\r\n          .then((result) => {\r\n            setOpened(false);\r\n            if (result.status === \"SUCCESS\") {\r\n              MySwal.fire({\r\n                title: result.status,\r\n                type: \"success\",\r\n                text: result.message,\r\n              }).then(() => {\r\n                const raw2 = JSON.stringify({\r\n                  empID: result.data.id,\r\n                  username: result.data.email,\r\n                  password: passwordx,\r\n                });\r\n                const requestOptions2 = {\r\n                  method: \"POST\",\r\n                  headers: myHeaders,\r\n                  body: raw2,\r\n                  redirect: \"follow\",\r\n                };\r\n                fetch(`${process.env.REACT_APP_ZAVE_URL}/individualLogin/add`, requestOptions2)\r\n                  .then((res) => res.json())\r\n                  .then((resultIL) => {\r\n                    MySwal.fire({\r\n                      title: resultIL.status,\r\n                      type: \"success\",\r\n                      text: resultIL.message,\r\n                    }).then(() => {\r\n                      localStorage.setItem(\"user\", JSON.stringify(result.data));\r\n                      navigate(\"/authentication/sign-in\", { replace: true });\r\n                    });\r\n                  });\r\n              });\r\n            } else {\r\n              MySwal.fire({\r\n                title: result.status,\r\n                type: \"error\",\r\n                text: result.message,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/teptvv@gmail.com`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            console.log(result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDBox component=\"img\" src={plutospaceImg} alt=\"PlutoSpace\" width=\"10rem\" />\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Other Name\"\r\n                      value={onamex || \"\"}\r\n                      onKeyUp={handleOnOtherKeys}\r\n                      onChange={(e) => setOname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"email\"\r\n                      label=\"Personal Email\"\r\n                      value={emailx || \"\"}\r\n                      onKeyUp={handleOnPEmailKeys}\r\n                      onChange={getPersonalInformation}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-8\">\r\n                  <MDBox mb={2}>\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Marital Status\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      onChange={(e) => setMaritalStatus(e.target.value)}\r\n                      value={maritalStatusx || \"\"}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option>---Marital Status---</option>\r\n                      <option value=\"Single\">Single</option>\r\n                      <option value=\"Married\">Married</option>\r\n                      <option value=\"Divorced\">Divorced</option>\r\n                    </Form.Select>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n                    Date Of Birth\r\n                  </MDTypography>\r\n                  <MDBox mb={4} mt={-1}>\r\n                    <div>\r\n                      <style>\r\n                        {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                      </style>\r\n                      <DatePicker\r\n                        date={startDate}\r\n                        wrapperClassName=\"date-picker\"\r\n                        placeholder=\"Select Birth Date\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        confirmBtnText=\"Confirm\"\r\n                        showCancelButton=\"true\"\r\n                        customStyles={{\r\n                          placeholderText: {\r\n                            fontSize: 5,\r\n                          },\r\n                          dateIcon: {\r\n                            height: 0,\r\n                            width: 0,\r\n                          },\r\n                          dateText: {\r\n                            color: \"#b3b4b5\",\r\n                            fontSize: 16,\r\n                          },\r\n                          dateInput: {\r\n                            borderWidth: 0,\r\n                          },\r\n                        }}\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      Country\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialCountryx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCCountry}\r\n                      >\r\n                        <option>--Select Country--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default Cover;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js",["1057"],"import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// import Footer from \"examples/Footer\";\r\n// import DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\n// import MDBox from \"components/MDBox\";\r\n// import Card from \"@mui/material/Card\";\r\n// import MDButton from \"components/MDButton\";\r\n\r\n// import { Container } from \"react-bootstrap\";\r\n// import Emojis from \"./emoji\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction Chat({ socket, username, room }) {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const { emoticons: allEmojis } = Emojis();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const [titlex, setTitlex] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const messageMap = [];\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernID = urlParams.get(\"room\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/getForConcern/${concernID}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            const fdy = {\r\n              id: item.id,\r\n              room: concernID,\r\n              author: item.senderName,\r\n              message: item.message,\r\n              time: `${new Date(item.createdTime).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n            };\r\n            messageMap.push(fdy);\r\n          });\r\n          setMessageList(messageMap);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        id: messageList.length + 1,\r\n        room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time: `${new Date(Date.now()).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n      };\r\n\r\n      // eslint-disable-next-line react/prop-types\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      const orgIDs = data11.orgID;\r\n      const personalIDs = data11.personalID;\r\n\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        concernID: room,\r\n        message: currentMessage,\r\n        senderID: personalIDs,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/save`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"room\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/getByIds/${ids}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setTitlex(result[0].title);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    // eslint-disable-next-line react/prop-types\r\n    socket.on(\"receive_message\", (data) => {\r\n      if (isMounted) {\r\n        setMessageList((list) => [...list, data]);\r\n        console.log(data);\r\n      }\r\n    });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-header\">\r\n          <div\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              width: \"30rem\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            <p>{titlex}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-body\">\r\n          <ScrollToBottom className=\"message-container\">\r\n            {messageList.map((messageContent) => (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"other\" : \"you\"}\r\n                key={messageContent.id}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ScrollToBottom>\r\n        </div>\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={currentMessage}\r\n            placeholder=\"Type Message...\"\r\n            onChange={(event) => {\r\n              setCurrentMessage(event.target.value);\r\n            }}\r\n            onKeyPress={(event) => {\r\n              // eslint-disable-next-line no-unused-expressions\r\n              event.key === \"Enter\" && sendMessage();\r\n            }}\r\n          />\r\n          <button type=\"button\" onClick={sendMessage}>\r\n            send\r\n          </button>\r\n        </div>\r\n        {/* <ScrollToBottom className=\"emoji-container\">\r\n          <Container>\r\n            <div className=\"row\">\r\n              {allEmojis.map((apis) => (\r\n                <div key={apis.emoji} value={apis.emoji} className=\"col-sm-1\">\r\n                  <button type=\"button\">{apis.emoji}</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Container>\r\n        </ScrollToBottom> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\getHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\postHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Footer\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\countries-states-master\\countries.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js",["1058","1059","1060"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nexport default function UserData() {\r\n  const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDisable = (pIDVal) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/getByPersonalID/${orgIDs}/${pIDVal}`)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultPC) => {\r\n        if (resultPC.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: \"Reason For Delete\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          html: `<div align=\"center\"><select id=\"reasonForDelete\" class=\"form-control\" aria-label=\"Default select example\" style=\"width:auto;\">\r\n          <option value=\"\">---Reason For Delete---</option>\r\n          <option value=\"Retired\">Retired</option>\r\n          <option value=\"Late\">Late</option>\r\n          <option value=\"Resigned\">Resigned</option>\r\n          <option value=\"Sacked\">Sacked</option>\r\n        </select></div>`,\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\",\r\n        }).then((resultD) => {\r\n          if (resultD.isConfirmed) {\r\n            const modalValue = document.getElementById(\"reasonForDelete\").value;\r\n            const requestOptions = {\r\n              method: \"DELETE\",\r\n              headers: miHeaders,\r\n            };\r\n            fetch(\r\n              `${process.env.REACT_APP_ZAVE_URL}/personalcompany/delete/${resultPC.id}/${modalValue}`,\r\n              requestOptions\r\n            )\r\n              .then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              })\r\n              .then((resx) => {\r\n                if (resx.message === \"Expired Access\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Token Does Not Exist\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Unauthorized Access\") {\r\n                  navigate(\"/authentication/forbiddenPage\");\r\n                }\r\n                MySwal.fire({\r\n                  title: resx.status,\r\n                  type: \"success\",\r\n                  text: resx.message,\r\n                }).then(() => {\r\n                  window.location.reload();\r\n                });\r\n              })\r\n              .catch((error) => {\r\n                MySwal.fire({\r\n                  title: error.status,\r\n                  type: \"error\",\r\n                  text: error.message,\r\n                });\r\n              });\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleView = (value) => {\r\n    navigate(`/user-Management/view-User?id=${value}`);\r\n  };\r\n  const handleAddTOT = (value) => {\r\n    navigate(`/user-Management/user-TimeOff-Type?id=${value}`);\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handlePasswordReset = (value) => {\r\n    const headers = miHeaders;\r\n    console.log(value);\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${value}`, { headers })\r\n      .then((res) => res.json())\r\n      .then((resultp) => {\r\n        const raw = JSON.stringify({\r\n          username: resultp[0].email,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        console.log(resultp);\r\n        if (resultp.length > 0) {\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/login/resetpassword/`, requestOptions)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resx) => {\r\n              if (resx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n              MySwal.fire({\r\n                title: resx.status,\r\n                type: \"success\",\r\n                text: resx.message,\r\n              }).then(() => {\r\n                window.location.reload();\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              MySwal.fire({\r\n                title: error.status,\r\n                type: \"error\",\r\n                text: error.message,\r\n              });\r\n            });\r\n        } else {\r\n          MySwal.fire({\r\n            title: \"NOT_FOUND\",\r\n            type: \"error\",\r\n            text: \"User Not Found\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n  // const handleAddsalary = (value) => {\r\n  //   navigate(`/user-Management/user-Salary`(value));\r\n  // };\r\n\r\n  const handleAddsalary = (value) => {\r\n    navigate(`/user-Management/user-Salary?id=${value}`);\r\n  };\r\n\r\n  const handleUpdateSystemRole = (value) => {\r\n    navigate(`/update-system-role?id=${value}`);\r\n  };\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"First Name\", accessor: \"personal.fname\", align: \"left\" },\r\n      { Header: \"Last Name\", accessor: \"personal.lname\", align: \"left\" },\r\n      { Header: \"Email\", accessor: \"personal.email\", align: \"left\" },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"personal.createdTime\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Actions\",\r\n        accessor: \"personal.id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#dadada\",\r\n                borderRadius: \"2px\",\r\n              }}\r\n            >\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                  <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => handleView(value)}>\r\n                    View/Add Office Details\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddTOT(value)}>\r\n                    Add Time-Off Type\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddsalary(value)}>User Salary</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleUpdateSystemRole(value)}>\r\n                    Change User&apos;s System Role\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handlePasswordReset(value)}>\r\n                    Reset Password\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\imgHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\nigeria.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\link.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\container.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js",["1061","1062"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\nimport { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ReportsPollData() {\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const navigate = useNavigate();\r\n  const [resultx, setResult] = useState(\"\");\r\n  console.log(resultx);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setResult(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\r\n    datasets: { label: \"Sales\", data: [50, 20, 10, 22, 50, 10, 40] },\r\n  };\r\n}\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\skills\\index.js",["1063","1064","1065","1066"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Skills() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [showLists, setShowLists] = useState(false);\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        console.log(result);\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({ empID: personalIDs, name: namex, descrip: descripx });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      console.log(raw);\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      descrip: udescripx,\r\n      empID: uempID,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUEmpID(filteredItems[0].empID);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Add Skill\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Name *\"\r\n                      value={namex || \"\"}\r\n                      onKeyUp={handleOnNameKeys}\r\n                      className=\"form-control\"\r\n                      onChange={(e) => setName(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={descripx || \"\"}\r\n                      onChange={(e) => setDescrip(e.target.value)}\r\n                      label=\"Description\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleClick}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Card style={{ backgroundColor: \"white\" }}>\r\n                &nbsp;\r\n                {/* <div\r\n                  className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                  style={scrollContainerStyle}\r\n                > */}\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    {allApp.map((item) => (\r\n                      <Grid item xs={3} md={3} lg={3} key={item.id}>\r\n                        <Card>\r\n                          <CardContent>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              fontSize=\"120%\"\r\n                              color=\"info\"\r\n                              textAlign=\"left\"\r\n                              mt={1}\r\n                              mb={-3.5}\r\n                            >\r\n                              {item.name}\r\n                            </MDTypography>\r\n                          </CardContent>\r\n                          <CardActions>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleDeleteSK(item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  delete\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleShow(allApp, item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  edit\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                          </CardActions>\r\n                        </Card>\r\n                        &nbsp;\r\n                      </Grid>\r\n                    ))}\r\n                  </div>\r\n                </Container>\r\n                {/* </div> */}\r\n                &nbsp;\r\n                <br />\r\n              </Card>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Skill\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n                mx={2}\r\n                mt={-3}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                  Update Skill\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Name *\"\r\n                          value={unamex || \"\"}\r\n                          onKeyUp={handleOnNameKeys}\r\n                          className=\"form-control\"\r\n                          onChange={(e) => setUName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          value={udescripx || \"\"}\r\n                          onChange={(e) => setUDescrip(e.target.value)}\r\n                          label=\"Description\"\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mt={4} mb={1}>\r\n                  <MDButton\r\n                    variant=\"gradient\"\r\n                    onClick={handleUpdate}\r\n                    color=\"info\"\r\n                    width=\"50%\"\r\n                    align=\"left\"\r\n                  >\r\n                    Save\r\n                  </MDButton>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Skills;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\index.js",["1067","1068","1069"],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\courses.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\degree.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\workHistory\\index.js",["1070","1071"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction WorkHistory() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n  const [positionx, setPosition] = useState(\"\");\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [upositionx, setUPosition] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const changeDateandTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate !== null) {\r\n      dayx = date.getDate();\r\n      monthx = date.getMonth() + 1;\r\n      yearx = date.getFullYear();\r\n    }\r\n    return `${yearx}/${monthx}/${dayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      const startCDate = new Date(startDate).getTime();\r\n      const endCDate = new Date(endDate).getTime();\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        descrip: descripx,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        position: positionx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n            setPosition(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      descrip: udescripx,\r\n      position: upositionx,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUPosition(filteredItems[0].position);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Work History\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" Company Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Description *\"\r\n                            value={descripx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setDescrip(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Position *\"\r\n                        value={positionx || \"\"}\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPosition(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Position: {item.position}\r\n                          </MDTypography>{\" \"}\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            From {changeDateandTime(item.startTime)} to{\" \"}\r\n                            {changeDateandTime(item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Work History\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Work History\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" Company Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\"Description *\"\r\n                                value={udescripx || \"\"}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUDescrip(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Position *\"\r\n                            value={upositionx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setUPosition(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default WorkHistory;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\positionHeld\\index.js",["1072","1073","1074"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction PositionHeld() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n  const [placex, setPlace] = useState(\"\");\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [uplacex, setUPlace] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const changeDateandTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate !== null) {\r\n      dayx = date.getDate();\r\n      monthx = date.getMonth() + 1;\r\n      yearx = date.getFullYear();\r\n    }\r\n    return `${yearx}/${monthx}/${dayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n        console.log(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n\r\n      const startCDate = new Date(startDate).getTime();\r\n      const endCDate = new Date(endDate).getTime();\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        descrip: descripx,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        place: placex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n            setPlace(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      descrip: udescripx,\r\n      place: uplacex,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/positionHeld/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUPlace(filteredItems[0].place);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Position Held\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" Position Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Description *\"\r\n                            value={descripx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setDescrip(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Place *\"\r\n                        value={placex || \"\"}\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPlace(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Position: {item.place}\r\n                          </MDTypography>{\" \"}\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            From {changeDateandTime(item.startTime)} to{\" \"}\r\n                            {changeDateandTime(item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Position Held\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={15}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Position Held\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" Company Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\"Description *\"\r\n                                value={udescripx || \"\"}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUDescrip(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Place *\"\r\n                            value={uplacex || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setUPlace(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PositionHeld;\r\n",{"ruleId":"1075","replacedBy":"1076"},{"ruleId":"1077","replacedBy":"1078"},{"ruleId":"1079","replacedBy":"1080"},{"ruleId":"1081","replacedBy":"1082"},{"ruleId":"1083","replacedBy":"1084"},{"ruleId":"1085","severity":1,"message":"1086","line":66,"column":9,"nodeType":"1087","messageId":"1088","endLine":66,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":110,"column":7,"nodeType":"1087","messageId":"1088","endLine":110,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":119,"column":7,"nodeType":"1087","messageId":"1088","endLine":119,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":97,"column":5,"nodeType":"1087","messageId":"1088","endLine":97,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":98,"column":5,"nodeType":"1087","messageId":"1088","endLine":98,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":99,"column":5,"nodeType":"1087","messageId":"1088","endLine":99,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":100,"column":5,"nodeType":"1087","messageId":"1088","endLine":100,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":101,"column":5,"nodeType":"1087","messageId":"1088","endLine":101,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":130,"column":11,"nodeType":"1087","messageId":"1088","endLine":130,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":159,"column":11,"nodeType":"1087","messageId":"1088","endLine":159,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":423,"column":11,"nodeType":"1087","messageId":"1088","endLine":423,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":445,"column":15,"nodeType":"1087","messageId":"1088","endLine":445,"endColumn":26},{"ruleId":"1085","severity":1,"message":"1086","line":206,"column":13,"nodeType":"1087","messageId":"1088","endLine":206,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":207,"column":13,"nodeType":"1087","messageId":"1088","endLine":207,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":208,"column":13,"nodeType":"1087","messageId":"1088","endLine":208,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":73,"column":11,"nodeType":"1087","messageId":"1088","endLine":73,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":104,"column":11,"nodeType":"1087","messageId":"1088","endLine":104,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":190,"column":13,"nodeType":"1087","messageId":"1088","endLine":190,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":191,"column":13,"nodeType":"1087","messageId":"1088","endLine":191,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":98,"column":11,"nodeType":"1087","messageId":"1088","endLine":98,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":592,"column":11,"nodeType":"1087","messageId":"1088","endLine":592,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":618,"column":15,"nodeType":"1087","messageId":"1088","endLine":618,"endColumn":26},{"ruleId":"1085","severity":1,"message":"1086","line":630,"column":19,"nodeType":"1087","messageId":"1088","endLine":630,"endColumn":30},{"ruleId":"1085","severity":1,"message":"1086","line":74,"column":5,"nodeType":"1087","messageId":"1088","endLine":74,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":58,"column":11,"nodeType":"1087","messageId":"1088","endLine":58,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":149,"column":9,"nodeType":"1087","messageId":"1088","endLine":149,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":191,"column":5,"nodeType":"1087","messageId":"1088","endLine":191,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":88,"column":9,"nodeType":"1087","messageId":"1088","endLine":88,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":393,"column":11,"nodeType":"1087","messageId":"1088","endLine":393,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":395,"column":13,"nodeType":"1087","messageId":"1088","endLine":395,"endColumn":24},{"ruleId":"1085","severity":1,"message":"1086","line":399,"column":11,"nodeType":"1087","messageId":"1088","endLine":399,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":190,"column":9,"nodeType":"1087","messageId":"1088","endLine":190,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":53,"column":11,"nodeType":"1087","messageId":"1088","endLine":53,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":159,"column":5,"nodeType":"1087","messageId":"1088","endLine":159,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":172,"column":9,"nodeType":"1087","messageId":"1088","endLine":172,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":23,"column":3,"nodeType":"1087","messageId":"1088","endLine":23,"endColumn":14},{"ruleId":"1085","severity":1,"message":"1086","line":57,"column":11,"nodeType":"1087","messageId":"1088","endLine":57,"endColumn":22},{"ruleId":"1085","severity":1,"message":"1086","line":80,"column":9,"nodeType":"1087","messageId":"1088","endLine":80,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":166,"column":7,"nodeType":"1087","messageId":"1088","endLine":166,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":175,"column":7,"nodeType":"1087","messageId":"1088","endLine":175,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":226,"column":5,"nodeType":"1087","messageId":"1088","endLine":226,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":198,"column":7,"nodeType":"1087","messageId":"1088","endLine":198,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":209,"column":7,"nodeType":"1087","messageId":"1088","endLine":209,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":278,"column":5,"nodeType":"1087","messageId":"1088","endLine":278,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":191,"column":7,"nodeType":"1087","messageId":"1088","endLine":191,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":267,"column":5,"nodeType":"1087","messageId":"1088","endLine":267,"endColumn":16},{"ruleId":"1085","severity":1,"message":"1086","line":105,"column":9,"nodeType":"1087","messageId":"1088","endLine":105,"endColumn":20},{"ruleId":"1085","severity":1,"message":"1086","line":194,"column":7,"nodeType":"1087","messageId":"1088","endLine":194,"endColumn":18},{"ruleId":"1085","severity":1,"message":"1086","line":270,"column":5,"nodeType":"1087","messageId":"1088","endLine":270,"endColumn":16},"lines-around-directive",["1089"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]