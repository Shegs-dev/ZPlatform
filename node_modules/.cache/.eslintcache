[{"C:\\Users\\HP\\PlutospaceMono\\src\\index.js":"1","C:\\Users\\HP\\PlutospaceMono\\src\\App.js":"2","C:\\Users\\HP\\PlutospaceMono\\src\\context\\index.js":"3","C:\\Users\\HP\\PlutospaceMono\\src\\routes.js":"4","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\index.js":"5","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\index.js":"6","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\index.js":"7","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\index.js":"8","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\index.js":"9","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\index.js":"10","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js":"11","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js":"12","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js":"13","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\index.js":"14","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\index.js":"15","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\index.js":"16","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js":"17","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js":"18","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\index.js":"19","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userProfile\\index.js":"20","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js":"21","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userHistory\\index.js":"22","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js":"23","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\checklists\\index.js":"24","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groupview\\index.js":"25","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\index.js":"26","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js":"27","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js":"28","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js":"29","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js":"30","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js":"31","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js":"32","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\index.js":"33","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js":"34","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js":"35","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js":"36","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\index.js":"37","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js":"38","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js":"39","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js":"40","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\index.js":"41","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js":"42","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js":"43","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js":"44","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js":"45","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js":"46","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js":"47","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js":"48","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js":"49","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js":"50","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js":"51","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js":"52","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js":"53","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js":"54","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js":"55","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js":"56","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js":"57","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js":"58","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js":"59","C:\\Users\\HP\\PlutospaceMono\\src\\getHeader.js":"60","C:\\Users\\HP\\PlutospaceMono\\src\\postHeader.js":"61","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js":"62","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js":"63","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\index.js":"64","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js":"65","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js":"66","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\index.js":"67","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js":"68","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js":"69","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\index.js":"70","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js":"71","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Footer\\index.js":"72","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js":"73","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js":"74","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js":"75","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js":"76","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js":"77","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js":"78","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js":"79","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\index.js":"80","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js":"81","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js":"82","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js":"83","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js":"84","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js":"85","C:\\Users\\HP\\PlutospaceMono\\src\\countries-states-master\\countries.js":"86","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js":"87","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js":"88","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js":"89","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js":"90","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js":"91","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js":"92","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js":"93","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js":"94","C:\\Users\\HP\\PlutospaceMono\\src\\imgHeader.js":"95","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js":"96","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js":"97","C:\\Users\\HP\\PlutospaceMono\\src\\nigeria.js":"98","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js":"99","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js":"100","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js":"101","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js":"102","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js":"103","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js":"104","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js":"105","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js":"106","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js":"107","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js":"108","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js":"109","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js":"110","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js":"111","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js":"112","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js":"113","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js":"114","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js":"115","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js":"116","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js":"117","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js":"118","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js":"119","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js":"120","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js":"121","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js":"122","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js":"123","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js":"124","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js":"125","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js":"126","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js":"127","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js":"128","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js":"129","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js":"130","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js":"131","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js":"132","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js":"133","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js":"134","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js":"135","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js":"136","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js":"137","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js":"138","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js":"139","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js":"140","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js":"141","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js":"142","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js":"143","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js":"144","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js":"145","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js":"146","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js":"147","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js":"148","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js":"149","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js":"150","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js":"151","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js":"152","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js":"153","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js":"154","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js":"155","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js":"156","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js":"157","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js":"158","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js":"159","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js":"160","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js":"161","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\link.js":"162","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js":"163","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js":"164","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js":"165","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js":"166","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js":"167","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\container.js":"168","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js":"169","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js":"170","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js":"171","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js":"172","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js":"173","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js":"174","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js":"175","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js":"176","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js":"177","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js":"178","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js":"179","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js":"180","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js":"181","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js":"182","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js":"183","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js":"184","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js":"185","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js":"186","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js":"187","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js":"188","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js":"189","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js":"190","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js":"191","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js":"192","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js":"193","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js":"194","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js":"195","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js":"196","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js":"197","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js":"198","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js":"199","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js":"200","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js":"201","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js":"202","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js":"203","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js":"204","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js":"205","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js":"206","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js":"207","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js":"208","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js":"209","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js":"210","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js":"211","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js":"212","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js":"213","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js":"214","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js":"215","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js":"216","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js":"217","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js":"218","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js":"219","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js":"220","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js":"221","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js":"222","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js":"223","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js":"224","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js":"225","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js":"226","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js":"227","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js":"228","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js":"229","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js":"230","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js":"231","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js":"232","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js":"233","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js":"234","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js":"235","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js":"236","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js":"237","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js":"238","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js":"239","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js":"240","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\index.js":"241","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\index.js":"242","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js":"243","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js":"244","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js":"245","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\skills\\index.js":"246","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\index.js":"247","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\courses.js":"248","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\degree.js":"249","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\workHistory\\index.js":"250"},{"size":951,"mtime":1656440824194,"results":"251","hashOfConfig":"252"},{"size":4652,"mtime":1656440822248,"results":"253","hashOfConfig":"252"},{"size":4432,"mtime":1656440823769,"results":"254","hashOfConfig":"252"},{"size":9529,"mtime":1656981805020,"results":"255","hashOfConfig":"252"},{"size":9581,"mtime":1656440824029,"results":"256","hashOfConfig":"252"},{"size":1747,"mtime":1656440823446,"results":"257","hashOfConfig":"252"},{"size":6774,"mtime":1656440823297,"results":"258","hashOfConfig":"252"},{"size":7079,"mtime":1656440822857,"results":"259","hashOfConfig":"252"},{"size":7002,"mtime":1656692321977,"results":"260","hashOfConfig":"252"},{"size":14811,"mtime":1656440824450,"results":"261","hashOfConfig":"252"},{"size":1256,"mtime":1656440824532,"results":"262","hashOfConfig":"252"},{"size":12195,"mtime":1656440824443,"results":"263","hashOfConfig":"252"},{"size":12082,"mtime":1656440824528,"results":"264","hashOfConfig":"252"},{"size":5335,"mtime":1656617395390,"results":"265","hashOfConfig":"252"},{"size":6840,"mtime":1656440824514,"results":"266","hashOfConfig":"252"},{"size":7074,"mtime":1656440824565,"results":"267","hashOfConfig":"252"},{"size":6739,"mtime":1656440824579,"results":"268","hashOfConfig":"252"},{"size":14508,"mtime":1656440824578,"results":"269","hashOfConfig":"252"},{"size":11865,"mtime":1656440824654,"results":"270","hashOfConfig":"252"},{"size":91452,"mtime":1656440824663,"results":"271","hashOfConfig":"252"},{"size":61933,"mtime":1656440824660,"results":"272","hashOfConfig":"252"},{"size":14377,"mtime":1656440824650,"results":"273","hashOfConfig":"252"},{"size":34350,"mtime":1656440824523,"results":"274","hashOfConfig":"252"},{"size":8449,"mtime":1656440824451,"results":"275","hashOfConfig":"252"},{"size":7982,"mtime":1656440824521,"results":"276","hashOfConfig":"252"},{"size":10559,"mtime":1656440824517,"results":"277","hashOfConfig":"252"},{"size":12008,"mtime":1656440824659,"results":"278","hashOfConfig":"252"},{"size":12990,"mtime":1656440824652,"results":"279","hashOfConfig":"252"},{"size":12627,"mtime":1656440824529,"results":"280","hashOfConfig":"252"},{"size":13145,"mtime":1656440824447,"results":"281","hashOfConfig":"252"},{"size":36697,"mtime":1656440824556,"results":"282","hashOfConfig":"252"},{"size":14130,"mtime":1656440824448,"results":"283","hashOfConfig":"252"},{"size":6091,"mtime":1656440824520,"results":"284","hashOfConfig":"252"},{"size":7741,"mtime":1656440824445,"results":"285","hashOfConfig":"252"},{"size":8097,"mtime":1656440824561,"results":"286","hashOfConfig":"252"},{"size":7513,"mtime":1656440824656,"results":"287","hashOfConfig":"252"},{"size":9198,"mtime":1656440824560,"results":"288","hashOfConfig":"252"},{"size":8477,"mtime":1656440824563,"results":"289","hashOfConfig":"252"},{"size":9261,"mtime":1656440824558,"results":"290","hashOfConfig":"252"},{"size":8428,"mtime":1656440824527,"results":"291","hashOfConfig":"252"},{"size":11345,"mtime":1656440824350,"results":"292","hashOfConfig":"252"},{"size":5248,"mtime":1656440824562,"results":"293","hashOfConfig":"252"},{"size":13173,"mtime":1656440824360,"results":"294","hashOfConfig":"252"},{"size":4250,"mtime":1656529938818,"results":"295","hashOfConfig":"252"},{"size":8598,"mtime":1656979819417,"results":"296","hashOfConfig":"252"},{"size":10209,"mtime":1656440824429,"results":"297","hashOfConfig":"252"},{"size":6571,"mtime":1656440824425,"results":"298","hashOfConfig":"252"},{"size":443,"mtime":1656440824420,"results":"299","hashOfConfig":"252"},{"size":8944,"mtime":1656529874381,"results":"300","hashOfConfig":"252"},{"size":9940,"mtime":1656529801005,"results":"301","hashOfConfig":"252"},{"size":20547,"mtime":1656440824423,"results":"302","hashOfConfig":"252"},{"size":11556,"mtime":1656440824363,"results":"303","hashOfConfig":"252"},{"size":1798,"mtime":1656440824028,"results":"304","hashOfConfig":"252"},{"size":32100,"mtime":1656692344964,"results":"305","hashOfConfig":"252"},{"size":3255,"mtime":1656440823434,"results":"306","hashOfConfig":"252"},{"size":3000,"mtime":1656440824179,"results":"307","hashOfConfig":"252"},{"size":8472,"mtime":1656440824533,"results":"308","hashOfConfig":"252"},{"size":746,"mtime":1656440822918,"results":"309","hashOfConfig":"252"},{"size":751,"mtime":1656440822670,"results":"310","hashOfConfig":"252"},{"size":387,"mtime":1656440824193,"results":"311","hashOfConfig":"252"},{"size":369,"mtime":1656440824704,"results":"312","hashOfConfig":"252"},{"size":9749,"mtime":1656440824526,"results":"313","hashOfConfig":"252"},{"size":5140,"mtime":1656440824198,"results":"314","hashOfConfig":"252"},{"size":2084,"mtime":1656440823458,"results":"315","hashOfConfig":"252"},{"size":6761,"mtime":1656979356479,"results":"316","hashOfConfig":"252"},{"size":10706,"mtime":1656440824186,"results":"317","hashOfConfig":"252"},{"size":2450,"mtime":1656440823682,"results":"318","hashOfConfig":"252"},{"size":739,"mtime":1656440823269,"results":"319","hashOfConfig":"252"},{"size":739,"mtime":1656440822855,"results":"320","hashOfConfig":"252"},{"size":1243,"mtime":1656440823515,"results":"321","hashOfConfig":"252"},{"size":1880,"mtime":1656440824115,"results":"322","hashOfConfig":"252"},{"size":1877,"mtime":1656440824030,"results":"323","hashOfConfig":"252"},{"size":3611,"mtime":1656440824173,"results":"324","hashOfConfig":"252"},{"size":7989,"mtime":1656440823456,"results":"325","hashOfConfig":"252"},{"size":1763,"mtime":1656440824184,"results":"326","hashOfConfig":"252"},{"size":3195,"mtime":1656440824185,"results":"327","hashOfConfig":"252"},{"size":2297,"mtime":1656440823682,"results":"328","hashOfConfig":"252"},{"size":2736,"mtime":1656440823506,"results":"329","hashOfConfig":"252"},{"size":4767,"mtime":1656440822866,"results":"330","hashOfConfig":"252"},{"size":2617,"mtime":1656440823523,"results":"331","hashOfConfig":"252"},{"size":3065,"mtime":1656440823799,"results":"332","hashOfConfig":"252"},{"size":1723,"mtime":1656440824103,"results":"333","hashOfConfig":"252"},{"size":747,"mtime":1656440824113,"results":"334","hashOfConfig":"252"},{"size":1851,"mtime":1656440823523,"results":"335","hashOfConfig":"252"},{"size":4326,"mtime":1656440822863,"results":"336","hashOfConfig":"252"},{"size":502448,"mtime":1656440823794,"results":"337","hashOfConfig":"252"},{"size":8967,"mtime":1656440824362,"results":"338","hashOfConfig":"252"},{"size":2399,"mtime":1656440824417,"results":"339","hashOfConfig":"252"},{"size":1688,"mtime":1656440824116,"results":"340","hashOfConfig":"252"},{"size":2047,"mtime":1656440824416,"results":"341","hashOfConfig":"252"},{"size":9376,"mtime":1656440824516,"results":"342","hashOfConfig":"252"},{"size":4690,"mtime":1656440824658,"results":"343","hashOfConfig":"252"},{"size":9710,"mtime":1656440824653,"results":"344","hashOfConfig":"252"},{"size":8631,"mtime":1656440824559,"results":"345","hashOfConfig":"252"},{"size":369,"mtime":1656440824193,"results":"346","hashOfConfig":"252"},{"size":8329,"mtime":1656440824519,"results":"347","hashOfConfig":"252"},{"size":5700,"mtime":1656440824446,"results":"348","hashOfConfig":"252"},{"size":124,"mtime":1656440824663,"results":"349","hashOfConfig":"252"},{"size":8198,"mtime":1656440824579,"results":"350","hashOfConfig":"252"},{"size":7979,"mtime":1656440824513,"results":"351","hashOfConfig":"252"},{"size":2828,"mtime":1656440824178,"results":"352","hashOfConfig":"252"},{"size":8250,"mtime":1656440824564,"results":"353","hashOfConfig":"252"},{"size":11817,"mtime":1656440824449,"results":"354","hashOfConfig":"252"},{"size":1364,"mtime":1656440822671,"results":"355","hashOfConfig":"252"},{"size":1001,"mtime":1656440822672,"results":"356","hashOfConfig":"252"},{"size":632,"mtime":1656440822690,"results":"357","hashOfConfig":"252"},{"size":1898,"mtime":1656440822669,"results":"358","hashOfConfig":"252"},{"size":919,"mtime":1656440822673,"results":"359","hashOfConfig":"252"},{"size":1025,"mtime":1656440822688,"results":"360","hashOfConfig":"252"},{"size":612,"mtime":1656440822664,"results":"361","hashOfConfig":"252"},{"size":981,"mtime":1656440822736,"results":"362","hashOfConfig":"252"},{"size":1169,"mtime":1656440822698,"results":"363","hashOfConfig":"252"},{"size":2908,"mtime":1656440822676,"results":"364","hashOfConfig":"252"},{"size":2655,"mtime":1656440822677,"results":"365","hashOfConfig":"252"},{"size":2391,"mtime":1656440822683,"results":"366","hashOfConfig":"252"},{"size":763,"mtime":1656440822679,"results":"367","hashOfConfig":"252"},{"size":1359,"mtime":1656440822678,"results":"368","hashOfConfig":"252"},{"size":1223,"mtime":1656440822684,"results":"369","hashOfConfig":"252"},{"size":1487,"mtime":1656440822735,"results":"370","hashOfConfig":"252"},{"size":1618,"mtime":1656440822704,"results":"371","hashOfConfig":"252"},{"size":757,"mtime":1656440822703,"results":"372","hashOfConfig":"252"},{"size":1253,"mtime":1656440822703,"results":"373","hashOfConfig":"252"},{"size":688,"mtime":1656440822656,"results":"374","hashOfConfig":"252"},{"size":1864,"mtime":1656440822755,"results":"375","hashOfConfig":"252"},{"size":902,"mtime":1656440822657,"results":"376","hashOfConfig":"252"},{"size":1875,"mtime":1656440822700,"results":"377","hashOfConfig":"252"},{"size":1566,"mtime":1656440822756,"results":"378","hashOfConfig":"252"},{"size":928,"mtime":1656440822657,"results":"379","hashOfConfig":"252"},{"size":1414,"mtime":1656440822689,"results":"380","hashOfConfig":"252"},{"size":2410,"mtime":1656440822685,"results":"381","hashOfConfig":"252"},{"size":2016,"mtime":1656440822674,"results":"382","hashOfConfig":"252"},{"size":1924,"mtime":1656440822682,"results":"383","hashOfConfig":"252"},{"size":1497,"mtime":1656440822681,"results":"384","hashOfConfig":"252"},{"size":787,"mtime":1656440822687,"results":"385","hashOfConfig":"252"},{"size":1537,"mtime":1656440822697,"results":"386","hashOfConfig":"252"},{"size":1544,"mtime":1656440822680,"results":"387","hashOfConfig":"252"},{"size":819,"mtime":1656440822688,"results":"388","hashOfConfig":"252"},{"size":1053,"mtime":1656440822737,"results":"389","hashOfConfig":"252"},{"size":1024,"mtime":1656440822738,"results":"390","hashOfConfig":"252"},{"size":1021,"mtime":1656440822739,"results":"391","hashOfConfig":"252"},{"size":830,"mtime":1656440822665,"results":"392","hashOfConfig":"252"},{"size":997,"mtime":1656440822666,"results":"393","hashOfConfig":"252"},{"size":3403,"mtime":1656440823852,"results":"394","hashOfConfig":"252"},{"size":1328,"mtime":1656440822699,"results":"395","hashOfConfig":"252"},{"size":959,"mtime":1656440822673,"results":"396","hashOfConfig":"252"},{"size":709,"mtime":1656440822693,"results":"397","hashOfConfig":"252"},{"size":653,"mtime":1656440822694,"results":"398","hashOfConfig":"252"},{"size":801,"mtime":1656440822854,"results":"399","hashOfConfig":"252"},{"size":949,"mtime":1656440822856,"results":"400","hashOfConfig":"252"},{"size":1089,"mtime":1656440822775,"results":"401","hashOfConfig":"252"},{"size":867,"mtime":1656440822853,"results":"402","hashOfConfig":"252"},{"size":1485,"mtime":1656440822628,"results":"403","hashOfConfig":"252"},{"size":3370,"mtime":1656440822629,"results":"404","hashOfConfig":"252"},{"size":4780,"mtime":1656440822655,"results":"405","hashOfConfig":"252"},{"size":1169,"mtime":1656440822653,"results":"406","hashOfConfig":"252"},{"size":892,"mtime":1656440822630,"results":"407","hashOfConfig":"252"},{"size":4381,"mtime":1656440822652,"results":"408","hashOfConfig":"252"},{"size":1411,"mtime":1656440822701,"results":"409","hashOfConfig":"252"},{"size":1688,"mtime":1656440822754,"results":"410","hashOfConfig":"252"},{"size":982,"mtime":1656440822920,"results":"411","hashOfConfig":"252"},{"size":1255,"mtime":1656440822919,"results":"412","hashOfConfig":"252"},{"size":632,"mtime":1656440823016,"results":"413","hashOfConfig":"252"},{"size":976,"mtime":1656440823053,"results":"414","hashOfConfig":"252"},{"size":909,"mtime":1656440822921,"results":"415","hashOfConfig":"252"},{"size":1020,"mtime":1656440822945,"results":"416","hashOfConfig":"252"},{"size":612,"mtime":1656440822913,"results":"417","hashOfConfig":"252"},{"size":1149,"mtime":1656440823021,"results":"418","hashOfConfig":"252"},{"size":1888,"mtime":1656440822917,"results":"419","hashOfConfig":"252"},{"size":1468,"mtime":1656440822696,"results":"420","hashOfConfig":"252"},{"size":2672,"mtime":1656440822937,"results":"421","hashOfConfig":"252"},{"size":2635,"mtime":1656440822938,"results":"422","hashOfConfig":"252"},{"size":2371,"mtime":1656440822942,"results":"423","hashOfConfig":"252"},{"size":758,"mtime":1656440822939,"results":"424","hashOfConfig":"252"},{"size":1637,"mtime":1656440822660,"results":"425","hashOfConfig":"252"},{"size":658,"mtime":1656440822692,"results":"426","hashOfConfig":"252"},{"size":1453,"mtime":1656440822668,"results":"427","hashOfConfig":"252"},{"size":4191,"mtime":1656440824182,"results":"428","hashOfConfig":"252"},{"size":949,"mtime":1656440822922,"results":"429","hashOfConfig":"252"},{"size":1408,"mtime":1656440822861,"results":"430","hashOfConfig":"252"},{"size":3315,"mtime":1656440822862,"results":"431","hashOfConfig":"252"},{"size":892,"mtime":1656440822863,"results":"432","hashOfConfig":"252"},{"size":2389,"mtime":1656440822662,"results":"433","hashOfConfig":"252"},{"size":2192,"mtime":1656440822659,"results":"434","hashOfConfig":"252"},{"size":1521,"mtime":1656440822662,"results":"435","hashOfConfig":"252"},{"size":2065,"mtime":1656440822661,"results":"436","hashOfConfig":"252"},{"size":801,"mtime":1656440823231,"results":"437","hashOfConfig":"252"},{"size":1341,"mtime":1656440822938,"results":"438","hashOfConfig":"252"},{"size":688,"mtime":1656440822867,"results":"439","hashOfConfig":"252"},{"size":897,"mtime":1656440822868,"results":"440","hashOfConfig":"252"},{"size":1213,"mtime":1656440822943,"results":"441","hashOfConfig":"252"},{"size":918,"mtime":1656440822869,"results":"442","hashOfConfig":"252"},{"size":1546,"mtime":1656440823161,"results":"443","hashOfConfig":"252"},{"size":1399,"mtime":1656440822985,"results":"444","hashOfConfig":"252"},{"size":2001,"mtime":1656440822923,"results":"445","hashOfConfig":"252"},{"size":1875,"mtime":1656440823048,"results":"446","hashOfConfig":"252"},{"size":782,"mtime":1656440822945,"results":"447","hashOfConfig":"252"},{"size":2380,"mtime":1656440822944,"results":"448","hashOfConfig":"252"},{"size":1244,"mtime":1656440822940,"results":"449","hashOfConfig":"252"},{"size":1487,"mtime":1656440822941,"results":"450","hashOfConfig":"252"},{"size":1740,"mtime":1656440822941,"results":"451","hashOfConfig":"252"},{"size":814,"mtime":1656440822946,"results":"452","hashOfConfig":"252"},{"size":1603,"mtime":1656440823052,"results":"453","hashOfConfig":"252"},{"size":1467,"mtime":1656440823052,"results":"454","hashOfConfig":"252"},{"size":752,"mtime":1656440823050,"results":"455","hashOfConfig":"252"},{"size":1243,"mtime":1656440823051,"results":"456","hashOfConfig":"252"},{"size":1457,"mtime":1656440823020,"results":"457","hashOfConfig":"252"},{"size":987,"mtime":1656440822915,"results":"458","hashOfConfig":"252"},{"size":825,"mtime":1656440822914,"results":"459","hashOfConfig":"252"},{"size":1842,"mtime":1656440823160,"results":"460","hashOfConfig":"252"},{"size":653,"mtime":1656440823018,"results":"461","hashOfConfig":"252"},{"size":709,"mtime":1656440823018,"results":"462","hashOfConfig":"252"},{"size":1300,"mtime":1656440823021,"results":"463","hashOfConfig":"252"},{"size":1038,"mtime":1656440823103,"results":"464","hashOfConfig":"252"},{"size":999,"mtime":1656440823114,"results":"465","hashOfConfig":"252"},{"size":1011,"mtime":1656440823137,"results":"466","hashOfConfig":"252"},{"size":944,"mtime":1656440823296,"results":"467","hashOfConfig":"252"},{"size":1386,"mtime":1656440823049,"results":"468","hashOfConfig":"252"},{"size":1433,"mtime":1656440823019,"results":"469","hashOfConfig":"252"},{"size":1391,"mtime":1656440822916,"results":"470","hashOfConfig":"252"},{"size":1687,"mtime":1656440823159,"results":"471","hashOfConfig":"252"},{"size":658,"mtime":1656440823017,"results":"472","hashOfConfig":"252"},{"size":1617,"mtime":1656440822890,"results":"473","hashOfConfig":"252"},{"size":1079,"mtime":1656440823193,"results":"474","hashOfConfig":"252"},{"size":867,"mtime":1656440823229,"results":"475","hashOfConfig":"252"},{"size":1164,"mtime":1656440822865,"results":"476","hashOfConfig":"252"},{"size":1506,"mtime":1656440822912,"results":"477","hashOfConfig":"252"},{"size":2374,"mtime":1656440822912,"results":"478","hashOfConfig":"252"},{"size":2050,"mtime":1656440822891,"results":"479","hashOfConfig":"252"},{"size":2177,"mtime":1656440822890,"results":"480","hashOfConfig":"252"},{"size":937,"mtime":1656440824510,"results":"481","hashOfConfig":"252"},{"size":3075,"mtime":1656440824507,"results":"482","hashOfConfig":"252"},{"size":2277,"mtime":1656440824509,"results":"483","hashOfConfig":"252"},{"size":3173,"mtime":1656440823938,"results":"484","hashOfConfig":"252"},{"size":2646,"mtime":1656440824504,"results":"485","hashOfConfig":"252"},{"size":3162,"mtime":1656440823890,"results":"486","hashOfConfig":"252"},{"size":6367,"mtime":1656440824506,"results":"487","hashOfConfig":"252"},{"size":2482,"mtime":1656440823937,"results":"488","hashOfConfig":"252"},{"size":2461,"mtime":1656440823889,"results":"489","hashOfConfig":"252"},{"size":2976,"mtime":1656440824188,"results":"490","hashOfConfig":"252"},{"size":474,"mtime":1656440824189,"results":"491","hashOfConfig":"252"},{"size":1496,"mtime":1656440823386,"results":"492","hashOfConfig":"252"},{"size":1802,"mtime":1656440823666,"results":"493","hashOfConfig":"252"},{"size":1156,"mtime":1656440824192,"results":"494","hashOfConfig":"252"},{"size":2337,"mtime":1656440823335,"results":"495","hashOfConfig":"252"},{"size":1435,"mtime":1656440823665,"results":"496","hashOfConfig":"252"},{"size":18207,"mtime":1657042426824,"results":"497","hashOfConfig":"252"},{"size":32708,"mtime":1657052784225,"results":"498","hashOfConfig":"252"},{"size":6777,"mtime":1657048863195,"results":"499","hashOfConfig":"252"},{"size":3523,"mtime":1656781115676,"results":"500","hashOfConfig":"252"},{"size":26418,"mtime":1657052213350,"results":"501","hashOfConfig":"252"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},"19qt1lf",{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"504"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"504"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"504"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"504"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"504"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"504"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"504"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"504"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"504"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"504"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"504"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"968","messages":"969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"978","usedDeprecatedRules":"504"},{"filePath":"979","messages":"980","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"981","messages":"982","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"987","messages":"988","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"993","messages":"994","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"995","messages":"996","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"1001","messages":"1002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"504"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007","usedDeprecatedRules":"504"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1017","usedDeprecatedRules":"504"},"C:\\Users\\HP\\PlutospaceMono\\src\\index.js",[],["1018","1019","1020","1021","1022"],"C:\\Users\\HP\\PlutospaceMono\\src\\App.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\context\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\routes.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\App.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\birthdays\\data\\birthdays.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\addRolesAndPerms\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userProfile\\index.js",["1023","1024","1025","1026","1027"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form, Dropdown } from \"react-bootstrap\";\r\n// import Icon from \"@mui/material/Icon\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport NCountry from \"nigeria\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nfunction UserProfile() {\r\n  const { nCountries: WCountries } = NCountry();\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [showProf, setShowProf] = useState(false);\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [allBanks, setAllBanks] = useState([]);\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [deleteFlagx, setDeleteFlag] = useState(\"\");\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const [nkIDx, setNkID] = useState(\"\");\r\n  const [nkFnamex, setNkFname] = useState(\"\");\r\n  const [nkLnamex, setNkLname] = useState(\"\");\r\n  const [nkOnamex, setNkOname] = useState(\"\");\r\n  const [nkEmailx, setNKEmail] = useState(\"\");\r\n  const [nkPhonex, setNkPhone] = useState(\"\");\r\n  const [nkTitlex, setNkTitle] = useState(\"\");\r\n  const [nkResidentialStreetx, setNkResidentialStreet] = useState(\"\");\r\n  const [nkResidentialCityx, setNkResidentialCity] = useState(\"\");\r\n  const [nkResidentialStatex, setNkResidentialState] = useState(\"\");\r\n  const [nkResidentialCountryx, setNkResidentialCountry] = useState(\"\");\r\n  const [nkOccupationx, setNkOccupation] = useState(\"\");\r\n  const [nkDeleteFlagx, setNkDeleteFlag] = useState(\"\");\r\n  const [nkCreatedTimex, setNkCreatedTime] = useState(\"\");\r\n\r\n  const [baIDx, setBaID] = useState(\"\");\r\n  const [baBankx, setBaBank] = useState(\"\");\r\n  const [baCountryx, setBaCountry] = useState(\"\");\r\n  const [baAcctNox, setBaAcctNo] = useState(\"\");\r\n  const [baAcctNamex, setBaAcctName] = useState(\"\");\r\n  const [baBankCodex, setBaBankCode] = useState(\"\");\r\n  const [baDeleteFlagx, setBaDeleteFlag] = useState(\"\");\r\n  const [baCreatedTimex, setBaCreatedTime] = useState(\"\");\r\n\r\n  const [maIDx, setMaID] = useState(\"\");\r\n  const [maNoOfSpousesx, setMaNoOfSpouses] = useState(\"\");\r\n  const [maNoOfChildrenx, setMaNoOfChildren] = useState(\"\");\r\n  const [maDeleteFlagx, setMaDeleteFlag] = useState(\"\");\r\n  const [maCreatedTimex, setMaCreatedTime] = useState(\"\");\r\n\r\n  const [meIDx, setMeID] = useState(\"\");\r\n  const [meBloodGroupx, setMeBloodGroup] = useState(\"\");\r\n  const [meGenotypex, setMeGenotype] = useState(\"\");\r\n  const [meDeleteFlagx, setMeDeleteFlag] = useState(\"\");\r\n  const [meCreatedTimex, setMeCreatedTime] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultp) => {\r\n        setOpened(false);\r\n        if (resultp.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultp.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setFname(resultp[0].fname);\r\n          setLname(resultp[0].lname);\r\n          setOname(resultp[0].oname);\r\n          setEmail(resultp[0].email);\r\n          setPhone(resultp[0].pno);\r\n          //   setDayOfBirth(resultp[0].dayOfBirth);\r\n          //   setMonthOfBirth(resultp[0].monthOfBirth);\r\n          //   setYearOfBirth(resultp[0].yearOfBirth);\r\n          const filteredItems = AlCountry.filter(\r\n            (item) => item.name === resultp[0].residentialCountry\r\n          );\r\n          setAllStates(filteredItems[0].states);\r\n          setNationality(resultp[0].nationality);\r\n          setResidentialStreet(resultp[0].residentialStreet);\r\n          setResidentialCity(resultp[0].residentialCity);\r\n          setResidentialState(resultp[0].residentialState);\r\n          setResidentialCountry(resultp[0].residentialCountry);\r\n          setMaritalStatus(resultp[0].maritalStatus);\r\n          setDeleteFlag(resultp[0].deleteFlag);\r\n          setSysStatus(resultp[0].sysStatus);\r\n          setCreatedTime(resultp[0].createdTime);\r\n\r\n          setStartDate(\r\n            new Date(\r\n              `${resultp[0].monthOfBirth}/${resultp[0].dayOfBirth}/${resultp[0].yearOfBirth}`\r\n            )\r\n          );\r\n          setShowProf(true);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultnk) => {\r\n        setOpened(false);\r\n        if (resultnk.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultnk.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultnk.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultnk.length != 0) {\r\n            setNkID(resultnk[0].id);\r\n            setNkFname(resultnk[0].fname);\r\n            setNkLname(resultnk[0].lname);\r\n            setNkOname(resultnk[0].oname);\r\n            setNKEmail(resultnk[0].email);\r\n            setNkPhone(resultnk[0].pno);\r\n            setNkTitle(resultnk[0].title);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === resultnk[0].residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setNkResidentialStreet(resultnk[0].residentialStreet);\r\n            setNkResidentialCity(resultnk[0].residentialCity);\r\n            setNkResidentialState(resultnk[0].residentialState);\r\n            setNkResidentialCountry(resultnk[0].residentialCountry);\r\n            setNkOccupation(resultnk[0].occupation);\r\n            setNkDeleteFlag(resultnk[0].deleteFlag);\r\n            setNkCreatedTime(resultnk[0].createdTime);\r\n          } else {\r\n            setNkID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/getForEmployee/${personalIds}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultba) => {\r\n        setOpened(false);\r\n        if (resultba.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultba.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultba.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultba.length != 0) {\r\n            setBaID(resultba[0].id);\r\n            setBaBank(resultba[0].bank);\r\n            setBaCountry(resultba[0].country);\r\n            setBaAcctNo(resultba[0].acctNo);\r\n            setBaAcctName(resultba[0].acctName);\r\n            setBaBankCode(resultba[0].bankCode);\r\n            setBaDeleteFlag(resultba[0].deleteFlag);\r\n            setBaCreatedTime(resultba[0].createdTime);\r\n          } else {\r\n            setBaID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultma) => {\r\n        setOpened(false);\r\n        if (resultma.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultma.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultma.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultma.length != 0) {\r\n            setMaID(resultma[0].id);\r\n            setMaNoOfSpouses(resultma[0].noOfSpouses);\r\n            setMaNoOfChildren(resultma[0].noOfChildren);\r\n            setMaDeleteFlag(resultma[0].deleteFlag);\r\n            setMaCreatedTime(resultma[0].createdTime);\r\n          } else {\r\n            setMaID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/getForEmployee/${personalIds}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultme) => {\r\n        setOpened(false);\r\n        if (resultme.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultme.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultme.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (resultme.length != 0) {\r\n            setMeID(resultme[0].id);\r\n            setMeBloodGroup(resultme[0].bloodGroup);\r\n            setMeGenotype(resultme[0].genotype);\r\n            setMeDeleteFlag(resultme[0].deleteFlag);\r\n            setMeCreatedTime(resultme[0].createdTime);\r\n          } else {\r\n            setMeID(null);\r\n          }\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/getBanks`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setAllBanks(result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const personalIDs = data11.personalID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(\r\n      `${process.env.REACT_APP_TANTA_URL}/payroll/getEmpPayrollHistory/${orgIDs}/${personalIDs}`,\r\n      {\r\n        headers,\r\n      }\r\n    )\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(result);\r\n          setItems(result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleGenReceipt = (value) => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n\r\n    fetch(`${process.env.REACT_APP_TANTA_URL}/payroll/generatePaySlip/${paymentHisValue}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    if (timestamp === 0) {\r\n      return \"No Date\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else {\r\n      const date = new Date(timestamp);\r\n      const retDate = date.toDateString();\r\n      return retDate;\r\n    }\r\n  };\r\n\r\n  // Method to change type\r\n  const changeType = (status) => {\r\n    if (status === 1) {\r\n      return \"Initiated\";\r\n      // eslint-disable-next-line no-else-return\r\n    } else if (status === 2) {\r\n      return \"Paid\";\r\n    } else if (status === 3) {\r\n      return \"Payment Error\";\r\n    } else {\r\n      return \"Created\";\r\n    }\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Employee's Name\", accessor: \"empName\", align: \"left\" },\r\n    { Header: \"Amount (NGN)\", accessor: \"remuneration.amount\", align: \"left\" },\r\n    { Header: \"Updated Amount (NGN)\", accessor: \"payroll.amount\", align: \"left\" },\r\n    { Header: \"Generated By\", accessor: \"payroll.generatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Payment Status\",\r\n      accessor: \"payroll.paymentStatus\",\r\n      Cell: ({ cell: { value } }) => changeType(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Last Retried By\", accessor: \"payroll.lastRetryByName\", align: \"left\" },\r\n    { Header: \"Retried Times\", accessor: \"payroll.retryTimes\", align: \"left\" },\r\n    {\r\n      Header: \"Last Retried Time\",\r\n      accessor: \"payroll.lastRetryTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    { Header: \"Terminated By\", accessor: \"payroll.terminatedByName\", align: \"left\" },\r\n    {\r\n      Header: \"Terminated Time\",\r\n      accessor: \"payroll.terminatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"payroll.id\",\r\n      // eslint-disable-next-line react/prop-types\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate != null) {\r\n      dayx = startDate.getDate();\r\n      monthx = startDate.getMonth() + 1;\r\n      yearx = startDate.getFullYear();\r\n    }\r\n\r\n    const raw = JSON.stringify({\r\n      id: personalIds,\r\n      fname: fnamex,\r\n      lname: lnamex,\r\n      oname: onamex,\r\n      email: emailx,\r\n      pno: phonex,\r\n      nationality: nationalityx,\r\n      residentialStreet: residentialStreetx,\r\n      residentialCity: residentialCityx,\r\n      residentialState: residentialStatex,\r\n      residentialCountry: residentialCountryx,\r\n      dayOfBirth: dayx,\r\n      monthOfBirth: monthx,\r\n      yearOfBirth: yearx,\r\n      maritalStatus: maritalStatusx,\r\n      sysStatus: sysStatusx,\r\n      deleteFlag: deleteFlagx,\r\n      createdTime: createdTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddNOK = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      fname: nkFnamex,\r\n      lname: nkLnamex,\r\n      oname: nkOnamex,\r\n      email: nkEmailx,\r\n      pno: nkPhonex,\r\n      title: nkTitlex,\r\n      residentialStreet: nkResidentialStreetx,\r\n      residentialCity: nkResidentialCityx,\r\n      residentialState: nkResidentialStatex,\r\n      residentialCountry: nkResidentialCountryx,\r\n      occupation: nkOccupationx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddBA = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bank: baBankx,\r\n      country: baCountryx,\r\n      acctNo: baAcctNox,\r\n      acctName: baAcctNamex,\r\n      bankCode: baBankCodex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddMA = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      noOfSpouses: maNoOfSpousesx,\r\n      noOfChildren: maNoOfChildrenx,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleAddME = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bloodGroup: meBloodGroupx,\r\n      genotype: meGenotypex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/add`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleNKUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: nkIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      fname: nkFnamex,\r\n      lname: nkLnamex,\r\n      oname: nkOnamex,\r\n      email: nkEmailx,\r\n      pno: nkPhonex,\r\n      title: nkTitlex,\r\n      residentialStreet: nkResidentialStreetx,\r\n      residentialCity: nkResidentialCityx,\r\n      residentialState: nkResidentialStatex,\r\n      residentialCountry: nkResidentialCountryx,\r\n      occupation: nkOccupationx,\r\n      deleteFlag: nkDeleteFlagx,\r\n      createdTime: nkCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/nextofkin/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n  const handleBAUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: baIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bank: baBankx,\r\n      country: baCountryx,\r\n      acctNo: baAcctNox,\r\n      acctName: baAcctNamex,\r\n      bankCode: baBankCodex,\r\n      deleteFlag: baDeleteFlagx,\r\n      createdTime: baCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    console.log(raw);\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/bankaccount/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleMAUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: maIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      noOfSpouses: maNoOfSpousesx,\r\n      noOfChildren: maNoOfChildrenx,\r\n      deleteFlag: maDeleteFlagx,\r\n      createdTime: maCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/marital/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleMEUpdate = (e) => {\r\n    setOpened(true);\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIds = data11.personalID;\r\n    const orgIDs = data11.orgID;\r\n    e.preventDefault();\r\n    const raw = JSON.stringify({\r\n      id: meIDx,\r\n      orgID: orgIDs,\r\n      empID: personalIds,\r\n      bloodGroup: meBloodGroupx,\r\n      genotype: meGenotypex,\r\n      deleteFlag: meDeleteFlagx,\r\n      createdTime: meCreatedTimex,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/medical/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleNKAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (nkIDx == null) {\r\n      handleAddNOK(e);\r\n    } else {\r\n      handleNKUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleBAAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (baIDx == null) {\r\n      handleAddBA(e);\r\n    } else {\r\n      handleBAUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleMAAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (maIDx == null) {\r\n      handleAddMA(e);\r\n    } else {\r\n      handleMAUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleMEAddUpdate = (e) => {\r\n    e.preventDefault();\r\n    if (meIDx == null) {\r\n      handleAddME(e);\r\n    } else {\r\n      handleMEUpdate(e);\r\n    }\r\n  };\r\n\r\n  const handleOnChangeBank = (e) => {\r\n    const filteredItems = allBanks.filter((item) => item.name === e.target.value);\r\n    if (e.target.value === \"1\") {\r\n      setBaBank(\"\");\r\n      setBaBankCode(\"\");\r\n    } else {\r\n      setBaBank(e.target.value);\r\n      setBaBankCode(filteredItems[0].code);\r\n    }\r\n  };\r\n\r\n  const handleOnChangeBaCountry = (e) => {\r\n    setBaCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNKCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setNkResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNKState = (e) => {\r\n    setNkResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 .,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - . , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkFnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkFnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML = \"\";\r\n    }\r\n    if (nkFnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkfirst\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkLnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkLnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML = \"\";\r\n    }\r\n    if (nkLnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nklast\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkOnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (nkOnamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML = \"\";\r\n    }\r\n    if (nkOnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkother\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!nkEmailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (nkEmailx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"\";\r\n    }\r\n    if (nkEmailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkemail\").innerHTML = \"Email is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 .,-]+$/;\r\n    if (!nkResidentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"Street - use only [ - . , ] as symbols<br>\";\r\n    }\r\n    if (nkResidentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"\";\r\n    }\r\n    if (nkResidentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkstreet\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!nkResidentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML =\r\n        \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (nkResidentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML = \"\";\r\n    }\r\n    if (nkResidentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkcity\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnNKOccupationKeys = () => {\r\n    const vOccupation = /^[a-zA-Z ]+$/;\r\n    if (!nkOccupationx.match(vOccupation)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML =\r\n        \"Occupation - input only capital and small letters\";\r\n    }\r\n    if (nkOccupationx.match(vOccupation)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML = \"\";\r\n    }\r\n    if (nkOccupationx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"nkoccupation\").innerHTML = \"Occupation is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnBAAccNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!baAcctNamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML =\r\n        \"Account Name - input only capital and small letters<br>\";\r\n    }\r\n    if (baAcctNamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML = \"\";\r\n    }\r\n    if (baAcctNamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccName\").innerHTML = \"Account Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnBAAccNoKeys = () => {\r\n    const numbers = /^[0-9A-Z]{8,}/;\r\n    if (!baAcctNox.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML =\r\n        \"Account Number - input a valid account number<br>\";\r\n    }\r\n    if (baAcctNox.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML = \"\";\r\n    }\r\n    if (baAcctNox.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"baAccNo\").innerHTML = \"Account Number is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnMASpouseKeys = () => {\r\n    const numbers = /^[0-9]+$/;\r\n    if (!maNoOfSpousesx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"Spouses - input only numbers<br>\";\r\n    }\r\n    if (maNoOfSpousesx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"\";\r\n    }\r\n    if (maNoOfSpousesx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"maspouse\").innerHTML = \"Spouses - This is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnMAChildrenKeys = () => {\r\n    const numbers = /^[0-9]+$/;\r\n    if (!maNoOfChildrenx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"Children - input only numbers<br>\";\r\n    }\r\n    if (maNoOfChildrenx.match(numbers)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"\";\r\n    }\r\n    if (maNoOfChildrenx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"machildren\").innerHTML = \"Children - This is required<br>\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-1\" />\r\n        <div className=\"col-sm-4\">\r\n          {showProf ? (\r\n            <Card>\r\n              <div align=\"center\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"sm\"\r\n                  coloredShadow=\"info\"\r\n                  mt={2}\r\n                  mx={0}\r\n                  p={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    fontFamily=\"Helvetica\"\r\n                    fontSize=\"120%\"\r\n                    color=\"white\"\r\n                  >\r\n                    {fnamex} {onamex} {lnamex}\r\n                  </MDTypography>\r\n                </MDBox>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h7\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Century Gothic\"\r\n                  fontSize=\"70%\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {emailx}\r\n                </MDTypography>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h5\"\r\n                  fontWeight=\"light\"\r\n                  fontSize=\"70%\"\r\n                  fontFamily=\"Helvetica\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {phonex}\r\n                </MDTypography>\r\n              </div>\r\n              <div align=\"center\">\r\n                <MDTypography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Helvetica\"\r\n                  fontSize=\"80%\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                >\r\n                  {residentialStreetx}&#44; {residentialCityx}&#44; {residentialStatex}\r\n                </MDTypography>\r\n\r\n                <MDTypography\r\n                  variant=\"h6\"\r\n                  fontWeight=\"medium\"\r\n                  fontFamily=\"Helvetica\"\r\n                  color=\"dark\"\r\n                  mt={0}\r\n                  mb={5}\r\n                >\r\n                  {residentialCountryx}\r\n                </MDTypography>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <MDBox />\r\n          )}\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Next Of Kin\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkfirst\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nklast\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkother\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkemail\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkphone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkstreet\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkcity\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"nkoccupation\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"First Name\"\r\n                          onKeyUp={handleOnNKFirstKeys}\r\n                          value={nkFnamex || \"\"}\r\n                          onChange={(e) => setNkFname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Last Name\"\r\n                          value={nkLnamex || \"\"}\r\n                          onKeyUp={handleOnNKLastKeys}\r\n                          onChange={(e) => setNkLname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Other Name\"\r\n                          value={nkOnamex || \"\"}\r\n                          onKeyUp={handleOnNKOtherKeys}\r\n                          onChange={(e) => setNkOname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Email\"\r\n                          value={nkEmailx || \"\"}\r\n                          onKeyUp={handleOnNKEmailKeys}\r\n                          onChange={(e) => setNKEmail(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Phone Number\r\n                        </MDTypography>\r\n                        <PhoneInput\r\n                          value={nkPhonex}\r\n                          inputStyle={{ width: \"170%\" }}\r\n                          buttonStyle={{}}\r\n                          onChange={setNkPhone}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mb={2}>\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Title\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          onChange={(e) => setNkTitle(e.target.value)}\r\n                          value={nkTitlex || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Select Title---</option>\r\n                          <option value=\"Mr\">Mr</option>\r\n                          <option value=\"Mrs\">Mrs</option>\r\n                          <option value=\"Miss\">Miss</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Street\"\r\n                          value={nkResidentialStreetx || \"\"}\r\n                          onKeyUp={handleOnNKStreetKeys}\r\n                          onChange={(e) => setNkResidentialStreet(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          value={nkResidentialCityx || \"\"}\r\n                          onKeyUp={handleOnNKCityKeys}\r\n                          onChange={(e) => setNkResidentialCity(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nkResidentialCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNKCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          State\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nkResidentialStatex}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNKState}\r\n                          >\r\n                            <option>--Select State--</option>\r\n                            {allStates.map((apis) => (\r\n                              <option key={apis.code} value={apis.name}>\r\n                                {apis.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDBox mb={2}>\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Occupation\"\r\n                          value={nkOccupationx || \"\"}\r\n                          onKeyUp={handleOnNKOccupationKeys}\r\n                          onChange={(e) => setNkOccupation(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleNKAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Marital\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"maspouse\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"machildren\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-10\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Number Of Spouses\"\r\n                          value={maNoOfSpousesx || \"\"}\r\n                          onKeyUp={handleOnMASpouseKeys}\r\n                          onChange={(e) => setMaNoOfSpouses(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-10\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Number Of Children\"\r\n                          value={maNoOfChildrenx || \"\"}\r\n                          onKeyUp={handleOnMAChildrenKeys}\r\n                          onChange={(e) => setMaNoOfChildren(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleMAAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n        &nbsp;\r\n        <div className=\"col-sm-6\">\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    BASIC INFO\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"First Name\"\r\n                          value={fnamex || \"\"}\r\n                          onKeyUp={handleOnFirstKeys}\r\n                          onChange={(e) => setFname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Last Name\"\r\n                          value={lnamex || \"\"}\r\n                          onKeyUp={handleOnLastKeys}\r\n                          onChange={(e) => setLname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Other Name\"\r\n                          value={onamex || \"\"}\r\n                          onKeyUp={handleOnOtherKeys}\r\n                          onChange={(e) => setOname(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Personal Email\"\r\n                          disabled\r\n                          value={emailx || \"\"}\r\n                          onKeyUp={handleOnPEmailKeys}\r\n                          onChange={(e) => setEmail(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                          Phone Number\r\n                        </MDTypography>\r\n                        <PhoneInput\r\n                          value={phonex}\r\n                          inputStyle={{ width: \"100%\" }}\r\n                          buttonStyle={{}}\r\n                          onChange={setPhone}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Marital Status\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMaritalStatus(e.target.value)}\r\n                          value={maritalStatusx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Marital Status---</option>\r\n                          <option value=\"Single\">Single</option>\r\n                          <option value=\"Married\">Married</option>\r\n                          <option value=\"Divorced\">Divorced</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mb={0} mt={0} textAlign=\"left\">\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          color=\"text\"\r\n                          mt={1}\r\n                          textAlign=\"left\"\r\n                        >\r\n                          Date Of Birth\r\n                        </MDTypography>\r\n                      </MDBox>\r\n                      <MDBox mb={4} mt={0} textAlign=\"left\">\r\n                        <div>\r\n                          <style>\r\n                            {`.date-picker input {\r\n                      width: 50%\r\n                      align: left\r\n                 }`}\r\n                          </style>\r\n                          <DatePicker\r\n                            date={startDate}\r\n                            wrapperClassName=\"date-picker\"\r\n                            placeholder=\"Select Birth Date\"\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            confirmBtnText=\"Confirm\"\r\n                            showCancelButton=\"true\"\r\n                            customStyles={{\r\n                              placeholderText: {\r\n                                fontSize: 5,\r\n                              },\r\n                              dateIcon: {\r\n                                height: 0,\r\n                                width: 0,\r\n                              },\r\n                              dateText: {\r\n                                color: \"#b3b4b5\",\r\n                                fontSize: 16,\r\n                              },\r\n                              dateInput: {\r\n                                borderWidth: 0,\r\n                              },\r\n                            }}\r\n                            selected={startDate}\r\n                            onChange={(date) => setStartDate(date)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Nationality\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={nationalityx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeNationality}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Street\"\r\n                          value={residentialStreetx || \"\"}\r\n                          onKeyUp={handleOnStreetKeys}\r\n                          onChange={(e) => setResidentialStreet(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"City\"\r\n                          value={residentialCityx || \"\"}\r\n                          onKeyUp={handleOnCityKeys}\r\n                          onChange={(e) => setResidentialCity(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {AlCountry.map((apic) => (\r\n                              <option key={apic.code3} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          State\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={residentialStatex || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeRCState}\r\n                          >\r\n                            <option>--Select State--</option>\r\n                            {allStates.map((apis) => (\r\n                              <option key={apis.code} value={apis.name}>\r\n                                {apis.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton variant=\"gradient\" onClick={handleUpdate} color=\"info\" width=\"50%\">\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Bank Account\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"baAccName\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"baAccNo\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                          Bank\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={baBankx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeBank}\r\n                          >\r\n                            <option value=\"1\">--Select Bank--</option>\r\n                            {allBanks.map((api) => (\r\n                              <option key={api.code} value={api.name}>\r\n                                {api.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                          Bank Country\r\n                        </MDTypography>\r\n                        <MDBox textAlign=\"right\">\r\n                          <Form.Select\r\n                            value={baCountryx || \"\"}\r\n                            aria-label=\"Default select example\"\r\n                            onChange={handleOnChangeBaCountry}\r\n                          >\r\n                            <option>--Select Country--</option>\r\n                            {WCountries.map((apic) => (\r\n                              <option key={apic.code} value={apic.name}>\r\n                                {apic.name}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Select>\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Account Number\"\r\n                          value={baAcctNox || \"\"}\r\n                          onKeyUp={handleOnBAAccNoKeys}\r\n                          onChange={(e) => setBaAcctNo(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-8\">\r\n                        <MDInput\r\n                          type=\"email\"\r\n                          label=\"Account Name\"\r\n                          value={baAcctNamex || \"\"}\r\n                          onKeyUp={handleOnBAAccNameKeys}\r\n                          onChange={(e) => setBaAcctName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleBAAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n          &nbsp;\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={2}\r\n                  mt={-6}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography\r\n                    variant=\"h4\"\r\n                    fontWeight=\"medium\"\r\n                    color=\"white\"\r\n                    textAlign=\"center\"\r\n                    mt={1}\r\n                  >\r\n                    Medical\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={5}\r\n                  textAlign=\"center\"\r\n                />\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Blood Group\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMeBloodGroup(e.target.value)}\r\n                          value={meBloodGroupx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Blood Group---</option>\r\n                          <option value=\"A+\">A+</option>\r\n                          <option value=\"A-\">A-</option>\r\n                          <option value=\"B+\">B+</option>\r\n                          <option value=\"B-\">B-</option>\r\n                          <option value=\"AB+\">AB+</option>\r\n                          <option value=\"AB-\">AB-</option>\r\n                          <option value=\"O+\">O+</option>\r\n                          <option value=\"O-\">O-</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Genotype\r\n                      </MDTypography>\r\n                      <MDBox mb={2}>\r\n                        <Form.Select\r\n                          onChange={(e) => setMeGenotype(e.target.value)}\r\n                          value={meGenotypex || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option>---Genotype---</option>\r\n                          <option value=\"AA\">AA</option>\r\n                          <option value=\"AS\">AS</option>\r\n                          <option value=\"AC\">AC</option>\r\n                          <option value=\"SS\">SS</option>\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                </Container>\r\n                <div align=\"center\">\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleMEAddUpdate}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      &nbsp;\r\n      <MDBox>\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: items }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\viewUser\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userHistory\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\inviteUser\\index.js",["1028","1029","1030","1031","1032","1033","1034","1035","1036"],"// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction InviteUser() {\r\n  const [phonex, setPhone] = useState(\"\");\r\n  // const [startDate, setStartDate] = useState(new Date());\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [idx, setId] = useState(0);\r\n  const [orgIDx, setOrgID] = useState(\"\");\r\n  const [roleIDx, setRoleID] = useState(0);\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [emaily, setOemail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [deleteFlagx, setDeleteFlag] = useState(0);\r\n  const [sysStatusx, setSysStatus] = useState(\"\");\r\n  const [createdTimex, setCreatedTime] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n  const [passEnabled, setPassEnabled] = useState(true);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  useEffect(() => {\r\n    /* if (idx === 0) {\r\n      setPassEnabled(true);\r\n    } */\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const fnameu = urlParams.get(\"fname\");\r\n    const lnameu = urlParams.get(\"lname\");\r\n    const emailu = urlParams.get(\"email\");\r\n    const orgIDu = urlParams.get(\"orgID\");\r\n    const roleIDu = urlParams.get(\"role\");\r\n    console.log(fnameu);\r\n    console.log(lnameu);\r\n    console.log(emailu);\r\n    console.log(orgIDu);\r\n    console.log(roleIDu);\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      setFname(fnameu);\r\n      setLname(lnameu);\r\n      setOemail(emailu);\r\n      setOrgID(orgIDu);\r\n      setRoleID(roleIDu);\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/${emailpersonal}`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            setPassEnabled(false);\r\n            setOname(result.oname);\r\n            setId(result.id);\r\n            setPhone(result.pno);\r\n            setNationality(result.nationality);\r\n            setResidentialStreet(result.residentialStreet);\r\n            setResidentialCity(result.residentialCity);\r\n            const filteredItems = AlCountry.filter(\r\n              (item) => item.name === result.residentialCountry\r\n            );\r\n            setAllStates(filteredItems[0].states);\r\n            setResidentialState(result.residentialState);\r\n            setResidentialCountry(result.residentialCountry);\r\n            setMaritalStatus(result.maritalStatus);\r\n            setDeleteFlag(result.deleteFlag);\r\n            setSysStatus(result.sysStatus);\r\n            setCreatedTime(result.createdTime);\r\n\r\n            setStartDate(\r\n              new Date(`${result.monthOfBirth}/${result.dayOfBirth}/${result.yearOfBirth}`)\r\n            );\r\n          } else {\r\n            setId(0);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setId(0);\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      // const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        id: idx,\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n        deleteFlag: deleteFlagx,\r\n        sysStatus: sysStatusx,\r\n        createdTime: createdTimex,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      localStorage.setItem(\"email1\", emailx);\r\n\r\n      let endpoint = \"add\";\r\n      if (idx !== 0) {\r\n        endpoint = \"update\";\r\n      }\r\n      if (endpoint === \"update\") {\r\n        setPassword(\"\");\r\n      }\r\n      const endpointPC = \"add\";\r\n      let endpointL = \"add\";\r\n      if (endpoint === \"update\") {\r\n        endpointL = `updateOrganization/${emailx}/${orgIDx}`;\r\n      }\r\n      let methodLUO = \"POST\";\r\n      if (endpointL !== \"add\") {\r\n        methodLUO = \"GET\";\r\n      }\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/${endpoint}`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          localStorage.setItem(\"personalInfo\", JSON.stringify(result.data));\r\n          const raw1 = JSON.stringify({\r\n            orgID: orgIDx,\r\n            personalID: result.data.id,\r\n            email: emaily,\r\n            roleID: roleIDx,\r\n          });\r\n          const requestOptions1 = {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: raw1,\r\n            redirect: \"follow\",\r\n          };\r\n\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/${endpointPC}`, requestOptions1)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resultx) => {\r\n              console.log(resultx);\r\n              localStorage.setItem(\"company\", JSON.stringify(resultx.data));\r\n              const raw2 = JSON.stringify({\r\n                orgID: orgIDx,\r\n                empID: result.data.id,\r\n                username: emailx,\r\n                password: passwordx,\r\n              });\r\n              const requestOptions2 = {\r\n                method: methodLUO,\r\n                headers: myHeaders,\r\n                body: raw2,\r\n                redirect: \"follow\",\r\n              };\r\n              fetch(`${process.env.REACT_APP_ZAVE_URL}/login/${endpointL}`, requestOptions2)\r\n                .then(async (res) => {\r\n                  const aToken = res.headers.get(\"token-1\");\r\n                  localStorage.setItem(\"rexxdex\", aToken);\r\n                  return res.json();\r\n                })\r\n                .then(() => {\r\n                  setOpened(false);\r\n                  MySwal.fire({\r\n                    title: result.status,\r\n                    type: \"success\",\r\n                    text: result.message,\r\n                  }).then(() => {\r\n                    navigate(\"/authentication/sign-in\", { replace: true });\r\n                  });\r\n                });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  /* return <Select options={options} value={value} onChange={changeHandler} />\r\n} */\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h2\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            PlutoSpace\r\n          </MDTypography>\r\n          <MDTypography display=\"block\" variant=\"button\" color=\"white\" my={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"text\"\r\n                label=\"Other Name\"\r\n                value={onamex || \"\"}\r\n                onKeyUp={handleOnOtherKeys}\r\n                onChange={(e) => setOname(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Personal Email\"\r\n                value={emailx || \"\"}\r\n                onKeyUp={handleOnPEmailKeys}\r\n                onChange={getPersonalInformation}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <MDInput\r\n                type=\"email\"\r\n                label=\"Official Email\"\r\n                value={emaily || \"\"}\r\n                disabled\r\n                onChange={(e) => setOemail(e.target.value)}\r\n                variant=\"standard\"\r\n                fullWidth\r\n              />\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <div className=\"col-sm-8\">\r\n                <Form.Select\r\n                  aria-label=\"Default select example\"\r\n                  width=\"50%\"\r\n                  mx={34}\r\n                  value={maritalStatusx || \"\"}\r\n                  onChange={(e) => setMaritalStatus(e.target.value)}\r\n                >\r\n                  <option>--Marital Status--</option>\r\n                  <option value=\"Married\">Married</option>\r\n                  <option value=\"Single\">Single</option>\r\n                  <option value=\"Divorced\">Divorced</option>\r\n                </Form.Select>\r\n              </div>\r\n            </MDBox>\r\n            <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n              Date Of Birth\r\n            </MDTypography>\r\n            <MDBox mb={4} mt={-1}>\r\n              <div>\r\n                <style>\r\n                  {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                </style>\r\n                <DatePicker\r\n                  date={startDate}\r\n                  wrapperClassName=\"date-picker\"\r\n                  placeholder=\"Select Birth Date\"\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  confirmBtnText=\"Confirm\"\r\n                  showCancelButton=\"true\"\r\n                  customStyles={{\r\n                    placeholderText: {\r\n                      fontSize: 5,\r\n                    },\r\n                    dateIcon: {\r\n                      height: 0,\r\n                      width: 0,\r\n                    },\r\n                    dateText: {\r\n                      color: \"#b3b4b5\",\r\n                      fontSize: 16,\r\n                    },\r\n                    dateInput: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  }}\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date)}\r\n                  peekNextMonth\r\n                  showMonthDropdown\r\n                  showYearDropdown\r\n                  dropdownMode=\"select\"\r\n                />\r\n              </div>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-10\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                      <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                        Country\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={residentialCountryx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeRCCountry}\r\n                        >\r\n                          <option>--Select Country--</option>\r\n                          {AlCountry.map((apic) => (\r\n                            <option key={apic.code3} value={apic.name}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      disabled={!passEnabled}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default InviteUser;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\checklists\\index.js",["1037","1038","1039"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Swal from \"sweetalert2\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [rolName, setRolName] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [vPermissions, setVPermissions] = useState([]);\r\n  const [roleStep, setRoleStep] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n  const orgIDs = data11.orgID;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n\r\n    let isChecked = 0;\r\n    const checks = e.target.checked;\r\n    if (checks) {\r\n      isChecked = 1;\r\n    }\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      roleID: id,\r\n      stepID: apix.id,\r\n      isCheck: isChecked,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    // const headers = miHeaders;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/save`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const id = urlParams.get(\"id\");\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/role/get/${id}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultg) => {\r\n        // setOpened(false);\r\n        if (resultg.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultg.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setRolName(resultg[0].name);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    // setOpened(true);\r\n\r\n    const permissionsList = [];\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/step/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setPermissions(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n        fetch(`${process.env.REACT_APP_KUBU_URL}/rolestep/getsRoleSteps/${orgIDs}/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            // setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setRoleStep(resultrs);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((permission) => {\r\n              let check = false;\r\n              if (resultrs != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs.map((rolPermi) => {\r\n                  if (rolPermi.stepID === permission.id) {\r\n                    if (rolPermi.isCheck === 1) {\r\n                      check = true;\r\n                    }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                id: permission.id,\r\n                name: permission.name,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(permissions);\r\n            console.log(roleStep);\r\n            console.log(permissionsList);\r\n            setVPermissions(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {rolName}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDTypography\r\n          variant=\"h4\"\r\n          textAlign=\"left\"\r\n          fontWeight=\"medium\"\r\n          color=\"secondary\"\r\n          mx={4}\r\n          mt={2}\r\n        >\r\n          Steps\r\n        </MDTypography>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {vPermissions.map((api) => (\r\n              <div key={api.id} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>{api.name}</Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groupview\\index.js",["1040","1041","1042","1043"],"import { Form } from \"react-bootstrap\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Card from \"@mui/material/Card\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\n\r\nimport { useState, useEffect, React } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport PHeaders from \"postHeader\";\r\n\r\nfunction Checkbox() {\r\n  const [namex, setName] = useState(\"\");\r\n  const [groupmembers, setGroupMember] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [usermembers, setUserMember] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleOnClick = (e, apix) => {\r\n    e.preventDefault();\r\n    setOpened(true);\r\n\r\n    const checks = e.target.checked;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    if (checks) {\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        groupID: apix.groupID,\r\n        empID: apix.empID,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      // const headers = miHeaders;\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/addMember`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"DELETE\",\r\n        headers: miHeaders,\r\n      };\r\n\r\n      fetch(\r\n        `${process.env.REACT_APP_SHASHA_URL}/groups/removeMember/${orgIDs}/${apix.groupID}/${apix.empID}`,\r\n        requestOptions\r\n      )\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((resx) => {\r\n          setOpened(false);\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n\r\n    const permissionsList = [];\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultd) => {\r\n        if (resultd.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultd.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUsers(resultd);\r\n        }\r\n\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const id = urlParams.get(\"id\");\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/getByIds/${id}`, {\r\n          headers,\r\n        })\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resultrs) => {\r\n            setOpened(false);\r\n            if (resultrs.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resultrs.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            if (isMounted) {\r\n              setName(resultrs[0].group.name);\r\n              setGroupMember(resultrs[0].groupMembers);\r\n            }\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            resultd.map((emp) => {\r\n              let check = false;\r\n              if (resultrs[0].groupMembers != null) {\r\n                // eslint-disable-next-line array-callback-return\r\n                resultrs[0].groupMembers.map((member) => {\r\n                  if (member.empID === emp.personal.id) {\r\n                    // if (rolPermi.isCheck === 1) {\r\n                    check = true;\r\n                    // }\r\n                  }\r\n                  // check = false;\r\n                });\r\n              }\r\n\r\n              const pObj = {\r\n                groupID: id,\r\n                empID: emp.personal.id,\r\n                fname: emp.personal.fname,\r\n                lname: emp.personal.lname,\r\n                isCheck: check,\r\n              };\r\n\r\n              permissionsList.push(pObj);\r\n            });\r\n            console.log(users);\r\n            console.log(groupmembers);\r\n            setUserMember(permissionsList);\r\n          });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={30}\r\n          mt={2}\r\n          p={2}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n            {namex}\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={0} px={4}>\r\n          &nbsp;\r\n          <Form>\r\n            {usermembers.map((api) => (\r\n              <div key={api.empID} className=\"mb-3\">\r\n                <Form.Check type=\"checkbox\">\r\n                  <Form.Check.Input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={api.isCheck}\r\n                    onClick={(e) => handleOnClick(e, api)}\r\n                  />\r\n                  <Form.Check.Label>\r\n                    {api.fname} {api.lname}\r\n                  </Form.Check.Label>\r\n                </Form.Check>\r\n              </div>\r\n            ))}\r\n          </Form>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Checkbox;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\addUserSalaryToUserManagement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\update\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\paymentHistory\\index.js",["1044","1045","1046","1047"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDButton from \"components/MDButton\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Dropdown } from \"react-bootstrap\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport IHeaders from \"imgHeader\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { MonnifyConsumer } from \"react-monnify\";\r\n\r\nfunction PaymentHis() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [descripx, setDescripx] = useState(\"\");\r\n  const [currencyx, setCurrency] = useState(\"NGN\");\r\n  const [amountx, setAmountx] = useState(0);\r\n  const [pnox, setPno] = useState(\"\");\r\n  const [bonusCheck, setBonusCheck] = useState([]);\r\n  const [referenceSKey, setReferenceSKey] = useState();\r\n  const [bonusSetID, setBonusSetID] = useState([]);\r\n\r\n  const [checkedEmail, setCheckedEmail] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n  const [checkedCity, setCheckedCity] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [auditSDate, setAuditSDate] = useState(\"\");\r\n  const [auditEDate, setAuditEDate] = useState(\"\");\r\n  const [concaBalance, setConcaBalance] = useState(\"\");\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allIHeaders: iiHeaders } = IHeaders();\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n  const bonusStatus = \"1\";\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/gets/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          console.log(resultapi);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOpened(true);\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getBalance/${orgIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          let comBalance = 0;\r\n          if (resultapi.length === 0) {\r\n            comBalance = 0;\r\n          } else {\r\n            comBalance = resultapi.balance;\r\n          }\r\n\r\n          let parts = 0;\r\n          if (comBalance > 0) {\r\n            parts = comBalance.toString().split(\".\");\r\n          }\r\n          const numberPart = parts[0];\r\n          const decimalPart = parts[1];\r\n          const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n          let value = 0;\r\n          if (comBalance > 0) {\r\n            value = numberPart.replace(thousands, \",\") + (decimalPart ? `.${decimalPart}` : \"\");\r\n          }\r\n          setConcaBalance(`NGN ${value}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n    setOpened(true);\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/bonusSetting/getByStatus/${bonusStatus}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultapi) => {\r\n        setOpened(false);\r\n        if (resultapi.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultapi.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          if (resultapi.message === \"Your Organization Has Not Made Any Payment\") {\r\n            setBonusCheck([]);\r\n          } else {\r\n            setBonusCheck(resultapi);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  //   const honComplete = (response) => {\r\n  //     setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n  //     console.log(response); // card charged successfully, get reference here\r\n  //     if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n  //       setOpened(true);\r\n  //       const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n  //       //   bonusAmount: 10\r\n  //       //   createdTime: 1649875827073\r\n  //       //   deleteFlag: 0\r\n  //       //   endTime: 1651104000000\r\n  //       //   id: \"62571b73813e040d304c13fd\"\r\n  //       //   maxTrigger: 6000\r\n  //       //   minTrigger: 2000\r\n  //       //   name: \"Test Freebie\"\r\n  //       //   startTime: 1649894400000\r\n  //       //   status: 0\r\n  //       let allPayandBonus = 0;\r\n  //       let mBonusAmount = 0;\r\n  //       // eslint-disable-next-line radix\r\n  //       const amountCOn = parseInt(amountx);\r\n  //       // eslint-disable-next-line array-callback-return\r\n  //       bonusCheck.map((checkBonus) => {\r\n  //         if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n  //           mBonusAmount = checkBonus.bonusAmount;\r\n  //           allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n  //         } else {\r\n  //           mBonusAmount = 0;\r\n  //           allPayandBonus = amountCOn;\r\n  //         }\r\n  //         // check = false;\r\n  //       });\r\n  //       const orgIDs = data11.orgID;\r\n  //       const raw = JSON.stringify({\r\n  //         orgID: orgIDs,\r\n  //         paidAmount: amountCOn,\r\n  //         bonusAmount: mBonusAmount,\r\n  //         totalAmount: allPayandBonus,\r\n  //       });\r\n  //       const requestOptions = {\r\n  //         method: \"POST\",\r\n  //         headers: myHeaders,\r\n  //         body: raw,\r\n  //         redirect: \"follow\",\r\n  //       };\r\n  //       console.log(raw);\r\n  //       fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n  //         .then(async (res) => {\r\n  //           const aToken = res.headers.get(\"token-1\");\r\n  //           localStorage.setItem(\"rexxdex\", aToken);\r\n  //           return res.json();\r\n  //         })\r\n  //         .then((result) => {\r\n  //           if (result.message === \"Expired Access\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Token Does Not Exist\") {\r\n  //             navigate(\"/authentication/sign-in\");\r\n  //           }\r\n  //           if (result.message === \"Unauthorized Access\") {\r\n  //             navigate(\"/authentication/forbiddenPage\");\r\n  //           }\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: result.status,\r\n  //             type: \"success\",\r\n  //             text: result.message,\r\n  //           }).then(() => {\r\n  //             window.location.reload();\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           setOpened(false);\r\n  //           MySwal.fire({\r\n  //             title: error.status,\r\n  //             type: \"error\",\r\n  //             text: error.message,\r\n  //           });\r\n  //         });\r\n  //     }\r\n  //   };\r\n\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[-+]?[0-9]+.[0-9]+$/;\r\n    if (!amountx.match(letters)) {\r\n      setCheckedCity(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount - input a valid Amount<br>\";\r\n    }\r\n    if (amountx.match(letters)) {\r\n      setCheckedCity(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (amountx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"Amount is required<br>\";\r\n    }\r\n    setEnabled(checkedEmail === true && checkedName === true && checkedCity === true);\r\n  };\r\n\r\n  const honClose = (response) => {\r\n    handleOnNameKeys();\r\n    handleOnEmailKeys();\r\n    handleOnCityKeys();\r\n    if (enabled) {\r\n      setReferenceSKey(`${Math.floor(Math.random() * 1000000000 + 1)}`);\r\n\r\n      if (response.paymentStatus === \"PAID\" && response.status === \"SUCCESS\") {\r\n        setOpened(true);\r\n\r\n        let allPayandBonus = 0;\r\n        let mBonusAmount = 0;\r\n        // eslint-disable-next-line radix\r\n        const amountCOn = parseInt(amountx);\r\n        if (bonusCheck.length === 0) {\r\n          mBonusAmount = 0;\r\n          allPayandBonus = amountCOn;\r\n        } else {\r\n          // eslint-disable-next-line array-callback-return\r\n          bonusCheck.map((checkBonus) => {\r\n            if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger === 0 && checkBonus.maxTrigger >= amountCOn) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else if (checkBonus.minTrigger <= amountCOn && checkBonus.maxTrigger === 0) {\r\n              mBonusAmount = checkBonus.bonusAmount;\r\n              setBonusSetID(checkBonus.id);\r\n              allPayandBonus = checkBonus.bonusAmount + amountCOn;\r\n            } else {\r\n              mBonusAmount = 0;\r\n              allPayandBonus = amountCOn;\r\n            }\r\n            // check = false;\r\n          });\r\n        }\r\n\r\n        const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n        const orgIDs = data11.orgID;\r\n        const raw = JSON.stringify({\r\n          orgID: orgIDs,\r\n          paidAmount: amountCOn,\r\n          bonusAmount: mBonusAmount,\r\n          totalAmount: allPayandBonus,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/add`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((result) => {\r\n            if (result.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (result.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            setOpened(false);\r\n\r\n            const raw1 = JSON.stringify({\r\n              orgID: orgIDs,\r\n              bonusSettingID: bonusSetID,\r\n            });\r\n            const requestOptions1 = {\r\n              method: \"POST\",\r\n              headers: myHeaders,\r\n              body: raw1,\r\n              redirect: \"follow\",\r\n            };\r\n            if (mBonusAmount !== 0) {\r\n              fetch(\r\n                `${process.env.REACT_APP_EKOATLANTIC_URL}/bonusHistory/add`,\r\n                requestOptions1\r\n              ).then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              });\r\n            }\r\n            MySwal.fire({\r\n              title: result.status,\r\n              type: \"success\",\r\n              text: result.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const personalApiKey = \"MK_TEST_JB2L9T7HMG\";\r\n  const personalConCode = \"6428086775\";\r\n\r\n  const monNey = {\r\n    onClose: honClose,\r\n    amount: amountx,\r\n    currency: currencyx,\r\n    reference: referenceSKey,\r\n    customerFullName: namex,\r\n    customerEmail: emailx,\r\n    customerMobileNumber: pnox,\r\n    apiKey: personalApiKey,\r\n    contractCode: personalConCode,\r\n    paymentDescription: descripx,\r\n    isTestMode: true,\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    setOpened(true);\r\n    e.preventDefault();\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const auditConSDate = new Date(auditSDate).getTime();\r\n    const auditConEDate = new Date(auditEDate).getTime();\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      startDate: auditConSDate,\r\n      endDate: auditConEDate,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentHistory/getFilter`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setItems(result);\r\n      })\r\n      .catch((error) => {\r\n        setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleGenReceipt = (filteredData, value) => {\r\n    const headers = miHeaders;\r\n    let receiptNumber = \"\";\r\n    // Avoid filter for empty string\r\n    if (!value) {\r\n      receiptNumber = \"\";\r\n    } else {\r\n      const filteredItems = filteredData.filter((item) => item.id === value);\r\n\r\n      receiptNumber = filteredItems[0].receiptNo;\r\n    }\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const paymentHisValue = value;\r\n    const raw = JSON.stringify({\r\n      orgID: orgIDs,\r\n      receiptNo: receiptNumber,\r\n      paymentHistoryID: paymentHisValue,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/paymentReceipt/generate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        if (resx.status === \"SUCCESS\") {\r\n          if (resx.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n          }\r\n          if (resx.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n          }\r\n          console.log(resx);\r\n          fetch(\r\n            `${process.env.REACT_APP_EKOATLANTIC_URL}/media/getByKey/${orgIDs}/${resx.data.receiptNo}`,\r\n            {\r\n              headers,\r\n            }\r\n          )\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resxx) => {\r\n              if (resxx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resxx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n\r\n              const raw1 = JSON.stringify({\r\n                name: resxx.name,\r\n              });\r\n              console.log(raw1);\r\n              const requestOptions1 = {\r\n                method: \"POST\",\r\n                headers: iiHeaders,\r\n                body: raw1,\r\n                redirect: \"follow\",\r\n              };\r\n\r\n              fetch(`${process.env.REACT_APP_EKOATLANTIC_URL}/media/download`, requestOptions1)\r\n                .then((res) => res.blob())\r\n                .then((resx1) => {\r\n                  const objectURL = URL.createObjectURL(resx1);\r\n                  console.log(objectURL);\r\n\r\n                  // (C2) TO \"FORCE DOWNLOAD\"\r\n                  const anchor = document.createElement(\"a\");\r\n                  anchor.href = objectURL;\r\n                  anchor.download = resxx.name;\r\n                  anchor.click();\r\n\r\n                  // (C3) CLEAN UP\r\n                  window.URL.revokeObjectURL(objectURL);\r\n\r\n                  MySwal.fire({\r\n                    title: \"SUCCESS\",\r\n                    type: \"success\",\r\n                    text: \"Download Successful\",\r\n                  });\r\n                })\r\n                .catch((error) => {\r\n                  MySwal.fire({\r\n                    title: error.status,\r\n                    type: \"error\",\r\n                    text: error.message,\r\n                  });\r\n                });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const pColumns = [\r\n    { Header: \"Organization\", accessor: \"orgName\", align: \"left\" },\r\n    { Header: \"Paid Amount\", accessor: \"paidAmount\", align: \"left\" },\r\n    { Header: \"Bonus Amount\", accessor: \"bonusAmount\", align: \"left\" },\r\n    { Header: \"Total Amount\", accessor: \"totalAmount\", align: \"left\" },\r\n    { Header: \"Balance\", accessor: \"balance\", align: \"left\" },\r\n    {\r\n      Header: \"Last Updated\",\r\n      accessor: \"lastUpdatedTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"Date Created\",\r\n      accessor: \"createdTime\",\r\n      Cell: ({ cell: { value } }) => changeDate(value),\r\n      align: \"left\",\r\n    },\r\n    {\r\n      Header: \"actions\",\r\n      accessor: \"id\",\r\n      Cell: ({ cell: { value } }) => (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#dadada\",\r\n            borderRadius: \"2px\",\r\n          }}\r\n        >\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n              <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => handleGenReceipt(items, value)}>\r\n                Generate Receipt\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      ),\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Container>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-5\">\r\n            <Card>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mt={2}\r\n                mx={0}\r\n                p={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Balance\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"white\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={2}\r\n                p={6}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography variant=\"h1\" fontWeight=\"medium\" color=\"info\" textAlign=\"center\">\r\n                  {concaBalance}\r\n                </MDTypography>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-7\">\r\n            <Card>\r\n              <MDBox pt={4} pb={3} px={3}>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"info\"\r\n                  mx={2}\r\n                  mt={-3}\r\n                  p={2}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Make Payment\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox component=\"form\" role=\"form\">\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Name(name on receipt) *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={emailx || \"\"}\r\n                            onKeyUp={handleOnEmailKeys}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            label=\"Email *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={currencyx || \"\"}\r\n                            onChange={(e) => setCurrency(e.target.value)}\r\n                            label=\"Currency *\"\r\n                            disabled\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-9\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={amountx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setAmountx(e.target.value)}\r\n                            label=\"Amount *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            value={descripx || \"\"}\r\n                            onKeyUp={handleOnCityKeys}\r\n                            onChange={(e) => setDescripx(e.target.value)}\r\n                            label=\"Description *\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                          <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                            Phone Number *\r\n                          </MDTypography>\r\n                          <PhoneInput\r\n                            value={pnox}\r\n                            inputStyle={{ width: \"100%\" }}\r\n                            buttonStyle={{}}\r\n                            onChange={setPno}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <div>\r\n                      <MonnifyConsumer {...monNey} className=\"btn\">\r\n                        {({ initializePayment }) => (\r\n                          // eslint-disable-next-line react/button-has-type\r\n                          <MDButton\r\n                            variant=\"gradient\"\r\n                            onClick={() => initializePayment()}\r\n                            color=\"info\"\r\n                            width=\"50%\"\r\n                          >\r\n                            Pay\r\n                          </MDButton>\r\n                        )}\r\n                      </MonnifyConsumer>\r\n                    </div>\r\n                  </MDBox>\r\n                </MDBox>\r\n              </MDBox>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={30}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={1}\r\n              mt={2}\r\n              p={2}\r\n              mb={1}\r\n              textAlign=\"left\"\r\n            >\r\n              <MDTypography\r\n                variant=\"h4\"\r\n                fontWeight=\"medium\"\r\n                color=\"white\"\r\n                textAlign=\"center\"\r\n                mt={1}\r\n              >\r\n                Payment History\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox component=\"form\" role=\"form\">\r\n              <MDBox mb={2}>\r\n                <Container>\r\n                  <div align=\"center\">\r\n                    {\" \"}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            Start Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditSDate}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                            onChange={(time) => setAuditSDate(time)}\r\n                          />{\" \"}\r\n                        </MDBox>{\" \"}\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDBox mt={2}>\r\n                          <MDTypography\r\n                            variant=\"button\"\r\n                            fontWeight=\"regular\"\r\n                            fontSize=\"80%\"\r\n                            align=\"left\"\r\n                            color=\"text\"\r\n                          >\r\n                            End Date\r\n                          </MDTypography>\r\n                          <DatePicker\r\n                            placeholderText=\"MM/DD/YY\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                            selected={auditEDate}\r\n                            onChange={(time) => setAuditEDate(time)}\r\n                            peekNextMonth\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            dropdownMode=\"select\"\r\n                          />{\" \"}\r\n                        </MDBox>\r\n                      </div>\r\n                    </div>\r\n                    <MDBox mt={4} mb={1}>\r\n                      <MDButton\r\n                        variant=\"gradient\"\r\n                        onClick={handleClick}\r\n                        color=\"info\"\r\n                        width=\"50%\"\r\n                        align=\"center\"\r\n                      >\r\n                        Add Filters\r\n                      </MDButton>\r\n                    </MDBox>\r\n                  </div>\r\n                </Container>\r\n              </MDBox>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp;\r\n        <MDBox>\r\n          <DataTable\r\n            table={{ columns: pColumns, rows: items }}\r\n            isSorted\r\n            entriesPerPage\r\n            showTotalEntries\r\n            noEndBorder\r\n            canSearch\r\n          />\r\n        </MDBox>\r\n      </Container>\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PaymentHis;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\update\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\clone\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\updatepolls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\updatesystemrole\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\votePolls\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\addpolloptions\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\escalateMatter\\index.js",["1048"],"import { useNavigate } from \"react-router-dom\";\r\nimport GHeaders from \"getHeader\";\r\nimport PHeaders from \"postHeader\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nfunction EscalateMatter() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [userx, setUser] = useState([]);\r\n  const [escalatetox, setEscalateto] = useState();\r\n  const [reasonx, setReason] = useState(\"\");\r\n  //   const [reasonTitle, setReasonTitle] = useState(\"\");\r\n  //   const [enabled, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n          // setEscalateto(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernids = urlParams.get(\"id\");\r\n\r\n    const raw = JSON.stringify({\r\n      concernID: concernids,\r\n      escalateTo: escalatetox,\r\n      reasonForEscalation: reasonx,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/escalate`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          window.location.reload();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  //   const handleOnEscalateKeys = () => {\r\n  //     const letters = /^[a-zA-Z ]+$/;\r\n  //     if (!reasonx.match(letters)) {\r\n  //       setReasonTitle(false);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML =\r\n  //         \"Reason - input only capital and small letters<br>\";\r\n  //     }\r\n  //     if (reasonx.match(letters)) {\r\n  //       setReasonTitle(true);\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"\";\r\n  //     }\r\n  //     if (reasonx.length === 0) {\r\n  //       // eslint-disable-next-line no-unused-expressions\r\n  //       document.getElementById(\"reason\").innerHTML = \"Reason is required<br>\";\r\n  //     }\r\n  //     setEnabled(reasonTitle === true);\r\n  //   };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-2\">&nbsp;</div>\r\n        <div className=\"col-sm-8\" align=\"center\">\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={3}>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"info\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={25}\r\n                  mt={-6}\r\n                  p={3}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                    Escalation\r\n                  </MDTypography>\r\n                </MDBox>\r\n                <MDBox\r\n                  variant=\"gradient\"\r\n                  bgColor=\"error\"\r\n                  borderRadius=\"lg\"\r\n                  coloredShadow=\"success\"\r\n                  mx={3}\r\n                  mt={1}\r\n                  p={1}\r\n                  mb={1}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"reason\">\r\n                    {\" \"}\r\n                  </MDTypography>\r\n                </MDBox>\r\n                {/* <Form> */}\r\n                <Form.Group\r\n                  className=\"mb-3\"\r\n                  controlId=\"setPurposex\"\r\n                  placeholder=\"Description\"\r\n                  value={reasonx || \"\"}\r\n                  onChange={(e) => setReason(e.target.value)}\r\n                >\r\n                  <Form.Label>Reason For Escalation</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows={2} />\r\n                </Form.Group>\r\n                {/* </Form> */}\r\n                {/* <option align=\"center\">Escalate Matter To</option>\r\n                {userx.map((api) => (\r\n                  <div key={api.personal.id} className=\"mb-3\" align=\"left\">\r\n                    <Form.Check.Input\r\n                      type=\"radio\"\r\n                      defaultChecked={api.isCheck}\r\n                      onClick={(e) => handleClick(e, api)}\r\n                      // onChange={setEscalateto}\r\n                    />\r\n                    <Form.Check.Label>\r\n                      &nbsp; {api.personal.fname} {api.personal.lname}\r\n                    </Form.Check.Label>\r\n                  </div>\r\n                ))} */}\r\n                <MDBox mb={2}>\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                    Reason For Escalation\r\n                  </MDTypography>\r\n                  <Form.Select\r\n                    value={escalatetox}\r\n                    onChange={(e) => setEscalateto(e.target.value)}\r\n                    aria-label=\"Default select example\"\r\n                    // onClick={(e) => handleClick(e)}\r\n                  >\r\n                    <option value=\"\">Escalate Matter To</option>\r\n                    {userx.map((api) => (\r\n                      <option key={api.personal.id} value={api.personal.id}>\r\n                        {api.personal.fname} {api.personal.lname}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                  <br />\r\n                </MDBox>\r\n              </MDBox>\r\n              <MDBox mt={4} mb={1}>\r\n                <MDButton\r\n                  variant=\"gradient\"\r\n                  onClick={handleClick}\r\n                  // onKeyUp={handleOnEscalateKeys}\r\n                  // disabled={!enabled}\r\n                  color=\"info\"\r\n                  width=\"50%\"\r\n                  align=\"center\"\r\n                >\r\n                  Add\r\n                </MDButton>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default EscalateMatter;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\view\\index.js",["1049"],"import { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport MDBox from \"components/MDBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nfunction PollsView() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [questionx, setQuestion] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultx) => {\r\n        if (resultx.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (resultx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          if (resultx[0].status === 0 || resultx[0].status === \"0\") {\r\n            MySwal.fire({\r\n              title: \"Poll Not Opened\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `Open Poll To Vote`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          } else if (resultx[0].status === 2 || resultx[0].status === \"2\") {\r\n            MySwal.fire({\r\n              title: \"Poll Closed\",\r\n              icon: \"info\",\r\n              type: \"info\",\r\n              text: `You can't vote on this poll`,\r\n            }).then(() => {\r\n              navigate(\"/dashboard\");\r\n            });\r\n          }\r\n          setQuestion(resultx[0].question);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const pColumns = [\r\n    { Header: \"Poll Options\", accessor: \"response\", align: \"left\" },\r\n    { Header: \"Number Of Votes\", accessor: \"number\", align: \"left\" },\r\n  ];\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox>\r\n        <Card>\r\n          <MDBox pt={4} pb={3} px={3}>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={25}\r\n              mt={-6}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                {questionx}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </Card>\r\n        &nbsp; &nbsp;\r\n        <DataTable\r\n          table={{ columns: pColumns, rows: items }}\r\n          isSorted\r\n          entriesPerPage\r\n          showTotalEntries\r\n          noEndBorder\r\n          canSearch\r\n        />\r\n      </MDBox>\r\n      <Footer />\r\n      {/* <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop> */}\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default PollsView;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\updateannouncement\\index.js",["1050","1051"],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport MDButton from \"components/MDButton\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction UpdateAnnouncement() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [titlex, setTitle] = useState(\"\");\r\n  const [messagex, setMessage] = useState(\"\");\r\n  const [groupidx, setGroupIdx] = useState(\"\");\r\n  const [annoucementTypeIDx, setAnnoucementTypeID] = useState(\"\");\r\n  const [deletex, setDeletex] = useState(\"\");\r\n  const [createbyx, setCreatebyx] = useState(\"\");\r\n  const [createx, setCreatex] = useState(\"\");\r\n  const [idx, setIdx] = useState(\"\");\r\n\r\n  const [allAnnouncementType, setAllAnnouncementType] = useState([]);\r\n\r\n  const [user, setUser] = useState([]);\r\n\r\n  const [checkedTitle, setCheckedTitle] = useState(\"\");\r\n  const [, setEnabled] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/groups/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setUser(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Method to fetch all announcementtype\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcementtype/getAll/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setAllAnnouncementType(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"id\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/getByIds/${ids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // setItems(result);\r\n          setIdx(result[0].announcement.id);\r\n          setTitle(result[0].announcement.title);\r\n          setMessage(result[0].announcement.message);\r\n          setGroupIdx(result[0].announcement.groupID);\r\n          setCreatebyx(result[0].announcement.createdBy);\r\n          setDeletex(result[0].announcement.deleteFlag);\r\n          setCreatex(result[0].announcement.createdTime);\r\n          setAnnoucementTypeID(result[0].announcementType.id);\r\n        }\r\n        console.log(result);\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChangeAnnounceType = (e) => {\r\n    setAnnoucementTypeID(e.target.value);\r\n  };\r\n\r\n  const handleOnTitleKeys = () => {\r\n    const letters = /^[a-zA-Z ('\") ]+$/;\r\n    if (titlex.match(letters)) {\r\n      setCheckedTitle(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"\";\r\n    }\r\n    if (titlex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"title\").innerHTML = \"Title is required<br>\";\r\n    }\r\n    setEnabled(checkedTitle === true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    // const ids = data11.id;\r\n    // const personalIds = data11.id;\r\n    const orgIDs = data11.orgID;\r\n\r\n    const raw = JSON.stringify({\r\n      id: idx,\r\n      title: titlex,\r\n      message: messagex,\r\n      orgID: orgIDs,\r\n      groupID: groupidx,\r\n      announcementTypeID: annoucementTypeIDx,\r\n      createdBy: createbyx,\r\n      createdTime: createx,\r\n      deleteFlag: deletex,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/announcement/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        // setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // setOpened(false);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Update Announcement\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"title\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\" name=\"form1\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Title*\"\r\n                      value={titlex || \"\"}\r\n                      onKeyUp={handleOnTitleKeys}\r\n                      onChange={(e) => setTitle(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-6\">\r\n                    <Form.Group className=\"mb-1\" controlId=\"exampleForm.ControlTextArea\">\r\n                      <Form.Label style={{ fontSize: 14 }}>Message</Form.Label>\r\n                      <Form.Control\r\n                        as=\"textarea\"\r\n                        value={messagex || \"\"}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        label=\"Message\"\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  {/* <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"textarea\"\r\n                      value={messagex || \"\"}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      label=\"Message\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        color=\"text\"\r\n                      >\r\n                        Annoucement Type\r\n                      </MDTypography>\r\n                      <MDBox textAlign=\"right\">\r\n                        <Form.Select\r\n                          value={annoucementTypeIDx || \"\"}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={handleOnChangeAnnounceType}\r\n                        >\r\n                          <option>--Select Announcement Type--</option>\r\n                          {allAnnouncementType.map((apic) => (\r\n                            <option key={apic.id} value={apic.id}>\r\n                              {apic.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                    </MDBox>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDBox mt={2}>\r\n                      <MDTypography\r\n                        variant=\"button\"\r\n                        fontWeight=\"regular\"\r\n                        fontSize=\"80%\"\r\n                        align=\"right\"\r\n                        color=\"text\"\r\n                      >\r\n                        Group\r\n                      </MDTypography>\r\n                      <Form.Select\r\n                        value={groupidx || \"\"}\r\n                        onChange={(e) => setGroupIdx(e.target.value)}\r\n                        aria-label=\"Default select example\"\r\n                      >\r\n                        <option value=\"\">Select Group</option>\r\n                        {user.map((api) => (\r\n                          <option key={api.group.id} value={api.group.id}>\r\n                            {api.group.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                      <br />\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={(e) => handleUpdate(e)}\r\n                // disabled={!enabled}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n              >\r\n                Update\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default UpdateAnnouncement;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forgot-password\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-in\\index.js",["1052"],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\userlogin\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\renewLogin\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\forbiddenPage\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\complete-forgotPassword\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\changepassword\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\renewSubscription\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Configurator\\ConfiguratorRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\sign-up\\index.js",["1053","1054","1055"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// react-router-dom components\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDInput from \"components/MDInput\";\r\nimport MDButton from \"components/MDButton\";\r\nimport AllCountriesAndStates from \"countries-states-master/countries\";\r\n\r\n// Authentication layout components\r\nimport CoverLayout from \"layouts/authentication/components/CoverLayout\";\r\n\r\n// Images\r\nimport bgImage from \"assets/images/bg-sign-up-cover.jpeg\";\r\nimport plutospaceImg from \"assets/images/PlutoSpaceImg.png\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport GHeaders from \"getHeader\";\r\n\r\nfunction Cover() {\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  // Password toggle handler\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n  const [phonex, setPhone] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [checkedPemail, setCheckedPEmail] = useState(\"\");\r\n  const [checkedPass, setCheckedPass] = useState(\"\");\r\n  const [checkedFirst, setCheckedFirst] = useState(\"\");\r\n  const [checkedLast, setCheckedLast] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const { countriesAndStates: AlCountry } = AllCountriesAndStates();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [fnamex, setFname] = useState(\"\");\r\n  const [lnamex, setLname] = useState(\"\");\r\n  const [onamex, setOname] = useState(\"\");\r\n  const [emailx, setEmail] = useState(\"\");\r\n  const [nationalityx, setNationality] = useState(\"\");\r\n  const [residentialStreetx, setResidentialStreet] = useState(\"\");\r\n  const [residentialCityx, setResidentialCity] = useState(\"\");\r\n  const [residentialStatex, setResidentialState] = useState(\"\");\r\n  const [residentialCountryx, setResidentialCountry] = useState(\"\");\r\n  const [maritalStatusx, setMaritalStatus] = useState(\"\");\r\n  const [passwordx, setPassword] = useState(\"\");\r\n  const [retypePasswordx, setRetypePassword] = useState(\"\");\r\n  const [allStates, setAllStates] = useState([]);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  const handleOnChangeRCCountry = (e) => {\r\n    const filteredItems = AlCountry.filter((item) => item.name === e.target.value);\r\n    setAllStates(filteredItems[0].states);\r\n    setResidentialCountry(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeRCState = (e) => {\r\n    setResidentialState(e.target.value);\r\n  };\r\n\r\n  const handleOnChangeNationality = (e) => {\r\n    setNationality(e.target.value);\r\n  };\r\n\r\n  const handleOnFirstKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!fnamex.match(letters)) {\r\n      setCheckedFirst(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML =\r\n        \"First Name - input only capital and small letters<br>\";\r\n    }\r\n    if (fnamex.match(letters)) {\r\n      setCheckedFirst(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"\";\r\n    }\r\n    if (fnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"first\").innerHTML = \"First Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnLastKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!lnamex.match(letters)) {\r\n      setCheckedLast(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML =\r\n        \"Last Name - input only capital and small letters<br>\";\r\n    }\r\n    if (lnamex.match(letters)) {\r\n      setCheckedLast(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"\";\r\n    }\r\n    if (lnamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"last\").innerHTML = \"Last Name is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnOtherKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML =\r\n        \"Other Name - input only capital and small letters<br>\";\r\n    }\r\n    if (onamex.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"\";\r\n    }\r\n    if (onamex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"other\").innerHTML = \"Other Name is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPEmailKeys = () => {\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    if (!emailx.match(letters)) {\r\n      setCheckedPEmail(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email - input a valid email<br>\";\r\n    }\r\n    if (emailx.match(letters)) {\r\n      setCheckedPEmail(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"\";\r\n    }\r\n    if (emailx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"email\").innerHTML = \"Email is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnStreetKeys = () => {\r\n    // eslint-disable-next-line no-invalid-regexp\r\n    const letters = /^[a-zA-Z0-9 ,-]+$/;\r\n    if (!residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street - use only [ - , ] as symbols<br>\";\r\n    }\r\n    if (residentialStreetx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"\";\r\n    }\r\n    if (residentialStreetx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"street\").innerHTML = \"Street is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnCityKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City - input only capital and small letters<br>\";\r\n    }\r\n    if (residentialCityx.match(letters)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"\";\r\n    }\r\n    if (residentialCityx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"city\").innerHTML = \"City is required<br>\";\r\n    }\r\n  };\r\n\r\n  const handleOnPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n      setCheckedPass(false);\r\n    }\r\n    if (passwordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (passwordx.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML = \"Password is required<br>\";\r\n    }\r\n    setEnabled(\r\n      checkedPemail === true &&\r\n        checkedPass === true &&\r\n        checkedFirst === true &&\r\n        checkedLast === true\r\n    );\r\n  };\r\n\r\n  const handleOnRTPasswordKeys = () => {\r\n    const passwordValidate = new RegExp(\"^(?=.*[a-z!@#$%^&*.,])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})\");\r\n    if (!retypePasswordx.match(passwordValidate)) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"password\").innerHTML =\r\n        \"Retype Password - Password must be at least 8 characters, must include a capital letter, small letter, a number and any of these symbol (!@#$%^&*.,)<br>\";\r\n    }\r\n    if (retypePasswordx.match(passwordValidate)) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"\";\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx === passwordx) {\r\n      setCheckedPass(true);\r\n    }\r\n    if (retypePasswordx !== passwordx) {\r\n      setCheckedPass(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"rtPassword\").innerHTML = \"Passwords don't match<br>\";\r\n    }\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    handleOnFirstKeys();\r\n    handleOnLastKeys();\r\n    handleOnOtherKeys();\r\n    handleOnPEmailKeys();\r\n    handleOnStreetKeys();\r\n    handleOnCityKeys();\r\n    handleOnPasswordKeys();\r\n    handleOnRTPasswordKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      const myHeaders = new Headers();\r\n      myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n      let dayx = \"\";\r\n      let monthx = \"\";\r\n      let yearx = \"\";\r\n      if (startDate != null) {\r\n        dayx = startDate.getDate();\r\n        monthx = startDate.getMonth() + 1;\r\n        yearx = startDate.getFullYear();\r\n      }\r\n      e.preventDefault();\r\n      const raw = JSON.stringify({\r\n        fname: fnamex,\r\n        lname: lnamex,\r\n        oname: onamex,\r\n        email: emailx,\r\n        pno: phonex,\r\n        nationality: nationalityx,\r\n        residentialStreet: residentialStreetx,\r\n        residentialCity: residentialCityx,\r\n        residentialState: residentialStatex,\r\n        residentialCountry: residentialCountryx,\r\n        dayOfBirth: dayx,\r\n        monthOfBirth: monthx,\r\n        yearOfBirth: yearx,\r\n        maritalStatus: maritalStatusx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      // localStorage.setItem(\"pass1\", passwordx);\r\n\r\n      if (passwordx === retypePasswordx) {\r\n        fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/add`, requestOptions)\r\n          .then((res) => res.json())\r\n          .then((result) => {\r\n            setOpened(false);\r\n            if (result.status === \"SUCCESS\") {\r\n              MySwal.fire({\r\n                title: result.status,\r\n                type: \"success\",\r\n                text: result.message,\r\n              }).then(() => {\r\n                const raw2 = JSON.stringify({\r\n                  empID: result.data.id,\r\n                  username: result.data.email,\r\n                  password: passwordx,\r\n                });\r\n                const requestOptions2 = {\r\n                  method: \"POST\",\r\n                  headers: myHeaders,\r\n                  body: raw2,\r\n                  redirect: \"follow\",\r\n                };\r\n                fetch(`${process.env.REACT_APP_ZAVE_URL}/individualLogin/add`, requestOptions2)\r\n                  .then((res) => res.json())\r\n                  .then((resultIL) => {\r\n                    MySwal.fire({\r\n                      title: resultIL.status,\r\n                      type: \"success\",\r\n                      text: resultIL.message,\r\n                    }).then(() => {\r\n                      localStorage.setItem(\"user\", JSON.stringify(result.data));\r\n                      navigate(\"/authentication/sign-in\", { replace: true });\r\n                    });\r\n                  });\r\n              });\r\n            } else {\r\n              MySwal.fire({\r\n                title: result.status,\r\n                type: \"error\",\r\n                text: result.message,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            setOpened(false);\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPersonalInformation = (e) => {\r\n    const headers = miHeaders;\r\n    setEmail(e.target.value);\r\n    const letters = new RegExp(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+.[a-zA-Z]$\");\r\n    const emailpersonal = e.target.value;\r\n    if (emailpersonal.length === 0 || !emailpersonal.match(letters)) {\r\n      // Email Invalid\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/getByEmail/teptvv@gmail.com`, { headers })\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          console.log(result);\r\n          if (result.id !== null) {\r\n            console.log(result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CoverLayout image={bgImage}>\r\n      <Card>\r\n        <MDBox\r\n          variant=\"gradient\"\r\n          bgColor=\"info\"\r\n          borderRadius=\"lg\"\r\n          coloredShadow=\"success\"\r\n          mx={2}\r\n          mt={-3}\r\n          p={3}\r\n          mb={1}\r\n          textAlign=\"center\"\r\n        >\r\n          <MDBox component=\"img\" src={plutospaceImg} alt=\"PlutoSpace\" width=\"10rem\" />\r\n          <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n            Create an Account\r\n          </MDTypography>\r\n        </MDBox>\r\n        <MDBox pt={4} pb={3} px={3}>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                BASIC INFO\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"first\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"last\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"other\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"email\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"phone\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"First Name\"\r\n                      value={fnamex || \"\"}\r\n                      onKeyUp={handleOnFirstKeys}\r\n                      onChange={(e) => setFname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Last Name\"\r\n                      value={lnamex || \"\"}\r\n                      onKeyUp={handleOnLastKeys}\r\n                      onChange={(e) => setLname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Other Name\"\r\n                      value={onamex || \"\"}\r\n                      onKeyUp={handleOnOtherKeys}\r\n                      onChange={(e) => setOname(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type=\"email\"\r\n                      label=\"Personal Email\"\r\n                      value={emailx || \"\"}\r\n                      onKeyUp={handleOnPEmailKeys}\r\n                      onChange={getPersonalInformation}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Phone Number\r\n                    </MDTypography>\r\n                    <PhoneInput\r\n                      value={phonex}\r\n                      inputStyle={{ width: \"150%\" }}\r\n                      buttonStyle={{}}\r\n                      onChange={setPhone}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-8\">\r\n                  <MDBox mb={2}>\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\">\r\n                      Marital Status\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      onChange={(e) => setMaritalStatus(e.target.value)}\r\n                      value={maritalStatusx || \"\"}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option>---Marital Status---</option>\r\n                      <option value=\"Single\">Single</option>\r\n                      <option value=\"Married\">Married</option>\r\n                      <option value=\"Divorced\">Divorced</option>\r\n                    </Form.Select>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={1}>\r\n                    Date Of Birth\r\n                  </MDTypography>\r\n                  <MDBox mb={4} mt={-1}>\r\n                    <div>\r\n                      <style>\r\n                        {`.date-picker input {\r\n                      width: 50%\r\n                 }`}\r\n                      </style>\r\n                      <DatePicker\r\n                        date={startDate}\r\n                        wrapperClassName=\"date-picker\"\r\n                        placeholder=\"Select Birth Date\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        confirmBtnText=\"Confirm\"\r\n                        showCancelButton=\"true\"\r\n                        customStyles={{\r\n                          placeholderText: {\r\n                            fontSize: 5,\r\n                          },\r\n                          dateIcon: {\r\n                            height: 0,\r\n                            width: 0,\r\n                          },\r\n                          dateText: {\r\n                            color: \"#b3b4b5\",\r\n                            fontSize: 16,\r\n                          },\r\n                          dateInput: {\r\n                            borderWidth: 0,\r\n                          },\r\n                        }}\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        peekNextMonth\r\n                        showMonthDropdown\r\n                        showYearDropdown\r\n                        dropdownMode=\"select\"\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                ADDRESS\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"street\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"city\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={3}>\r\n                      Nationality\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={nationalityx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeNationality}\r\n                      >\r\n                        <option>--Select Nationality--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Street\"\r\n                      value={residentialStreetx || \"\"}\r\n                      onKeyUp={handleOnStreetKeys}\r\n                      onChange={(e) => setResidentialStreet(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-4\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"City\"\r\n                      value={residentialCityx || \"\"}\r\n                      onKeyUp={handleOnCityKeys}\r\n                      onChange={(e) => setResidentialCity(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      Country\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialCountryx || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCCountry}\r\n                      >\r\n                        <option>--Select Country--</option>\r\n                        {AlCountry.map((apic) => (\r\n                          <option key={apic.code3} value={apic.name}>\r\n                            {apic.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-8\">\r\n                    <MDTypography variant=\"button\" fontWeight=\"regular\" color=\"text\" mt={2}>\r\n                      State\r\n                    </MDTypography>\r\n                    <MDBox textAlign=\"right\">\r\n                      <Form.Select\r\n                        value={residentialStatex || \"\"}\r\n                        aria-label=\"Default select example\"\r\n                        onChange={handleOnChangeRCState}\r\n                      >\r\n                        <option>--Select State--</option>\r\n                        {allStates.map((apis) => (\r\n                          <option key={apis.code} value={apis.name}>\r\n                            {apis.name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Select>\r\n                    </MDBox>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"info\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={0}\r\n              mt={0}\r\n              p={3}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"h6\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                PASSWORD\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox\r\n              variant=\"gradient\"\r\n              bgColor=\"error\"\r\n              borderRadius=\"lg\"\r\n              coloredShadow=\"success\"\r\n              mx={3}\r\n              mt={1}\r\n              p={1}\r\n              mb={1}\r\n              textAlign=\"center\"\r\n            >\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"password\">\r\n                {\" \"}\r\n              </MDTypography>\r\n              <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"rtPassword\">\r\n                {\" \"}\r\n              </MDTypography>\r\n            </MDBox>\r\n            <Container>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <MDBox mb={2}>\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Password\"\r\n                      value={passwordx || \"\"}\r\n                      onKeyUp={handleOnPasswordKeys}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </MDBox>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12\">\r\n                    <MDInput\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      label=\"Retype Password\"\r\n                      value={retypePasswordx || \"\"}\r\n                      onKeyUp={handleOnRTPasswordKeys}\r\n                      onChange={(e) => setRetypePassword(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <MDTypography\r\n                    variant=\"button\"\r\n                    fontSize=\"60%\"\r\n                    align=\"right\"\r\n                    onClick={togglePassword}\r\n                    mx={0}\r\n                    color=\"info\"\r\n                  >\r\n                    show password\r\n                  </MDTypography>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox display=\"flex\" alignItems=\"center\" ml={-1}>\r\n              <Checkbox />\r\n              <MDTypography\r\n                variant=\"button\"\r\n                fontWeight=\"regular\"\r\n                color=\"text\"\r\n                sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n              >\r\n                &nbsp;&nbsp;I agree the&nbsp;\r\n              </MDTypography>\r\n              <MDTypography\r\n                component=\"a\"\r\n                href=\"#\"\r\n                variant=\"button\"\r\n                fontWeight=\"bold\"\r\n                color=\"info\"\r\n                textGradient\r\n              >\r\n                Terms and Conditions\r\n              </MDTypography>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton variant=\"gradient\" onClick={handleClick} color=\"info\" fullWidth>\r\n                Create Account\r\n              </MDButton>\r\n            </MDBox>\r\n            <MDBox mt={3} mb={1} textAlign=\"center\">\r\n              <MDTypography variant=\"button\" color=\"text\">\r\n                Already have an account?{\" \"}\r\n                <MDTypography\r\n                  component={Link}\r\n                  to=\"/authentication/sign-in\"\r\n                  variant=\"button\"\r\n                  color=\"info\"\r\n                  fontWeight=\"medium\"\r\n                  textGradient\r\n                >\r\n                  Sign In\r\n                </MDTypography>\r\n              </MDTypography>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </CoverLayout>\r\n  );\r\n}\r\n\r\nexport default Cover;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDBox\\MDBoxRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\viewMatter\\chats.js",["1056"],"import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// import Footer from \"examples/Footer\";\r\n// import DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\n// import DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\n// import MDBox from \"components/MDBox\";\r\n// import Card from \"@mui/material/Card\";\r\n// import MDButton from \"components/MDButton\";\r\n\r\n// import { Container } from \"react-bootstrap\";\r\n// import Emojis from \"./emoji\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction Chat({ socket, username, room }) {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const { emoticons: allEmojis } = Emojis();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const [titlex, setTitlex] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const messageMap = [];\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const concernID = urlParams.get(\"room\");\r\n\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/getForConcern/${concernID}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          // eslint-disable-next-line array-callback-return\r\n          result.map((item) => {\r\n            const fdy = {\r\n              id: item.id,\r\n              room: concernID,\r\n              author: item.senderName,\r\n              message: item.message,\r\n              time: `${new Date(item.createdTime).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n            };\r\n            messageMap.push(fdy);\r\n          });\r\n          setMessageList(messageMap);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        id: messageList.length + 1,\r\n        room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time: `${new Date(Date.now()).getHours()}:${new Date(Date.now()).getMinutes()}`,\r\n      };\r\n\r\n      // eslint-disable-next-line react/prop-types\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      const orgIDs = data11.orgID;\r\n      const personalIDs = data11.personalID;\r\n\r\n      const raw = JSON.stringify({\r\n        orgID: orgIDs,\r\n        concernID: room,\r\n        message: currentMessage,\r\n        senderID: personalIDs,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      fetch(`${process.env.REACT_APP_SHASHA_URL}/concernChat/save`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const ids = urlParams.get(\"room\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/concern/getByIds/${ids}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setTitlex(result[0].title);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    // eslint-disable-next-line react/prop-types\r\n    socket.on(\"receive_message\", (data) => {\r\n      if (isMounted) {\r\n        setMessageList((list) => [...list, data]);\r\n        console.log(data);\r\n      }\r\n    });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-header\">\r\n          <div\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              width: \"30rem\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            <p>{titlex}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-body\">\r\n          <ScrollToBottom className=\"message-container\">\r\n            {messageList.map((messageContent) => (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"other\" : \"you\"}\r\n                key={messageContent.id}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ScrollToBottom>\r\n        </div>\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={currentMessage}\r\n            placeholder=\"Type Message...\"\r\n            onChange={(event) => {\r\n              setCurrentMessage(event.target.value);\r\n            }}\r\n            onKeyPress={(event) => {\r\n              // eslint-disable-next-line no-unused-expressions\r\n              event.key === \"Enter\" && sendMessage();\r\n            }}\r\n          />\r\n          <button type=\"button\" onClick={sendMessage}>\r\n            send\r\n          </button>\r\n        </div>\r\n        {/* <ScrollToBottom className=\"emoji-container\">\r\n          <Container>\r\n            <div className=\"row\">\r\n              {allEmojis.map((apis) => (\r\n                <div key={apis.emoji} value={apis.emoji} className=\"col-sm-1\">\r\n                  <button type=\"button\">{apis.emoji}</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Container>\r\n        </ScrollToBottom> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogActions.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogActions.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\getHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\postHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\mattersArising\\data\\mattersArising.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcement\\data\\announcement.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\pxToRem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\pxToRem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\DashboardLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Footer\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Navbars\\DashboardNavbar\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDButton\\MDButtonRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableBodyCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Tables\\DataTable\\DataTableHeadCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDTypography\\MDTypographyRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDInput\\MDInputRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\typography.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Breadcrumbs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Items\\NotificationItem\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDPagination\\MDPaginationItemRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\colors.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\countries-states-master\\countries.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\announcementtype\\data\\announcementtype.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\CoverLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\LayoutContainers\\PageLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\authentication\\components\\BasicLayout\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\free-days\\free-days-list\\freeDaysList.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\userTimeOffType\\data\\userTOTTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\userManagement\\data\\userTableData.js",["1057","1058","1059"],"/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\n\r\nexport default function UserData() {\r\n  const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/user/getAllUserInfo/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDisable = (pIDVal) => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personalcompany/getByPersonalID/${orgIDs}/${pIDVal}`)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resultPC) => {\r\n        if (resultPC.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        if (resultPC.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        MySwal.fire({\r\n          title: \"Reason For Delete\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          html: `<div align=\"center\"><select id=\"reasonForDelete\" class=\"form-control\" aria-label=\"Default select example\" style=\"width:auto;\">\r\n          <option value=\"\">---Reason For Delete---</option>\r\n          <option value=\"Retired\">Retired</option>\r\n          <option value=\"Late\">Late</option>\r\n          <option value=\"Resigned\">Resigned</option>\r\n          <option value=\"Sacked\">Sacked</option>\r\n        </select></div>`,\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\",\r\n        }).then((resultD) => {\r\n          if (resultD.isConfirmed) {\r\n            const modalValue = document.getElementById(\"reasonForDelete\").value;\r\n            const requestOptions = {\r\n              method: \"DELETE\",\r\n              headers: miHeaders,\r\n            };\r\n            fetch(\r\n              `${process.env.REACT_APP_ZAVE_URL}/personalcompany/delete/${resultPC.id}/${modalValue}`,\r\n              requestOptions\r\n            )\r\n              .then(async (res) => {\r\n                const aToken = res.headers.get(\"token-1\");\r\n                localStorage.setItem(\"rexxdex\", aToken);\r\n                return res.json();\r\n              })\r\n              .then((resx) => {\r\n                if (resx.message === \"Expired Access\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Token Does Not Exist\") {\r\n                  navigate(\"/authentication/sign-in\");\r\n                }\r\n                if (resx.message === \"Unauthorized Access\") {\r\n                  navigate(\"/authentication/forbiddenPage\");\r\n                }\r\n                MySwal.fire({\r\n                  title: resx.status,\r\n                  type: \"success\",\r\n                  text: resx.message,\r\n                }).then(() => {\r\n                  window.location.reload();\r\n                });\r\n              })\r\n              .catch((error) => {\r\n                MySwal.fire({\r\n                  title: error.status,\r\n                  type: \"error\",\r\n                  text: error.message,\r\n                });\r\n              });\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleView = (value) => {\r\n    navigate(`/user-Management/view-User?id=${value}`);\r\n  };\r\n  const handleAddTOT = (value) => {\r\n    navigate(`/user-Management/user-TimeOff-Type?id=${value}`);\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  const handlePasswordReset = (value) => {\r\n    const headers = miHeaders;\r\n    console.log(value);\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/personal/get/${value}`, { headers })\r\n      .then((res) => res.json())\r\n      .then((resultp) => {\r\n        const raw = JSON.stringify({\r\n          username: resultp[0].email,\r\n        });\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: \"follow\",\r\n        };\r\n        console.log(resultp);\r\n        if (resultp.length > 0) {\r\n          fetch(`${process.env.REACT_APP_ZAVE_URL}/login/resetpassword/`, requestOptions)\r\n            .then(async (res) => {\r\n              const aToken = res.headers.get(\"token-1\");\r\n              localStorage.setItem(\"rexxdex\", aToken);\r\n              return res.json();\r\n            })\r\n            .then((resx) => {\r\n              if (resx.message === \"Expired Access\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Token Does Not Exist\") {\r\n                navigate(\"/authentication/sign-in\");\r\n              }\r\n              if (resx.message === \"Unauthorized Access\") {\r\n                navigate(\"/authentication/forbiddenPage\");\r\n              }\r\n              MySwal.fire({\r\n                title: resx.status,\r\n                type: \"success\",\r\n                text: resx.message,\r\n              }).then(() => {\r\n                window.location.reload();\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              MySwal.fire({\r\n                title: error.status,\r\n                type: \"error\",\r\n                text: error.message,\r\n              });\r\n            });\r\n        } else {\r\n          MySwal.fire({\r\n            title: \"NOT_FOUND\",\r\n            type: \"error\",\r\n            text: \"User Not Found\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n  // const handleAddsalary = (value) => {\r\n  //   navigate(`/user-Management/user-Salary`(value));\r\n  // };\r\n\r\n  const handleAddsalary = (value) => {\r\n    navigate(`/user-Management/user-Salary?id=${value}`);\r\n  };\r\n\r\n  const handleUpdateSystemRole = (value) => {\r\n    navigate(`/update-system-role?id=${value}`);\r\n  };\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"First Name\", accessor: \"personal.fname\", align: \"left\" },\r\n      { Header: \"Last Name\", accessor: \"personal.lname\", align: \"left\" },\r\n      { Header: \"Email\", accessor: \"personal.email\", align: \"left\" },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"personal.createdTime\",\r\n        Cell: ({ cell: { value } }) => changeDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Actions\",\r\n        accessor: \"personal.id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#dadada\",\r\n                borderRadius: \"2px\",\r\n              }}\r\n            >\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                  <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => handleView(value)}>\r\n                    View/Add Office Details\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddTOT(value)}>\r\n                    Add Time-Off Type\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleAddsalary(value)}>User Salary</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleUpdateSystemRole(value)}>\r\n                    Change User&apos;s System Role\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handlePasswordReset(value)}>\r\n                    Reset Password\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\polls\\data\\pollsTable.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\imgHeader.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\groups\\data\\gRoup.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\bonusdeduction\\data\\bonusDeduction.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\nigeria.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\systemRoles\\data\\systemRolesTables.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\departments\\data\\departmentTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\SidenavCollapse.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\position\\data\\positiontable.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\branches\\data\\BranchTableData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\link.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\container.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\icon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\buttonBase.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\svgIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\popover.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\autocomplete.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\checkbox.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\radio.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\formControlLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\select.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\step.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\stepConnector.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\appBar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\tab.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\avatar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\slider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tooltip.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\breadcrumbs.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\linearProgress.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\switchButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\divider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputOutlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\inputLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\textField.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\menuItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\form\\input.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\iconButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableContainer.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\table\\tableHead.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\cardMedia.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Cards\\StatisticsCards\\ComplexStatisticsCard\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\sidenav.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\dialog\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\listItemText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\linearGradient.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\rgba.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\boxShadow.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\functions\\hexToRgb.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\borders.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\boxShadows.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\typography.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\globals.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\breakpoints.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\base\\colors.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\stepper\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\tabs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContentText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\link.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\svgIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\dialogTitle.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\icon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\buttonBase.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\popover.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\container.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\menu\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\autocomplete.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\checkbox.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\radio.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\list\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\card\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Sidenav\\styles\\sidenavCollapse.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\dialog\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\borders.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\boxShadows.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\breakpoints.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\text.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\contained.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\root.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme-dark\\components\\button\\outlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\linearGradient.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\formControlLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\appBar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\avatar.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\select.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\breadcrumbs.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tooltip.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\linearProgress.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\divider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\slider.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\textField.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\switchButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\input.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\form\\inputOutlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\iconButton.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepIcon.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepLabel.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\step.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\stepConnector.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\menuItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardMedia.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\cardContent.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\tab.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItemText.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\listItem.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\sidenav.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableCell.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableContainer.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\table\\tableHead.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\rgba.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\stepper\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\menu\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\card\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\tabs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\list\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\boxShadow.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\functions\\hexToRgb.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\base\\globals.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\root.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\text.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\outlined.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\assets\\theme\\components\\button\\contained.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsLineChartData.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\data\\reportsBarChartData.js",["1060","1061"],"/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.0.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\nimport { useEffect, useState } from \"react\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ReportsPollData() {\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  const navigate = useNavigate();\r\n  const [resultx, setResult] = useState(\"\");\r\n  console.log(resultx);\r\n\r\n  useEffect(() => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const pollids = urlParams.get(\"id\");\r\n\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_KUBU_URL}/poll/getResults/${orgIDs}/${pollids}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setResult(result);\r\n          console.log(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\r\n    datasets: { label: \"Sales\", data: [50, 20, 10, 22, 50, 10, 40] },\r\n  };\r\n}\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\OrdersOverview\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\dashboard\\components\\Projects\\data\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\LineCharts\\ReportsLineChart\\configs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Charts\\BarCharts\\ReportsBarChart\\configs\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\TimelineItem\\styles.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\examples\\Timeline\\context\\index.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDAvatar\\MDAvatarRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\components\\MDProgress\\MDProgressRoot.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\skills\\index.js",["1062","1063","1064","1065"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Skills() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [showLists, setShowLists] = useState(false);\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        console.log(result);\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        }\r\n        // } else {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({ empID: personalIDs, name: namex, descrip: descripx });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n      console.log(raw);\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      descrip: udescripx,\r\n      empID: uempID,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/skills/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUEmpID(filteredItems[0].empID);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"info\"\r\n            mx={2}\r\n            mt={-3}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n              Add Skill\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      label=\"Name *\"\r\n                      value={namex || \"\"}\r\n                      onKeyUp={handleOnNameKeys}\r\n                      className=\"form-control\"\r\n                      onChange={(e) => setName(e.target.value)}\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <MDInput\r\n                      type=\"text\"\r\n                      value={descripx || \"\"}\r\n                      onChange={(e) => setDescrip(e.target.value)}\r\n                      label=\"Description\"\r\n                      variant=\"standard\"\r\n                      fullWidth\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n            <MDBox mt={4} mb={1}>\r\n              <MDButton\r\n                variant=\"gradient\"\r\n                onClick={handleClick}\r\n                color=\"info\"\r\n                width=\"50%\"\r\n                align=\"left\"\r\n              >\r\n                Save\r\n              </MDButton>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Card style={{ backgroundColor: \"white\" }}>\r\n                &nbsp;\r\n                {/* <div\r\n                  className=\"scrollbar scrollbar-primary mt-2 mx-auto\"\r\n                  style={scrollContainerStyle}\r\n                > */}\r\n                <Container>\r\n                  <div className=\"row\">\r\n                    {allApp.map((item) => (\r\n                      <Grid item xs={3} md={3} lg={3} key={item.id}>\r\n                        <Card>\r\n                          <CardContent>\r\n                            <MDTypography\r\n                              variant=\"h5\"\r\n                              fontWeight=\"medium\"\r\n                              fontSize=\"120%\"\r\n                              color=\"info\"\r\n                              textAlign=\"left\"\r\n                              mt={1}\r\n                              mb={-3.5}\r\n                            >\r\n                              {item.name}\r\n                            </MDTypography>\r\n                          </CardContent>\r\n                          <CardActions>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleDeleteSK(item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  delete\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                            <div align=\"right\">\r\n                              <MDButton\r\n                                variant=\"gradient\"\r\n                                color=\"white\"\r\n                                onClick={() => handleShow(allApp, item.id)}\r\n                                width=\"50%\"\r\n                                mt={-1}\r\n                              >\r\n                                <Icon\r\n                                  fontSize=\"medium\"\r\n                                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                  color=\"error\"\r\n                                >\r\n                                  edit\r\n                                </Icon>\r\n                              </MDButton>\r\n                            </div>\r\n                          </CardActions>\r\n                        </Card>\r\n                        &nbsp;\r\n                      </Grid>\r\n                    ))}\r\n                  </div>\r\n                </Container>\r\n                {/* </div> */}\r\n                &nbsp;\r\n                <br />\r\n              </Card>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Added Skill\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={30}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n                mx={2}\r\n                mt={-3}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" mt={1}>\r\n                  Update Skill\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          label=\"Name *\"\r\n                          value={unamex || \"\"}\r\n                          onKeyUp={handleOnNameKeys}\r\n                          className=\"form-control\"\r\n                          onChange={(e) => setUName(e.target.value)}\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-sm-6\">\r\n                        <MDInput\r\n                          type=\"text\"\r\n                          value={udescripx || \"\"}\r\n                          onChange={(e) => setUDescrip(e.target.value)}\r\n                          label=\"Description\"\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n                <MDBox mt={4} mb={1}>\r\n                  <MDButton\r\n                    variant=\"gradient\"\r\n                    onClick={handleUpdate}\r\n                    color=\"info\"\r\n                    width=\"50%\"\r\n                    align=\"left\"\r\n                  >\r\n                    Save\r\n                  </MDButton>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Skills;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\index.js",["1066","1067","1068"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AllDegrees from \"./degree\";\r\nimport AllCourses from \"./courses\";\r\n\r\nfunction Education() {\r\n  const MySwal = withReactContent(Swal);\r\n  const { allCourses: AlCourses } = AllCourses();\r\n  const { allDegrees: AlDegrees } = AllDegrees();\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [specializationx, setSpecialization] = useState(\"\");\r\n  const [gradex, setGrades] = useState(\"\");\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [udegreex, setUDegreex] = useState(\"\");\r\n  const [uspecializationx, setUSpecialization] = useState(\"\");\r\n  const [ugradex, setUGrades] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [degreex, setDegreex] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const changeDateandTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    let dayx = \"\";\r\n    let monthx = \"\";\r\n    let yearx = \"\";\r\n    if (startDate !== null) {\r\n      dayx = date.getDate();\r\n      monthx = date.getMonth() + 1;\r\n      yearx = date.getFullYear();\r\n    }\r\n    return `${yearx}/${monthx}/${dayx}`;\r\n  };\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      //   fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        } else {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    const startCDate = new Date(startDate).getTime();\r\n    const endCDate = new Date(endDate).getTime();\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        startTime: startCDate,\r\n        endTime: endCDate,\r\n        degree: degreex,\r\n        specialization: specializationx,\r\n        grade: gradex,\r\n      });\r\n      console.log(raw);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/education/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setSpecialization(\"\");\r\n            setGrades(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n            setDegreex(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      degree: udegreex,\r\n      specialization: uspecializationx,\r\n      grade: ugradex,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/education/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDegreex(filteredItems[0].degree);\r\n    setUSpecialization(filteredItems[0].specialization);\r\n    setUGrades(filteredItems[0].grade);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Education\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" School's Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Degree\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      value={degreex}\r\n                      onChange={(e) => setDegreex(e.target.value)}\r\n                      aria-label=\"Default select example\"\r\n                    >\r\n                      <option value=\"\">--Select Degree--</option>\r\n                      {AlDegrees.map((api) => (\r\n                        <option key={api.id} value={api.value}>\r\n                          {api.name}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                    <br />\r\n                  </MDBox>\r\n                  <MDBox mt={-1}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Specialization\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      aria-label=\"Default select example\"\r\n                      value={specializationx}\r\n                      onChange={(e) => setSpecialization(e.target.value)}\r\n                    >\r\n                      <option>--Select Specialization--</option>\r\n                      {AlCourses.map((api) => (\r\n                        <option key={api.name} value={api.name}>\r\n                          {api.name}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Select>\r\n                  </MDBox>\r\n                  <MDBox mt={2}>\r\n                    <MDTypography\r\n                      variant=\"button\"\r\n                      fontWeight=\"regular\"\r\n                      fontSize=\"80%\"\r\n                      align=\"left\"\r\n                      color=\"text\"\r\n                    >\r\n                      Grade\r\n                    </MDTypography>\r\n                    <Form.Select\r\n                      aria-label=\"Default select example\"\r\n                      value={gradex}\r\n                      onChange={(e) => setGrades(e.target.value)}\r\n                    >\r\n                      <option>--Select Grade--</option>\r\n                      <option value=\"First class\">First class</option>\r\n                      <option value=\"Second class upper\">Second class upper</option>\r\n                      <option value=\"Second class lower\">Second class lower</option>\r\n                      <option value=\"Third class\">Third class</option>\r\n                    </Form.Select>\r\n                  </MDBox>{\" \"}\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.specialization}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Degree: {item.degree}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Grade: {item.grade}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            From {changeDateandTime(item.startTime)} to{\" \"}\r\n                            {changeDateandTime(item.endTime)}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Added Education\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={30}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Add Education\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" School's Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Degree\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          value={udegreex}\r\n                          onChange={(e) => setUDegreex(e.target.value)}\r\n                          aria-label=\"Default select example\"\r\n                        >\r\n                          <option value=\"\">--Select Degree--</option>\r\n                          {AlDegrees.map((api) => (\r\n                            <option key={api.id} value={api.value}>\r\n                              {api.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                        <br />\r\n                      </MDBox>\r\n                      <MDBox mt={-1}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Specialization\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          value={uspecializationx}\r\n                          onChange={(e) => setUSpecialization(e.target.value)}\r\n                        >\r\n                          <option>--Select Specialization--</option>\r\n                          {AlCourses.map((api) => (\r\n                            <option key={api.name} value={api.name}>\r\n                              {api.name}\r\n                            </option>\r\n                          ))}\r\n                        </Form.Select>\r\n                      </MDBox>\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Grade\r\n                        </MDTypography>\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          value={ugradex}\r\n                          onChange={(e) => setUGrades(e.target.value)}\r\n                        >\r\n                          <option>--Select Grade--</option>\r\n                          <option value=\"First class\">First class</option>\r\n                          <option value=\"Second class upper\">Second class upper</option>\r\n                          <option value=\"Second class lower\">Second class lower</option>\r\n                          <option value=\"Third class\">Third class</option>\r\n                        </Form.Select>\r\n                      </MDBox>{\" \"}\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default Education;\r\n","C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\courses.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\education\\degree.js",[],"C:\\Users\\HP\\PlutospaceMono\\src\\layouts\\workHistory\\index.js",["1069","1070"],"import React, { useState, useEffect } from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDInput from \"components/MDInput\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport MDButton from \"components/MDButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction WorkHistory() {\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  const [namex, setName] = useState(\"\");\r\n  const [descripx, setDescrip] = useState(\"\");\r\n  const [positionx, setPosition] = useState(\"\");\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [checkedName, setCheckedName] = useState(\"\");\r\n\r\n  const [allApp, setAllApp] = useState([]);\r\n\r\n  const [uidx, setUID] = useState(\"\");\r\n  const [unamex, setUName] = useState(\"\");\r\n  const [uempID, setUEmpID] = useState(\"\");\r\n  const [ustartDate, setUStartDate] = useState(\"\");\r\n  const [uendDate, setUEndDate] = useState(\"\");\r\n  const [udescripx, setUDescrip] = useState(\"\");\r\n  const [upositionx, setUPosition] = useState(\"\");\r\n  const [udeleteFlag, setUDeleteFlag] = useState(\"\");\r\n  const [ucreatedTime, setUCreatedTime] = useState(\"\");\r\n  const [showLists, setShowLists] = useState(false);\r\n\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [uopened, setUOpened] = useState(false);\r\n\r\n  const [opened, setOpened] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n\r\n  const handleGets = () => {\r\n    const headers = miHeaders;\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n    const personalIDs = data11.id;\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/getForEmployee/${personalIDs}`, {\r\n      headers,\r\n    })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (result.length > 0) {\r\n          setShowLists(true);\r\n        }\r\n        setAllApp(result);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (isMounted) {\r\n      // fetches the table data\r\n      handleGets();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleDeleteSK = (val) => {\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: miHeaders,\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/delete/${val}`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((resx) => {\r\n        // if (resx.message === \"Expired Access\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        // if (resx.message === \"Token Does Not Exist\") {\r\n        //   navigate(\"/authentication/sign-in\");\r\n        // }\r\n        if (resx.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n        } else {\r\n          navigate(\"/authentication/sign-in\");\r\n        }\r\n        MySwal.fire({\r\n          title: resx.status,\r\n          type: \"success\",\r\n          text: resx.message,\r\n        }).then(() => {\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleOnNameKeys = () => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (!namex.match(letters)) {\r\n      setCheckedName(false);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name - input only capital and small letters<br>\";\r\n    }\r\n    if (namex.match(letters)) {\r\n      setCheckedName(true);\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"\";\r\n    }\r\n    if (namex.length === 0) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      document.getElementById(\"name\").innerHTML = \"Name is required<br>\";\r\n    }\r\n    setEnabled(checkedName === true);\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleClick = (e) => {\r\n    handleOnNameKeys();\r\n    if (enabled) {\r\n      setOpened(true);\r\n      e.preventDefault();\r\n      const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n      console.log(data11);\r\n      const personalIDs = data11.id;\r\n      const raw = JSON.stringify({\r\n        empID: personalIDs,\r\n        name: namex,\r\n        descrip: descripx,\r\n        startTime: startDate,\r\n        endTime: startDate,\r\n        position: positionx,\r\n      });\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/add`, requestOptions)\r\n        .then(async (res) => {\r\n          const aToken = res.headers.get(\"token-1\");\r\n          localStorage.setItem(\"rexxdex\", aToken);\r\n          return res.json();\r\n        })\r\n        .then((result) => {\r\n          setOpened(false);\r\n          if (result.message === \"Expired Access\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Token Does Not Exist\") {\r\n            navigate(\"/authentication/sign-in\");\r\n            window.location.reload();\r\n          }\r\n          if (result.message === \"Unauthorized Access\") {\r\n            navigate(\"/authentication/forbiddenPage\");\r\n            window.location.reload();\r\n          }\r\n          MySwal.fire({\r\n            title: result.status,\r\n            type: \"success\",\r\n            text: result.message,\r\n          }).then(() => {\r\n            handleGets();\r\n            setName(\"\");\r\n            setDescrip(\"\");\r\n            setPosition(\"\");\r\n            setStartDate(\"\");\r\n            setEndDate(\"\");\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setOpened(false);\r\n          MySwal.fire({\r\n            title: error.status,\r\n            type: \"error\",\r\n            text: error.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setOpened(true);\r\n    const startCDate = new Date(ustartDate).getTime();\r\n    const endCDate = new Date(uendDate).getTime();\r\n    const raw = JSON.stringify({\r\n      id: uidx,\r\n      name: unamex,\r\n      empID: uempID,\r\n      startTime: startCDate,\r\n      endTime: endCDate,\r\n      descrip: udescripx,\r\n      position: upositionx,\r\n      deleteFlag: udeleteFlag,\r\n      createdTime: ucreatedTime,\r\n    });\r\n    console.log(raw);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_ZAVE_URL}/workHistory/update`, requestOptions)\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        setOpened(false);\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        setUOpened(false);\r\n        setShowUpdate(false);\r\n        handleGets();\r\n        MySwal.fire({\r\n          title: result.status,\r\n          type: \"success\",\r\n          text: result.message,\r\n        }).then(() => {\r\n          setUOpened(false);\r\n          setShowUpdate(false);\r\n          handleGets();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setOpened(true);\r\n        MySwal.fire({\r\n          title: error.status,\r\n          type: \"error\",\r\n          text: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Method to filter departments\r\n  const handleShow = (filteredData, value) => {\r\n    // \"endTime\":\"2003-07-10T23:00:00.000Z\"\r\n    // const changeDateandTime = (timestamp) => {\r\n    //   const date = new Date(timestamp);\r\n    //   let dayx = \"\";\r\n    //   let monthx = \"\";\r\n    //   let yearx = \"\";\r\n    //   if (startDate !== null) {\r\n    //     dayx = date.getDate();\r\n    //     monthx = date.getMonth() + 1;\r\n    //     yearx = date.getFullYear();\r\n    //   }\r\n    //   return `${yearx}-${monthx}-${dayx}T23:00:00.000Z`;\r\n    // };\r\n\r\n    const filteredItems = filteredData.filter((item) => item.id === value);\r\n    setUID(value);\r\n    setUName(filteredItems[0].name);\r\n    setUEmpID(filteredItems[0].empID);\r\n    setUDescrip(filteredItems[0].descrip);\r\n    setUPosition(filteredItems[0].position);\r\n    setUStartDate(filteredItems[0].startTime);\r\n    setUEndDate(filteredItems[0].endTime);\r\n    setUCreatedTime(filteredItems[0].createdTime);\r\n    setUDeleteFlag(filteredItems[0].deleteFlag);\r\n\r\n    setUOpened(true);\r\n    setShowUpdate(true);\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <Card>\r\n        <MDBox pt={4} pb={3} px={30}>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"info\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={1}\r\n            mt={2}\r\n            p={2}\r\n            mb={1}\r\n            textAlign=\"left\"\r\n          >\r\n            <MDTypography variant=\"h4\" fontWeight=\"medium\" color=\"white\" textAlign=\"center\" mt={1}>\r\n              Add Work History\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox\r\n            variant=\"gradient\"\r\n            bgColor=\"error\"\r\n            borderRadius=\"lg\"\r\n            coloredShadow=\"success\"\r\n            mx={3}\r\n            mt={1}\r\n            p={1}\r\n            mb={1}\r\n            textAlign=\"center\"\r\n          >\r\n            <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n              {\" \"}\r\n            </MDTypography>\r\n          </MDBox>\r\n          <MDBox component=\"form\" role=\"form\">\r\n            <MDBox mb={2}>\r\n              <Container>\r\n                <div align=\"center\">\r\n                  {\" \"}\r\n                  <MDBox mb={2}>\r\n                    <Container>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\" Company Name *\"\r\n                            value={namex || \"\"}\r\n                            onKeyUp={handleOnNameKeys}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Description *\"\r\n                            value={descripx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setDescrip(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Container>\r\n                  </MDBox>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          Start Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={startDate}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                          onChange={(time) => setStartDate(time)}\r\n                        />{\" \"}\r\n                      </MDBox>{\" \"}\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                      <MDBox mt={2}>\r\n                        <MDTypography\r\n                          variant=\"button\"\r\n                          fontWeight=\"regular\"\r\n                          fontSize=\"80%\"\r\n                          align=\"left\"\r\n                          color=\"text\"\r\n                        >\r\n                          End Date *\r\n                        </MDTypography>\r\n                        <DatePicker\r\n                          placeholderText=\"MM/DD/YY\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          selected={endDate}\r\n                          onChange={(time) => setEndDate(time)}\r\n                          peekNextMonth\r\n                          showMonthDropdown\r\n                          showYearDropdown\r\n                          dropdownMode=\"select\"\r\n                        />{\" \"}\r\n                      </MDBox>\r\n                    </div>\r\n                  </div>\r\n                  <MDBox mt={2}>\r\n                    <div className=\"col-sm-12\">\r\n                      <MDInput\r\n                        type=\"text\"\r\n                        label=\"Position *\"\r\n                        value={positionx || \"\"}\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPosition(e.target.value)}\r\n                        variant=\"standard\"\r\n                        fullWidth\r\n                      />\r\n                    </div>\r\n                  </MDBox>\r\n                  <MDBox mt={4} mb={1}>\r\n                    <MDButton\r\n                      variant=\"gradient\"\r\n                      onClick={handleClick}\r\n                      color=\"info\"\r\n                      width=\"50%\"\r\n                      align=\"center\"\r\n                    >\r\n                      Save\r\n                    </MDButton>\r\n                  </MDBox>\r\n                </div>\r\n              </Container>\r\n            </MDBox>\r\n          </MDBox>\r\n        </MDBox>\r\n      </Card>\r\n      <MDBox pt={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12} lg={12}>\r\n            {showLists ? (\r\n              <Container>\r\n                <div className=\"row\">\r\n                  {allApp.map((item) => (\r\n                    <Grid item xs={6} md={6} lg={6} key={item.id}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"120%\"\r\n                            color=\"info\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            {item.name}\r\n                          </MDTypography>\r\n                          <MDTypography\r\n                            variant=\"h5\"\r\n                            fontWeight=\"medium\"\r\n                            fontSize=\"70%\"\r\n                            color=\"text\"\r\n                            textAlign=\"left\"\r\n                            mt={1}\r\n                            mb={0}\r\n                          >\r\n                            Position: {item.position}\r\n                          </MDTypography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleDeleteSK(item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                delete\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                          <div align=\"right\">\r\n                            <MDButton\r\n                              variant=\"gradient\"\r\n                              color=\"white\"\r\n                              onClick={() => handleShow(allApp, item.id)}\r\n                              width=\"50%\"\r\n                              mt={-1}\r\n                            >\r\n                              <Icon\r\n                                fontSize=\"medium\"\r\n                                sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                                color=\"error\"\r\n                              >\r\n                                edit\r\n                              </Icon>\r\n                            </MDButton>\r\n                          </div>\r\n                        </CardActions>\r\n                      </Card>\r\n                      &nbsp;\r\n                    </Grid>\r\n                  ))}\r\n                </div>\r\n                <br />\r\n              </Container>\r\n            ) : (\r\n              <Card>\r\n                {\" \"}\r\n                <MDTypography variant=\"h3\" fontWeight=\"bold\" color=\"text\" textAlign=\"center\" mt={1}>\r\n                  No Added Work History\r\n                </MDTypography>\r\n                <Icon\r\n                  fontSize=\"medium\"\r\n                  sx={{ fontSize: 100, alignSelf: \"center\" }}\r\n                  color=\"disabled\"\r\n                >\r\n                  sentiment_dissatisfied\r\n                </Icon>\r\n              </Card>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {showUpdate ? (\r\n        <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={uopened}>\r\n          <Card>\r\n            <MDBox pt={4} pb={3} px={30}>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={1}\r\n                mt={2}\r\n                p={2}\r\n                mb={1}\r\n                textAlign=\"left\"\r\n              >\r\n                <MDTypography\r\n                  variant=\"h4\"\r\n                  fontWeight=\"medium\"\r\n                  color=\"white\"\r\n                  textAlign=\"center\"\r\n                  mt={1}\r\n                >\r\n                  Update Work History\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox\r\n                variant=\"gradient\"\r\n                bgColor=\"error\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"success\"\r\n                mx={3}\r\n                mt={1}\r\n                p={1}\r\n                mb={1}\r\n                textAlign=\"center\"\r\n              >\r\n                <MDTypography variant=\"gradient\" fontSize=\"60%\" color=\"white\" id=\"name\">\r\n                  {\" \"}\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox component=\"form\" role=\"form\">\r\n                <MDBox mb={2}>\r\n                  <Container>\r\n                    <div align=\"center\">\r\n                      {\" \"}\r\n                      <MDBox mb={2}>\r\n                        <Container>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\" Company Name *\"\r\n                                value={unamex || \"\"}\r\n                                onKeyUp={handleOnNameKeys}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUName(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                              <MDInput\r\n                                type=\"text\"\r\n                                label=\"Description *\"\r\n                                value={udescripx || \"\"}\r\n                                className=\"form-control\"\r\n                                onChange={(e) => setUDescrip(e.target.value)}\r\n                                variant=\"standard\"\r\n                                fullWidth\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </Container>\r\n                      </MDBox>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              Start Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={ustartDate}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                              onChange={(time) => setUStartDate(time)}\r\n                            />{\" \"}\r\n                          </MDBox>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <MDBox mt={2}>\r\n                            <MDTypography\r\n                              variant=\"button\"\r\n                              fontWeight=\"regular\"\r\n                              fontSize=\"80%\"\r\n                              align=\"left\"\r\n                              color=\"text\"\r\n                            >\r\n                              End Date *\r\n                            </MDTypography>\r\n                            <DatePicker\r\n                              placeholderText=\"MM/DD/YY\"\r\n                              style={{ marginRight: \"10px\" }}\r\n                              selected={uendDate}\r\n                              onChange={(time) => setUEndDate(time)}\r\n                              peekNextMonth\r\n                              showMonthDropdown\r\n                              showYearDropdown\r\n                              dropdownMode=\"select\"\r\n                            />{\" \"}\r\n                          </MDBox>\r\n                        </div>\r\n                      </div>\r\n                      <MDBox mt={2}>\r\n                        <div className=\"col-sm-12\">\r\n                          <MDInput\r\n                            type=\"text\"\r\n                            label=\"Position *\"\r\n                            value={upositionx || \"\"}\r\n                            className=\"form-control\"\r\n                            onChange={(e) => setUPosition(e.target.value)}\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                          />\r\n                        </div>\r\n                      </MDBox>\r\n                      <MDBox mt={4} mb={1}>\r\n                        <MDButton\r\n                          variant=\"gradient\"\r\n                          onClick={handleUpdate}\r\n                          color=\"info\"\r\n                          width=\"50%\"\r\n                          align=\"center\"\r\n                        >\r\n                          Save\r\n                        </MDButton>\r\n                      </MDBox>\r\n                    </div>\r\n                  </Container>\r\n                </MDBox>\r\n              </MDBox>\r\n            </MDBox>\r\n          </Card>\r\n        </Backdrop>\r\n      ) : (\r\n        <MDBox />\r\n      )}\r\n      <Footer />\r\n      <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={opened}>\r\n        <CircularProgress color=\"info\" />\r\n      </Backdrop>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport default WorkHistory;\r\n",{"ruleId":"1071","replacedBy":"1072"},{"ruleId":"1073","replacedBy":"1074"},{"ruleId":"1075","replacedBy":"1076"},{"ruleId":"1077","replacedBy":"1078"},{"ruleId":"1079","replacedBy":"1080"},{"ruleId":"1081","severity":1,"message":"1082","line":414,"column":11,"nodeType":"1083","messageId":"1084","endLine":414,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":458,"column":11,"nodeType":"1083","messageId":"1084","endLine":458,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":484,"column":15,"nodeType":"1083","messageId":"1084","endLine":484,"endColumn":26},{"ruleId":"1081","severity":1,"message":"1082","line":496,"column":19,"nodeType":"1083","messageId":"1084","endLine":496,"endColumn":30},{"ruleId":"1081","severity":1,"message":"1082","line":1011,"column":5,"nodeType":"1083","messageId":"1084","endLine":1011,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":97,"column":5,"nodeType":"1083","messageId":"1084","endLine":97,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":98,"column":5,"nodeType":"1083","messageId":"1084","endLine":98,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":99,"column":5,"nodeType":"1083","messageId":"1084","endLine":99,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":100,"column":5,"nodeType":"1083","messageId":"1084","endLine":100,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":101,"column":5,"nodeType":"1083","messageId":"1084","endLine":101,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":130,"column":11,"nodeType":"1083","messageId":"1084","endLine":130,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":159,"column":11,"nodeType":"1083","messageId":"1084","endLine":159,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":423,"column":11,"nodeType":"1083","messageId":"1084","endLine":423,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":445,"column":15,"nodeType":"1083","messageId":"1084","endLine":445,"endColumn":26},{"ruleId":"1081","severity":1,"message":"1082","line":206,"column":13,"nodeType":"1083","messageId":"1084","endLine":206,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":207,"column":13,"nodeType":"1083","messageId":"1084","endLine":207,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":208,"column":13,"nodeType":"1083","messageId":"1084","endLine":208,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":73,"column":11,"nodeType":"1083","messageId":"1084","endLine":73,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":104,"column":11,"nodeType":"1083","messageId":"1084","endLine":104,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":190,"column":13,"nodeType":"1083","messageId":"1084","endLine":190,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":191,"column":13,"nodeType":"1083","messageId":"1084","endLine":191,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":98,"column":11,"nodeType":"1083","messageId":"1084","endLine":98,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":592,"column":11,"nodeType":"1083","messageId":"1084","endLine":592,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":618,"column":15,"nodeType":"1083","messageId":"1084","endLine":618,"endColumn":26},{"ruleId":"1081","severity":1,"message":"1082","line":630,"column":19,"nodeType":"1083","messageId":"1084","endLine":630,"endColumn":30},{"ruleId":"1081","severity":1,"message":"1082","line":74,"column":5,"nodeType":"1083","messageId":"1084","endLine":74,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":58,"column":11,"nodeType":"1083","messageId":"1084","endLine":58,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":149,"column":9,"nodeType":"1083","messageId":"1084","endLine":149,"endColumn":20},{"ruleId":"1081","severity":1,"message":"1082","line":191,"column":5,"nodeType":"1083","messageId":"1084","endLine":191,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":88,"column":9,"nodeType":"1083","messageId":"1084","endLine":88,"endColumn":20},{"ruleId":"1081","severity":1,"message":"1082","line":393,"column":11,"nodeType":"1083","messageId":"1084","endLine":393,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":395,"column":13,"nodeType":"1083","messageId":"1084","endLine":395,"endColumn":24},{"ruleId":"1081","severity":1,"message":"1082","line":399,"column":11,"nodeType":"1083","messageId":"1084","endLine":399,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":190,"column":9,"nodeType":"1083","messageId":"1084","endLine":190,"endColumn":20},{"ruleId":"1081","severity":1,"message":"1082","line":53,"column":11,"nodeType":"1083","messageId":"1084","endLine":53,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":159,"column":5,"nodeType":"1083","messageId":"1084","endLine":159,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":172,"column":9,"nodeType":"1083","messageId":"1084","endLine":172,"endColumn":20},{"ruleId":"1081","severity":1,"message":"1082","line":23,"column":3,"nodeType":"1083","messageId":"1084","endLine":23,"endColumn":14},{"ruleId":"1081","severity":1,"message":"1082","line":57,"column":11,"nodeType":"1083","messageId":"1084","endLine":57,"endColumn":22},{"ruleId":"1081","severity":1,"message":"1082","line":80,"column":9,"nodeType":"1083","messageId":"1084","endLine":80,"endColumn":20},{"ruleId":"1081","severity":1,"message":"1082","line":166,"column":7,"nodeType":"1083","messageId":"1084","endLine":166,"endColumn":18},{"ruleId":"1081","severity":1,"message":"1082","line":175,"column":7,"nodeType":"1083","messageId":"1084","endLine":175,"endColumn":18},{"ruleId":"1081","severity":1,"message":"1082","line":226,"column":5,"nodeType":"1083","messageId":"1084","endLine":226,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":197,"column":7,"nodeType":"1083","messageId":"1084","endLine":197,"endColumn":18},{"ruleId":"1081","severity":1,"message":"1082","line":208,"column":7,"nodeType":"1083","messageId":"1084","endLine":208,"endColumn":18},{"ruleId":"1081","severity":1,"message":"1082","line":277,"column":5,"nodeType":"1083","messageId":"1084","endLine":277,"endColumn":16},{"ruleId":"1081","severity":1,"message":"1082","line":175,"column":7,"nodeType":"1083","messageId":"1084","endLine":175,"endColumn":18},{"ruleId":"1081","severity":1,"message":"1082","line":251,"column":5,"nodeType":"1083","messageId":"1084","endLine":251,"endColumn":16},"lines-around-directive",["1085"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]