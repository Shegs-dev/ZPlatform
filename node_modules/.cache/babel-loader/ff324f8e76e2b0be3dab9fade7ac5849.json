{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OluwasegunAjayi\\\\Desktop\\\\PlutospaceMono\\\\src\\\\layouts\\\\appraisal\\\\appraisalGrading\\\\data\\\\appraisalGradingData.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\n// @mui material components\n// Soft UI Dashboard React components\nimport { useEffect, useState } from \"react\"; // import MDButton from \"components/MDButton\";\n\nimport { Dropdown } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Icon from \"@mui/material/Icon\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\"; // import PHeaders from \"postHeader\";\n\nimport GHeaders from \"getHeader\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AppraisalGradeData() {\n  _s();\n\n  // const { allPHeaders: myHeaders } = PHeaders();\n  const {\n    allGHeaders: miHeaders\n  } = GHeaders(); // const axios = require(\"axios\");\n\n  const [items, setItems] = useState([]); // const [id, setId] = useState(\"\");\n\n  const navigate = useNavigate();\n  const MySwal = withReactContent(Swal); // Method to handle update\n  // const handleUpdate = (\n  //   idx,\n  //   valuex,\n  //   gradex,\n  //   colorCodex,\n  //   minScorex,\n  //   maxScorex,\n  //   createdTimex,\n  //   deleteFlagx\n  // ) => {\n  //   const data11 = JSON.parse(localStorage.getItem(\"user1\"));\n  //   const orgIDs = data11.orgID;\n  //   const raw = JSON.stringify({\n  //     id: idx,\n  //     orgID: orgIDs,\n  //     value: valuex,\n  //     grade: gradex,\n  //     colorCode: colorCodex,\n  //     minScore: minScorex,\n  //     maxScore: maxScorex,\n  //     createdTime: createdTimex,\n  //     deleteFlag: deleteFlagx,\n  //   });\n  //   const requestOptions = {\n  //     method: \"POST\",\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: \"follow\",\n  //   };\n  //   fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/update`, requestOptions)\n  //     .then(async (res) => {\n  //       const aToken = res.headers.get(\"token-1\");\n  //       localStorage.setItem(\"rexxdex\", aToken);\n  //       return res.json();\n  //     })\n  //     .then((result) => {\n  //       if (result.message === \"Expired Access\") {\n  //         navigate(\"/authentication/sign-in\");\n  //         window.location.reload();\n  //       }\n  //       if (result.message === \"Token Does Not Exist\") {\n  //         navigate(\"/authentication/sign-in\");\n  //         window.location.reload();\n  //       }\n  //       if (result.message === \"Unauthorized Access\") {\n  //         navigate(\"/authentication/forbiddenPage\");\n  //         window.location.reload();\n  //       }\n  //       MySwal.fire({\n  //         title: result.status,\n  //         type: \"success\",\n  //         text: result.message,\n  //       }).then(() => {\n  //         window.location.reload();\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       MySwal.fire({\n  //         title: error.status,\n  //         type: \"error\",\n  //         text: error.message,\n  //       });\n  //     });\n  // };\n  // Method to filter departments\n  // const handleShow = (filteredData, value) => {\n  //   let valuex = \"\";\n  //   let gradex = \"\";\n  //   let colorCodex = \"\";\n  //   let minScorex = 0;\n  //   let maxScorex = 0;\n  //   let createdTimex = 0;\n  //   let deleteFlagx = 0;\n  //   // Avoid filter for empty string\n  //   if (!value) {\n  //     valuex = \"\";\n  //     gradex = \"\";\n  //     colorCodex = \"\";\n  //     minScorex = 0;\n  //     maxScorex = 0;\n  //     createdTimex = 0;\n  //     deleteFlagx = 0;\n  //   } else {\n  //     const filteredItems = filteredData.filter((item) => item.id === value);\n  //     valuex = filteredItems[0].value;\n  //     gradex = filteredItems[0].grade;\n  //     colorCodex = filteredItems[0].colorCode;\n  //     minScorex = filteredItems[0].minScore;\n  //     maxScorex = filteredItems[0].maxScore;\n  //     createdTimex = filteredItems[0].createdTime;\n  //     deleteFlagx = filteredItems[0].deleteFlag;\n  //     MySwal.fire({\n  //       title: \"Update Department\",\n  //       html: `<table><tr><td>\n  //       <label for=\"svalue\">Score Value:</label></td>\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"svalue\" value=\"${valuex}\" ></td></tr>\n  //       <tr><td><label for=\"grade:\">Grade</label></td>\n  //       <td><input type=\"email\" class=\"swal2-input\" id=\"grade\" value=\"${gradex}\" ></td></tr>\n  //       <tr><td><label for=\"minScore:\">Min Score</label></td>\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"minScore\" value=\"${minScorex}\" ></td></tr>\n  //       <tr><td><label for=\"maxScore:\">Max Score</label></td>\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"maxScore\" value=\"${maxScorex}\" ></td></tr>\n  //       <tr><td><label for=\"colorCode:\">Color</label></td>\n  //       <td><input type=\"color\" class=\"swal2-input\" style=\"width:77%\" id=\"colorCode\" value=\"${colorCodex}\" ></td></tr>`,\n  //       confirmButtonText: \"Save\",\n  //       showCancelButton: true,\n  //       confirmButtonColor: \"#3085d6\",\n  //       cancelButtonColor: \"#d33\",\n  //       preConfirm: () => {\n  //         const sValue = Swal.getPopup().querySelector(\"#svalue\").value;\n  //         const grade = Swal.getPopup().querySelector(\"#grade\").value;\n  //         const colorCode = Swal.getPopup().querySelector(\"#colorCode\").value;\n  //         const minScore = Swal.getPopup().querySelector(\"#minScore\").value;\n  //         const maxScore = Swal.getPopup().querySelector(\"#maxScore\").value;\n  //         const id = value;\n  //         const Number = /^[0-9]+$/;\n  //         const letters = /^[A-Z ]+$/;\n  //         const gradeVali = /^[A-Z0-9 ]+$/;\n  //         if (\n  //           minScore > maxScore ||\n  //           (sValue.length > 0 && !sValue.match(letters)) ||\n  //           (grade.length > 0 && !grade.match(gradeVali)) ||\n  //           (minScore.length > 0 && !minScore.match(Number)) ||\n  //           (maxScore.length > 0 && !maxScore.match(Number))\n  //         ) {\n  //           Swal.showValidationMessage(\n  //             `Score Value - input only capital letters<br> Grade - input only capital letters and numbers<br>  Minimum Score - input only numbers<br> Maximum Score - input only numbers<br> Mininmum Score should be lower than the Maximum Score `\n  //           );\n  //         } else {\n  //           Swal.resetValidationMessage();\n  //           handleUpdate(\n  //             id,\n  //             sValue,\n  //             grade,\n  //             colorCode,\n  //             minScore,\n  //             maxScore,\n  //             createdTimex,\n  //             deleteFlagx\n  //           );\n  //         }\n  //       },\n  //     });\n  //   }\n  // };\n  // Method to handle diable\n\n  const handleDisable = val => {\n    MySwal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\"\n    }).then(result => {\n      if (result.isConfirmed) {\n        const requestOptions = {\n          method: \"DELETE\",\n          headers: miHeaders\n        };\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/delete/${val}`, requestOptions).then(async res => {\n          const aToken = res.headers.get(\"token-1\");\n          localStorage.setItem(\"rexxdex\", aToken);\n          return res.json();\n        }).then(resx => {\n          if (resx.message === \"Expired Access\") {\n            navigate(\"/authentication/sign-in\");\n          }\n\n          if (resx.message === \"Token Does Not Exist\") {\n            navigate(\"/authentication/sign-in\");\n          }\n\n          if (resx.message === \"Unauthorized Access\") {\n            navigate(\"/authentication/forbiddenPage\");\n          }\n\n          MySwal.fire({\n            title: resx.status,\n            type: \"success\",\n            text: resx.message\n          }).then(() => {\n            window.location.reload();\n          });\n        }).catch(error => {\n          MySwal.fire({\n            title: error.status,\n            type: \"error\",\n            text: error.message\n          });\n        });\n      }\n    });\n  }; // Method to change date from timestamp\n\n\n  const changeBranchDate = timestamp => {\n    const date = new Date(timestamp);\n    const retDate = date.toDateString();\n    return retDate;\n  }; // Function to get cell value\n  // const getCellValue = (value) => {\n  //   setId(value);\n  // };\n  // Method to fetch all Branch\n\n\n  useEffect(() => {\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\n    const orgIDs = data11.orgID;\n    const headers = miHeaders;\n    let isMounted = true;\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/gets/${orgIDs}`, {\n      headers\n    }).then(async res => {\n      const aToken = res.headers.get(\"token-1\");\n      localStorage.setItem(\"rexxdex\", aToken);\n      return res.json();\n    }).then(result => {\n      if (result.message === \"Expired Access\") {\n        navigate(\"/authentication/sign-in\");\n        window.location.reload();\n      }\n\n      if (result.message === \"Token Does Not Exist\") {\n        navigate(\"/authentication/sign-in\");\n        window.location.reload();\n      }\n\n      if (result.message === \"Unauthorized Access\") {\n        navigate(\"/authentication/forbiddenPage\");\n        window.location.reload();\n      }\n\n      if (isMounted) {\n        setItems(result);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const handleShow = value => {\n    navigate(`/appraisal/update?id=${value}`);\n  };\n\n  return {\n    columns: [{\n      Header: \"Score Value\",\n      accessor: \"value\",\n      align: \"left\"\n    }, {\n      Header: \"Grade\",\n      accessor: \"grade\",\n      align: \"left\"\n    }, {\n      Header: \"Minimum Score\",\n      accessor: \"minScore\",\n      align: \"left\"\n    }, {\n      Header: \"Maximum Score\",\n      accessor: \"maxScore\",\n      align: \"left\"\n    }, {\n      Header: \"Color\",\n      accessor: \"colorCode\",\n      Cell: _ref => {\n        let {\n          cell: {\n            value\n          }\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          disabled: true,\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 40\n        }, this);\n      },\n      align: \"left\"\n    }, {\n      Header: \"Date Created\",\n      accessor: \"createdTime\",\n      Cell: _ref2 => {\n        let {\n          cell: {\n            value\n          }\n        } = _ref2;\n        return changeBranchDate(value);\n      },\n      align: \"left\"\n    }, {\n      Header: \"actions\",\n      accessor: \"id\",\n      Cell: _ref3 => {\n        let {\n          cell: {\n            value\n          }\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\",\n            backgroundColor: \"#dadada\",\n            borderRadius: \"2px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Dropdown, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n              variant: \"secondary\",\n              id: \"dropdown-basic\",\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                sx: {\n                  fontWeight: \"light\"\n                },\n                children: \"settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                onClick: () => handleShow(value),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                onClick: () => handleDisable(value),\n                children: \"Disable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this);\n      },\n      align: \"center\"\n    }],\n    rows: items\n  };\n}\n\n_s(AppraisalGradeData, \"K4zs12HydVpcriwJbXPqsjCjNz0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AppraisalGradeData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppraisalGradeData\");","map":{"version":3,"names":["useEffect","useState","Dropdown","Icon","Swal","withReactContent","GHeaders","useNavigate","AppraisalGradeData","allGHeaders","miHeaders","items","setItems","navigate","MySwal","handleDisable","val","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","requestOptions","method","headers","fetch","process","env","REACT_APP_SHASHA_URL","res","aToken","get","localStorage","setItem","json","resx","message","status","type","window","location","reload","catch","error","changeBranchDate","timestamp","date","Date","retDate","toDateString","data11","JSON","parse","getItem","orgIDs","orgID","isMounted","handleShow","value","columns","Header","accessor","align","Cell","cell","width","backgroundColor","borderRadius","fontWeight","rows"],"sources":["C:/Users/OluwasegunAjayi/Desktop/PlutospaceMono/src/layouts/appraisal/appraisalGrading/data/appraisalGradingData.js"],"sourcesContent":["/* eslint-disable react/prop-types */\r\n\r\n// @mui material components\r\n\r\n// Soft UI Dashboard React components\r\nimport { useEffect, useState } from \"react\";\r\n// import MDButton from \"components/MDButton\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Icon from \"@mui/material/Icon\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n// import PHeaders from \"postHeader\";\r\nimport GHeaders from \"getHeader\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function AppraisalGradeData() {\r\n  // const { allPHeaders: myHeaders } = PHeaders();\r\n  const { allGHeaders: miHeaders } = GHeaders();\r\n  // const axios = require(\"axios\");\r\n  const [items, setItems] = useState([]);\r\n  // const [id, setId] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  // Method to handle update\r\n  // const handleUpdate = (\r\n  //   idx,\r\n  //   valuex,\r\n  //   gradex,\r\n  //   colorCodex,\r\n  //   minScorex,\r\n  //   maxScorex,\r\n  //   createdTimex,\r\n  //   deleteFlagx\r\n  // ) => {\r\n  //   const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n  //   const orgIDs = data11.orgID;\r\n  //   const raw = JSON.stringify({\r\n  //     id: idx,\r\n  //     orgID: orgIDs,\r\n  //     value: valuex,\r\n  //     grade: gradex,\r\n  //     colorCode: colorCodex,\r\n  //     minScore: minScorex,\r\n  //     maxScore: maxScorex,\r\n  //     createdTime: createdTimex,\r\n  //     deleteFlag: deleteFlagx,\r\n  //   });\r\n  //   const requestOptions = {\r\n  //     method: \"POST\",\r\n  //     headers: myHeaders,\r\n  //     body: raw,\r\n  //     redirect: \"follow\",\r\n  //   };\r\n\r\n  //   fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/update`, requestOptions)\r\n  //     .then(async (res) => {\r\n  //       const aToken = res.headers.get(\"token-1\");\r\n  //       localStorage.setItem(\"rexxdex\", aToken);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((result) => {\r\n  //       if (result.message === \"Expired Access\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Token Does Not Exist\") {\r\n  //         navigate(\"/authentication/sign-in\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       if (result.message === \"Unauthorized Access\") {\r\n  //         navigate(\"/authentication/forbiddenPage\");\r\n  //         window.location.reload();\r\n  //       }\r\n  //       MySwal.fire({\r\n  //         title: result.status,\r\n  //         type: \"success\",\r\n  //         text: result.message,\r\n  //       }).then(() => {\r\n  //         window.location.reload();\r\n  //       });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       MySwal.fire({\r\n  //         title: error.status,\r\n  //         type: \"error\",\r\n  //         text: error.message,\r\n  //       });\r\n  //     });\r\n  // };\r\n\r\n  // Method to filter departments\r\n  // const handleShow = (filteredData, value) => {\r\n  //   let valuex = \"\";\r\n  //   let gradex = \"\";\r\n  //   let colorCodex = \"\";\r\n  //   let minScorex = 0;\r\n  //   let maxScorex = 0;\r\n  //   let createdTimex = 0;\r\n  //   let deleteFlagx = 0;\r\n  //   // Avoid filter for empty string\r\n  //   if (!value) {\r\n  //     valuex = \"\";\r\n  //     gradex = \"\";\r\n  //     colorCodex = \"\";\r\n  //     minScorex = 0;\r\n  //     maxScorex = 0;\r\n  //     createdTimex = 0;\r\n  //     deleteFlagx = 0;\r\n  //   } else {\r\n  //     const filteredItems = filteredData.filter((item) => item.id === value);\r\n  //     valuex = filteredItems[0].value;\r\n  //     gradex = filteredItems[0].grade;\r\n  //     colorCodex = filteredItems[0].colorCode;\r\n  //     minScorex = filteredItems[0].minScore;\r\n  //     maxScorex = filteredItems[0].maxScore;\r\n  //     createdTimex = filteredItems[0].createdTime;\r\n  //     deleteFlagx = filteredItems[0].deleteFlag;\r\n\r\n  //     MySwal.fire({\r\n  //       title: \"Update Department\",\r\n  //       html: `<table><tr><td>\r\n  //       <label for=\"svalue\">Score Value:</label></td>\r\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"svalue\" value=\"${valuex}\" ></td></tr>\r\n  //       <tr><td><label for=\"grade:\">Grade</label></td>\r\n  //       <td><input type=\"email\" class=\"swal2-input\" id=\"grade\" value=\"${gradex}\" ></td></tr>\r\n  //       <tr><td><label for=\"minScore:\">Min Score</label></td>\r\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"minScore\" value=\"${minScorex}\" ></td></tr>\r\n  //       <tr><td><label for=\"maxScore:\">Max Score</label></td>\r\n  //       <td><input type=\"text\" class=\"swal2-input\" id=\"maxScore\" value=\"${maxScorex}\" ></td></tr>\r\n  //       <tr><td><label for=\"colorCode:\">Color</label></td>\r\n  //       <td><input type=\"color\" class=\"swal2-input\" style=\"width:77%\" id=\"colorCode\" value=\"${colorCodex}\" ></td></tr>`,\r\n  //       confirmButtonText: \"Save\",\r\n  //       showCancelButton: true,\r\n  //       confirmButtonColor: \"#3085d6\",\r\n  //       cancelButtonColor: \"#d33\",\r\n  //       preConfirm: () => {\r\n  //         const sValue = Swal.getPopup().querySelector(\"#svalue\").value;\r\n  //         const grade = Swal.getPopup().querySelector(\"#grade\").value;\r\n  //         const colorCode = Swal.getPopup().querySelector(\"#colorCode\").value;\r\n  //         const minScore = Swal.getPopup().querySelector(\"#minScore\").value;\r\n  //         const maxScore = Swal.getPopup().querySelector(\"#maxScore\").value;\r\n  //         const id = value;\r\n\r\n  //         const Number = /^[0-9]+$/;\r\n  //         const letters = /^[A-Z ]+$/;\r\n  //         const gradeVali = /^[A-Z0-9 ]+$/;\r\n  //         if (\r\n  //           minScore > maxScore ||\r\n  //           (sValue.length > 0 && !sValue.match(letters)) ||\r\n  //           (grade.length > 0 && !grade.match(gradeVali)) ||\r\n  //           (minScore.length > 0 && !minScore.match(Number)) ||\r\n  //           (maxScore.length > 0 && !maxScore.match(Number))\r\n  //         ) {\r\n  //           Swal.showValidationMessage(\r\n  //             `Score Value - input only capital letters<br> Grade - input only capital letters and numbers<br>  Minimum Score - input only numbers<br> Maximum Score - input only numbers<br> Mininmum Score should be lower than the Maximum Score `\r\n  //           );\r\n  //         } else {\r\n  //           Swal.resetValidationMessage();\r\n  //           handleUpdate(\r\n  //             id,\r\n  //             sValue,\r\n  //             grade,\r\n  //             colorCode,\r\n  //             minScore,\r\n  //             maxScore,\r\n  //             createdTimex,\r\n  //             deleteFlagx\r\n  //           );\r\n  //         }\r\n  //       },\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  // Method to handle diable\r\n  const handleDisable = (val) => {\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        const requestOptions = {\r\n          method: \"DELETE\",\r\n          headers: miHeaders,\r\n        };\r\n\r\n        fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/delete/${val}`, requestOptions)\r\n          .then(async (res) => {\r\n            const aToken = res.headers.get(\"token-1\");\r\n            localStorage.setItem(\"rexxdex\", aToken);\r\n            return res.json();\r\n          })\r\n          .then((resx) => {\r\n            if (resx.message === \"Expired Access\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Token Does Not Exist\") {\r\n              navigate(\"/authentication/sign-in\");\r\n            }\r\n            if (resx.message === \"Unauthorized Access\") {\r\n              navigate(\"/authentication/forbiddenPage\");\r\n            }\r\n            MySwal.fire({\r\n              title: resx.status,\r\n              type: \"success\",\r\n              text: resx.message,\r\n            }).then(() => {\r\n              window.location.reload();\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            MySwal.fire({\r\n              title: error.status,\r\n              type: \"error\",\r\n              text: error.message,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Method to change date from timestamp\r\n  const changeBranchDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const retDate = date.toDateString();\r\n    return retDate;\r\n  };\r\n\r\n  // Function to get cell value\r\n  // const getCellValue = (value) => {\r\n  //   setId(value);\r\n  // };\r\n  // Method to fetch all Branch\r\n  useEffect(() => {\r\n    const data11 = JSON.parse(localStorage.getItem(\"user1\"));\r\n\r\n    const orgIDs = data11.orgID;\r\n    const headers = miHeaders;\r\n    let isMounted = true;\r\n    fetch(`${process.env.REACT_APP_SHASHA_URL}/appraisalGrading/gets/${orgIDs}`, { headers })\r\n      .then(async (res) => {\r\n        const aToken = res.headers.get(\"token-1\");\r\n        localStorage.setItem(\"rexxdex\", aToken);\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        if (result.message === \"Expired Access\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Token Does Not Exist\") {\r\n          navigate(\"/authentication/sign-in\");\r\n          window.location.reload();\r\n        }\r\n        if (result.message === \"Unauthorized Access\") {\r\n          navigate(\"/authentication/forbiddenPage\");\r\n          window.location.reload();\r\n        }\r\n        if (isMounted) {\r\n          setItems(result);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleShow = (value) => {\r\n    navigate(`/appraisal/update?id=${value}`);\r\n  };\r\n\r\n  return {\r\n    columns: [\r\n      { Header: \"Score Value\", accessor: \"value\", align: \"left\" },\r\n      { Header: \"Grade\", accessor: \"grade\", align: \"left\" },\r\n      { Header: \"Minimum Score\", accessor: \"minScore\", align: \"left\" },\r\n      { Header: \"Maximum Score\", accessor: \"maxScore\", align: \"left\" },\r\n      {\r\n        Header: \"Color\",\r\n        accessor: \"colorCode\",\r\n        Cell: ({ cell: { value } }) => <input type=\"color\" disabled value={value} />,\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"Date Created\",\r\n        accessor: \"createdTime\",\r\n        Cell: ({ cell: { value } }) => changeBranchDate(value),\r\n        align: \"left\",\r\n      },\r\n      {\r\n        Header: \"actions\",\r\n        accessor: \"id\",\r\n        Cell: ({ cell: { value } }) => (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#dadada\",\r\n              borderRadius: \"2px\",\r\n            }}\r\n          >\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                <Icon sx={{ fontWeight: \"light\" }}>settings</Icon>\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => handleShow(value)}>Update</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleDisable(value)}>Disable</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n        ),\r\n        align: \"center\",\r\n      },\r\n    ],\r\n\r\n    rows: items,\r\n  };\r\n}\r\n"],"mappings":";;;AAAA;AAEA;AAEA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CACA;;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,sCAAP;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,eAAe,SAASC,kBAAT,GAA8B;EAAA;;EAC3C;EACA,MAAM;IAAEC,WAAW,EAAEC;EAAf,IAA6BJ,QAAQ,EAA3C,CAF2C,CAG3C;;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC,CAJ2C,CAK3C;;EACA,MAAMY,QAAQ,GAAGN,WAAW,EAA5B;EAEA,MAAMO,MAAM,GAAGT,gBAAgB,CAACD,IAAD,CAA/B,CAR2C,CAU3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAC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"},"metadata":{},"sourceType":"module"}